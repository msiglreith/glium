var searchIndex = {};
searchIndex['glium'] = {"items":[[0,"","glium","Easy-to-use, high-level, OpenGL3+ wrapper."],[3,"PollEventsIter","","Iterator for all the events received by the window."],[3,"WaitEventsIter","","Blocking iterator over all the events received by the window."],[3,"DrawParameters","","Represents the parameters to use when drawing."],[12,"depth_test","","The function that the GPU will use to determine whether to write over an existing pixel\non the target. Don't forget to set `depth_write` appropriately if you use a depth test.",0],[12,"depth_write","","Sets whether the GPU will write the depth values on the depth buffer if they pass the\ndepth test.",0],[12,"depth_range","","The range of possible Z values in surface coordinates.",0],[12,"blending_function","","The function that the GPU will use to merge the existing pixel with the pixel that is\nbeing written.",0],[12,"line_width","","Width in pixels of the lines to draw when drawing lines.",0],[12,"backface_culling","","Whether or not the GPU should filter out some faces.",0],[12,"polygon_mode","","How to render polygons. The default value is `Fill`.",0],[12,"multisampling","","Whether multisample antialiasing (MSAA) should be used. Default value is `true`.",0],[12,"dithering","","Whether dithering is activated. Default value is `true`.",0],[12,"viewport","","The viewport to use when drawing.",0],[12,"scissor","","If specified, only pixels in this rect will be displayed. Default is `None`.",0],[12,"draw_primitives","","If `false`, the pipeline will stop after the primitives generation stage. The default\nvalue is `true`.",0],[3,"IndexBuffer","","A list of indices loaded in the graphics card's memory."],[3,"VertexBuffer","","A list of vertices loaded in the graphics card's memory."],[3,"Program","","A combination of shaders linked together."],[3,"LinearSyncFence","","Prototype for a `SyncFence`."],[3,"SyncFence","","Provides a way to wait for a server-side operation to be finished."],[3,"Version","","Describes a version."],[3,"Rect","","Area of a surface in pixels."],[12,"left","","Number of pixels between the left border of the surface and the left border of\nthe rectangle.",1],[12,"bottom","","Number of pixels between the bottom border of the surface and the bottom border\nof the rectangle.",1],[12,"width","","Width of the area in pixels.",1],[12,"height","","Height of the area in pixels.",1],[3,"BlitTarget","","Area of a surface in pixels. Similar to a `Rect` except that dimensions can be negative."],[12,"left","","Number of pixels between the left border of the surface and the left border of\nthe rectangle.",2],[12,"bottom","","Number of pixels between the bottom border of the surface and the bottom border\nof the rectangle.",2],[12,"width","","Width of the area in pixels. Can be negative.",2],[12,"height","","Height of the area in pixels. Can be negative.",2],[3,"Frame","","Implementation of `Surface`, targeting the default framebuffer."],[3,"Display","","The main object of this library. Controls the whole display."],[4,"BlendingFunction","","Function that the GPU will use for blending."],[13,"AlwaysReplace","","Simply overwrite the destination pixel with the source pixel.",3],[13,"Min","","For each individual component (red, green, blue, and alpha), the minimum value is chosen\nbetween the source and the destination.",3],[13,"Max","","For each individual component (red, green, blue, and alpha), the maximum value is chosen\nbetween the source and the destination.",3],[13,"Addition","","For each individual component (red, green, blue, and alpha), a weighted addition\nbetween the source and the destination.",3],[12,"source","glium::BlendingFunction","The factor to apply to the source pixel.",3],[12,"destination","","The factor to apply to the destination pixel.",3],[13,"Subtraction","glium","For each individual component (red, green, blue, and alpha), a weighted substraction\nof the source by the destination.",3],[12,"source","glium::BlendingFunction","The factor to apply to the source pixel.",3],[12,"destination","","The factor to apply to the destination pixel.",3],[13,"ReverseSubtraction","glium","For each individual component (red, green, blue, and alpha), a weighted substraction\nof the destination by the source.",3],[12,"source","glium::BlendingFunction","The factor to apply to the source pixel.",3],[12,"destination","","The factor to apply to the destination pixel.",3],[4,"LinearBlendingFactor","glium","Indicates which value to multiply each component with."],[13,"Zero","","Multiply the source or destination component by zero, which always\ngives `0.0`.",4],[13,"One","","Multiply the source or destination component by one, which always\ngives you the original value.",4],[13,"SourceColor","","Multiply the source or destination component by its corresponding value\nin the source.",4],[13,"OneMinusSourceColor","","Equivalent to `1 - SourceColor`.",4],[13,"DestinationColor","","Multiply the source or destination component by its corresponding value\nin the destination.",4],[13,"OneMinusDestinationColor","","Equivalent to `1 - DestinationColor`.",4],[13,"SourceAlpha","","Multiply the source or destination component by the alpha value of the source.",4],[13,"OneMinusSourceAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of the source.",4],[13,"DestinationAlpha","","Multiply the source or destination component by the alpha value of the destination.",4],[13,"OneMinusDestinationAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of the\ndestination.",4],[4,"BackfaceCullingMode","","Describes how triangles should be filtered before the fragment processing. Backface culling\nis purely an optimization. If you don't know what this does, just use `CullingDisabled`."],[13,"CullingDisabled","","All triangles are always drawn.",5],[13,"CullCounterClockWise","","Triangles whose vertices are counterclockwise won't be drawn.",5],[13,"CullClockWise","","Triangles whose vertices are clockwise won't be drawn.",5],[4,"DepthTest","","The function that the GPU will use to determine whether to write over an existing pixel\non the target."],[13,"Ignore","","Never replace the target pixel.",6],[13,"Overwrite","","Always replace the target pixel.",6],[13,"IfEqual","","Replace if the z-value of the source is equal to the destination.",6],[13,"IfNotEqual","","Replace if the z-value of the source is different than the destination.",6],[13,"IfMore","","Replace if the z-value of the source is more than the destination.",6],[13,"IfMoreOrEqual","","Replace if the z-value of the source is more than, or equal to the destination.",6],[13,"IfLess","","Replace if the z-value of the source is less than the destination.",6],[13,"IfLessOrEqual","","Replace if the z-value of the source is less than, or equal to the destination.",6],[4,"PolygonMode","","Defines how the device should render polygons."],[13,"Point","","Only draw a single point at each vertex.",7],[13,"Line","","Only draw a line in the boundaries of each polygon.",7],[13,"Fill","","Fill the content of the polygon. This is the default mode.",7],[4,"ProgramCreationError","","Error that can be triggered when creating a `Program`."],[13,"CompilationError","","Error while compiling one of the shaders.",8],[13,"LinkingError","","Error while linking the program.",8],[13,"ShaderTypeNotSupported","","One of the requested shader types is not supported by the backend.",8],[13,"TransformFeedbackNotSupported","","You have requested transform feedback varyings, but transform feedback is not supported\nby the backend.",8],[4,"Api","","Describes the corresponding API."],[13,"Gl","","",9],[13,"GlEs","","",9],[4,"DrawError","","Error that can happen while drawing."],[13,"NoDepthBuffer","","A depth function has been requested but no depth buffer is available.",10],[13,"AttributeTypeMismatch","","The type of a vertex attribute in the vertices source doesn't match what the\nprogram requires.",10],[13,"AttributeMissing","","One of the attributes required by the program is missing from the vertex format.",10],[13,"ViewportTooLarge","","The viewport's dimensions are not supported by the backend.",10],[13,"InvalidDepthRange","","The depth range is outside of the `(0, 1)` range.",10],[13,"UniformTypeMismatch","","The type of a uniform doesn't match what the program requires.",10],[12,"name","glium::DrawError","Name of the uniform you are trying to bind.",10],[12,"expected","","The expected type.",10],[13,"UniformBufferToValue","glium","Tried to bind a uniform buffer to a single uniform value.",10],[12,"name","glium::DrawError","Name of the uniform you are trying to bind.",10],[13,"UniformValueToBlock","glium","Tried to bind a single uniform value to a uniform block.",10],[12,"name","glium::DrawError","Name of the uniform you are trying to bind.",10],[13,"UniformBlockLayoutMismatch","glium","The layout of the content of the uniform buffer does not match the layout of the block.",10],[12,"name","glium::DrawError","Name of the block you are trying to bind.",10],[13,"UnsupportedVerticesPerPatch","glium","The number of vertices per patch that has been requested is not supported.",10],[13,"TessellationNotSupported","","Trying to use tessellation, but this is not supported by the underlying hardware.",10],[13,"TessellationWithoutPatches","","Using a program which contains tessellation shaders, but without submitting patches.",10],[13,"SamplersNotSupported","","Trying to use a sampler, but they are not supported by the backend.",10],[13,"InstancesCountMismatch","","When you use instancing, all vertices sources must have the same size.",10],[13,"VerticesSourcesLengthMismatch","","If you don't use indices, then all vertices sources must have the same size.",10],[13,"TransformFeedbackNotSupported","","You requested not to draw primitives, but this is not supported by the backend.",10],[4,"GliumCreationError","","Error that can happen while creating a glium display."],[13,"GlutinCreationError","","An error has happened while creating the glutin window or headless renderer.",11],[13,"IncompatibleOpenGl","","The OpenGL implementation is too old.",11],[0,"debug","",""],[3,"TimestampQuery","glium::debug","Allows you to obtain the timestamp inside the OpenGL commands queue."],[4,"Severity","","Severity of a debug message."],[13,"Notification","","Anything that isn't an error or performance issue.",12],[13,"Low","","Redundant state-change performance warning, or unimportant undefined behavior.",12],[13,"Medium","","Major performance warnings, shader compilation/linking warnings,\nor the use of deprecated functionality.",12],[13,"High","","All OpenGL Errors, shader compilation/linking errors,\nor highly-dangerous undefined behavior.",12],[4,"Source","","Source of a debug message."],[13,"Api","","Calls to the OpenGL API.",13],[13,"WindowSystem","","Calls to a window-system API.",13],[13,"ShaderCompiler","","A compiler for a shading language.",13],[13,"ThirdParty","","An application associated with Openctxt.gl.",13],[13,"Application","","Explicitly generated by Glium or the application.",13],[13,"OtherSource","","",13],[4,"MessageType","","Type of a debug message."],[13,"Error","","An error, typically from the API",14],[13,"DeprecatedBehavior","","Some behavior marked deprecated has been used",14],[13,"UndefinedBehavior","","Something has invoked undefined behavior",14],[13,"Portability","","Some functionality the user relies upon is not portable",14],[13,"Performance","","Code has triggered possible performance issues",14],[13,"Marker","","Command stream annotation",14],[13,"PushGroup","","Entering a debug group",14],[13,"PopGroup","","Leaving a debug group",14],[13,"Other","","Any other event",14],[11,"eq","","",12],[11,"ne","","",12],[11,"from_i64","","",12],[11,"from_u64","","",12],[11,"fmt","","",12],[11,"clone","","",12],[11,"from_i64","","",13],[11,"from_u64","","",13],[11,"fmt","","",13],[11,"clone","","",13],[11,"from_i64","","",14],[11,"from_u64","","",14],[11,"fmt","","",14],[11,"clone","","",14],[11,"new","","Creates a new `TimestampQuery`. Returns `None` if the backend doesn't support it.",15],[11,"is_ready","","Queries the counter to see if the timestamp is already available.",15],[11,"get","","Returns the value of the timestamp. Blocks until it is available.",15],[0,"framebuffer","glium","Framebuffers allow you to customize the color, depth and stencil buffers you will draw on."],[3,"SimpleFrameBuffer","glium::framebuffer","A framebuffer which has only one color attachment."],[3,"MultiOutputFrameBuffer","","This struct is useless for the moment."],[4,"ColorAttachment","","Describes an attachment for a color buffer."],[13,"Texture1d","","A texture.",16],[13,"Texture2d","","A texture.",16],[13,"Texture3d","","A texture.",16],[13,"Texture1dArray","","A texture.",16],[13,"Texture2dArray","","A texture.",16],[13,"RenderBuffer","","A render buffer.",16],[4,"DepthAttachment","","Describes an attachment for a depth buffer."],[13,"Texture1d","","A texture.",17],[13,"Texture2d","","A texture.",17],[13,"Texture3d","","A texture.",17],[13,"Texture1dArray","","A texture.",17],[13,"Texture2dArray","","A texture.",17],[13,"RenderBuffer","","A render buffer.",17],[4,"StencilAttachment","","Describes an attachment for a stencil buffer."],[13,"Texture1d","","A texture.",18],[13,"Texture2d","","A texture.",18],[13,"Texture3d","","A texture.",18],[13,"Texture1dArray","","A texture.",18],[13,"Texture2dArray","","A texture.",18],[13,"RenderBuffer","","A render buffer.",18],[4,"DepthStencilAttachment","","Describes an attachment for a depth and stencil buffer."],[13,"Texture1d","","A texture.",19],[13,"Texture2d","","A texture.",19],[13,"Texture3d","","A texture.",19],[13,"Texture1dArray","","A texture.",19],[13,"Texture2dArray","","A texture.",19],[13,"RenderBuffer","","A render buffer.",19],[8,"ToColorAttachment","","Trait for objects that can be used as color attachments."],[10,"to_color_attachment","","Builds the `ColorAttachment`.",20],[8,"ToDepthAttachment","","Trait for objects that can be used as depth attachments."],[10,"to_depth_attachment","","Builds the `DepthAttachment`.",21],[8,"ToStencilAttachment","","Trait for objects that can be used as stencil attachments."],[10,"to_stencil_attachment","","Builds the `StencilAttachment`.",22],[8,"ToDepthStencilAttachment","","Trait for objects that can be used as depth and stencil attachments."],[10,"to_depth_stencil_attachment","","Builds the `DepthStencilAttachment`.",23],[11,"new","","Creates a `SimpleFrameBuffer` with a single color attachment and no depth\nnor stencil buffer.",24],[11,"with_depth_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a depth\nbuffer, but no stencil buffer.",24],[11,"with_depth_and_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment, a depth\nbuffer, and a stencil buffer.",24],[11,"with_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a stencil\nbuffer, but no depth buffer.",24],[11,"with_depth_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a depth-stencil buffer.",24],[11,"clear","","",24],[11,"get_dimensions","","",24],[11,"get_depth_buffer_bits","","",24],[11,"get_stencil_buffer_bits","","",24],[11,"draw","","",24],[11,"get_blit_helper","","",24],[11,"new","","Creates a new `MultiOutputFrameBuffer`.",25],[11,"with_depth_buffer","","Creates a `MultiOutputFrameBuffer` with a depth buffer.",25],[11,"clear","","",25],[11,"get_blit_helper","","",25],[11,"get_dimensions","","",25],[11,"get_depth_buffer_bits","","",25],[11,"get_stencil_buffer_bits","","",25],[11,"draw","","",25],[11,"clone","","",16],[11,"clone","","",17],[11,"clone","","",18],[11,"clone","","",19],[0,"index","glium","In order to draw, you need to provide a source of indices which is used to link the vertices\ntogether into *primitives*."],[3,"PointsList","glium::index","A list of points stored in RAM."],[3,"LinesList","","A list of lines stored in RAM."],[3,"LinesListAdjacency","","A list of lines, with adjacency information, stored in RAM."],[3,"LineStrip","","A list of lines connected together stored in RAM."],[3,"LineStripAdjacency","","A list of lines connected together, with adjacency information, stored in RAM."],[3,"TrianglesList","","A list of triangles stored in RAM."],[3,"TrianglesListAdjacency","","A list of triangles, with adjacency information, stored in RAM."],[3,"TriangleStrip","","A list of triangles connected together stored in RAM."],[3,"TriangleStripAdjacency","","A list of triangles connected together, with adjacency information, stored in RAM."],[3,"TriangleFan","","A list of triangles stored in RAM."],[3,"Patches","","A list of patches stored in RAM."],[3,"NoIndices","","Marker that can be used as an indices source when you don't need indices."],[4,"IndicesSource","","Describes a source of indices used for drawing."],[13,"IndexBuffer","","A buffer uploaded in video memory.",26],[12,"buffer","glium::index::IndicesSource","The buffer.",26],[12,"fence","","Sender which must be used to send back a fence that is signaled when the buffer has\nfinished being used.",26],[12,"offset","","Offset of the first element of the buffer to use.",26],[12,"length","","Number of elements in the buffer to use.",26],[13,"Buffer","glium::index","A buffer in RAM.",26],[12,"pointer","glium::index::IndicesSource","Slice of data to use.",26],[12,"primitives","","Type of primitives contained in the buffer.",26],[12,"offset","","Offset of the first element of the buffer to use.",26],[12,"length","","Number of elements in the buffer to use.",26],[13,"NoIndices","glium::index","Don't use indices. Assemble primitives by using the order in which the vertices are in\nthe vertices source.",26],[12,"primitives","glium::index::IndicesSource","Type of primitives contained in the vertex source.",26],[4,"PrimitiveType","glium::index","List of available primitives."],[13,"Points","","",27],[13,"LinesList","","",27],[13,"LinesListAdjacency","","",27],[13,"LineStrip","","",27],[13,"LineStripAdjacency","","",27],[13,"TrianglesList","","",27],[13,"TrianglesListAdjacency","","",27],[13,"TriangleStrip","","",27],[13,"TriangleStripAdjacency","","",27],[13,"TriangleFan","","",27],[13,"Patches","","",27],[12,"vertices_per_patch","glium::index::PrimitiveType","Number of vertices per patch.",27],[4,"IndexType","glium::index","Type of the indices in an index source."],[13,"U8","","u8",28],[13,"U16","","u16",28],[13,"U32","","u32",28],[11,"fmt","glium","",29],[11,"new","","Builds a new index buffer.",29],[11,"from_raw","","Builds a new index buffer from raw data and a primitive type.",29],[11,"get_primitives_type","","Returns the type of primitives associated with this index buffer.",29],[11,"get_indices_type","","Returns the data type of the indices inside this index buffer.",29],[11,"get_id","","",29],[11,"to_indices_source","","",29],[11,"drop","","",29],[11,"clone","glium::index","",30],[11,"into_index_buffer","","",30],[11,"to_indices_source","","",30],[11,"into_index_buffer","","",31],[11,"to_indices_source","","",31],[11,"into_index_buffer","","",32],[11,"to_indices_source","","",32],[11,"into_index_buffer","","",33],[11,"to_indices_source","","",33],[11,"into_index_buffer","","",34],[11,"to_indices_source","","",34],[11,"into_index_buffer","","",35],[11,"to_indices_source","","",35],[11,"into_index_buffer","","",36],[11,"to_indices_source","","",36],[11,"into_index_buffer","","",37],[11,"to_indices_source","","",37],[11,"into_index_buffer","","",38],[11,"to_indices_source","","",38],[11,"into_index_buffer","","",39],[11,"to_indices_source","","",39],[11,"into_index_buffer","","",40],[11,"to_indices_source","","",40],[8,"ToIndicesSource","","Can be used as a source of indices when drawing."],[16,"Data","glium::index::ToIndicesSource","The type of data."],[10,"to_indices_source","glium::index","Builds the `IndicesSource`.",41],[8,"Index","","An index from the index buffer."],[10,"get_type","","Returns the `IndexType` corresponding to this type.",42],[8,"IntoIndexBuffer","","Object that is convertible to an index buffer."],[10,"into_index_buffer","","Creates a new `IndexBuffer` with the list of indices.",43],[11,"clone","","",26],[11,"get_primitives_type","","Returns the type of the primitives.",26],[11,"eq","","",27],[11,"ne","","",27],[11,"clone","","",27],[11,"fmt","","",27],[11,"fmt","","",44],[11,"clone","","",44],[6,"Data","",""],[11,"to_indices_source","","",44],[11,"eq","","",28],[11,"ne","","",28],[11,"clone","","",28],[11,"fmt","","",28],[0,"pixel_buffer","glium","Pixel buffers are buffers that contain two-dimensional texture data."],[3,"PixelBuffer","glium::pixel_buffer","Buffer that stores the content of a texture."],[11,"new_empty","","Builds a new buffer with an uninitialized content.",45],[11,"get_size","","Returns the size of the buffer, in bytes.",45],[11,"read","","Copies the content of the pixel buffer to RAM.",45],[11,"read_if_supported","","Copies the content of the pixel buffer to RAM.",45],[6,"Id","",""],[11,"get_id","","",45],[0,"macros","glium","Defines useful macros for glium usage."],[0,"program","",""],[3,"Uniform","glium::program","Information about a uniform (except its name)."],[12,"location","","The location of the uniform.",46],[12,"ty","","Type of the uniform.",46],[12,"size","","If it is an array, the number of elements.",46],[3,"UniformBlock","","Information about a uniform block (except its name)."],[12,"binding","","The binding point of the uniform.",47],[12,"size","","Size in bytes of the data in the block.",47],[12,"members","","List of elements in the block.",47],[3,"UniformBlockMember","","Information about a uniform inside a block."],[12,"name","","Name of the member.",48],[12,"offset","","Offset of the member in the block.",48],[12,"ty","","Type of the uniform.",48],[12,"size","","If it is an array, the number of elements.",48],[3,"Attribute","","Information about an attribute of a program (except its name)."],[12,"location","","The index of the uniform.",49],[12,"ty","","Type of the attribute.",49],[12,"size","","Number of elements of the attribute.",49],[3,"TransformFeedbackVarying","","Describes a varying that is being output with transform feedback."],[12,"name","","Name of the variable.",50],[12,"size","","Size in bytes of this value.",50],[12,"ty","","Type of the value.",50],[3,"SourceCode","","Represents the source code of a program."],[12,"vertex_shader","","Source code of the vertex shader.",51],[12,"tessellation_control_shader","","Source code of the optional tessellation control shader.",51],[12,"tessellation_evaluation_shader","","Source code of the optional tessellation evaluation shader.",51],[12,"geometry_shader","","Source code of the optional geometry shader.",51],[12,"fragment_shader","","Source code of the fragment shader.",51],[3,"Binary","","Represents the compiled binary data of a program."],[12,"format","","An implementation-defined format.",52],[12,"content","","The binary data.",52],[4,"TransformFeedbackMode","","Describes the mode that is used when transform feedback is enabled."],[13,"Interleaved","","Each value is interleaved in the same buffer.",53],[13,"Separate","","Each value will go in a separate buffer.",53],[4,"ProgramCreationInput","","Input when creating a program."],[13,"SourceCode","","Use GLSL source code.",54],[12,"vertex_shader","glium::program::ProgramCreationInput","Source code of the vertex shader.",54],[12,"tessellation_control_shader","","Source code of the optional tessellation control shader.",54],[12,"tessellation_evaluation_shader","","Source code of the optional tessellation evaluation shader.",54],[12,"geometry_shader","","Source code of the optional geometry shader.",54],[12,"fragment_shader","","Source code of the fragment shader.",54],[12,"transform_feedback_varyings","","The list of variables and mode to use for transform feedback.",54],[13,"Binary","glium::program","Use a precompiled binary.",54],[12,"data","glium::program::ProgramCreationInput","The data.",54],[11,"fmt","glium","",8],[11,"clone","","",8],[11,"fmt","","",8],[11,"description","","",8],[11,"cause","","",8],[11,"new","","Builds a new program.",55],[11,"from_source","","Builds a new program from GLSL source code.",55],[11,"get_binary","","Returns the program's compiled binary.",55],[11,"get_binary_if_supported","","Returns the program's compiled binary.",55],[11,"get_frag_data_location","","Returns the *location* of an output fragment, if it exists.",55],[11,"get_uniform","","Returns informations about a uniform variable, if it exists.",55],[11,"get_uniform_blocks","","Returns a list of uniform blocks.",55],[11,"get_transform_feedback_varyings","","Returns the list of transform feedback varyings.",55],[11,"get_transform_feedback_mode","","Returns the mode used for transform feedback, or `None` is transform feedback is not\nenabled in this program or not supported.",55],[11,"has_tessellation_shaders","","Returns true if the program contains a tessellation stage.",55],[11,"fmt","","",55],[11,"get_id","","",55],[11,"drop","","",55],[11,"fmt","glium::program","",46],[11,"clone","","",47],[11,"fmt","","",47],[11,"clone","","",48],[11,"fmt","","",48],[11,"fmt","","",49],[11,"eq","","",50],[11,"ne","","",50],[11,"clone","","",50],[11,"fmt","","",50],[11,"eq","","",53],[11,"ne","","",53],[11,"clone","","",53],[11,"fmt","","",53],[8,"IntoProgramCreationInput","","Traits for objects that can be turned into `ProgramCreationInput`."],[10,"into_program_creation_input","","Builds the `ProgramCreationInput`.",56],[11,"into_program_creation_input","","",54],[11,"into_program_creation_input","","",51],[11,"into_program_creation_input","","",52],[0,"render_buffer","glium","A render buffer is similar to a texture, but is optimized for usage as a draw target."],[3,"RenderBuffer","glium::render_buffer","A render buffer is similar to a texture, but is optimized for usage as a draw target."],[3,"DepthRenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target."],[3,"StencilRenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target."],[3,"DepthStencilRenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target."],[11,"new","","Builds a new render buffer.",57],[11,"get_dimensions","","Returns the dimensions of the render buffer.",57],[11,"to_color_attachment","","",57],[6,"Id","",""],[11,"get_id","","",57],[11,"new","","Builds a new render buffer.",58],[11,"get_dimensions","","Returns the dimensions of the render buffer.",58],[11,"to_depth_attachment","","",58],[6,"Id","",""],[11,"get_id","","",58],[11,"new","","Builds a new render buffer.",59],[11,"get_dimensions","","Returns the dimensions of the render buffer.",59],[11,"to_stencil_attachment","","",59],[6,"Id","",""],[11,"get_id","","",59],[11,"new","","Builds a new render buffer.",60],[11,"get_dimensions","","Returns the dimensions of the render buffer.",60],[11,"to_depth_stencil_attachment","","",60],[6,"Id","",""],[11,"get_id","","",60],[0,"uniforms","glium","A uniform is a global variable in your program. In order to draw something, you will need to\ngive `glium` the values of all your uniforms. Objects that implement the `Uniform` trait are \nhere to do that."],[3,"UniformBuffer","glium::uniforms","Buffer that contains a uniform block."],[3,"Sampler","","A sampler."],[3,"SamplerBehavior","","Behavior of a sampler."],[12,"wrap_function","","Functions to use for the X, Y, and Z coordinates.",61],[12,"minify_filter","","Filter to use when minifying the texture.",61],[12,"magnify_filter","","Filter to use when magnifying the texture.",61],[12,"max_anisotropy","","`1` means no anisotropic filtering, any value above `1` sets the max anisotropy.",61],[3,"EmptyUniforms","","Object that can be used when you don't have any uniforms."],[3,"UniformsStorage","","Stores uniforms."],[4,"SamplerWrapFunction","","Function to use for out-of-bounds samples."],[13,"Repeat","","Samples at coord `x + 1` map to coord `x`.",62],[13,"Mirror","","Samples at coord `x + 1` map to coord `1 - x`.",62],[13,"Clamp","","Samples at coord `x + 1` map to coord `1`.",62],[4,"MagnifySamplerFilter","","The function that the GPU will use when loading the value of a texel."],[13,"Nearest","","The nearest texel will be loaded.",63],[13,"Linear","","All nearby texels will be loaded and their values will be merged.",63],[4,"MinifySamplerFilter","","The function that the GPU will use when loading the value of a texel."],[13,"Nearest","","The nearest texel will be loaded.",64],[13,"Linear","","All nearby texels will be loaded and their values will be merged.",64],[13,"NearestMipmapNearest","","The nearest texel of the nearest mipmap will be loaded.",64],[13,"LinearMipmapNearest","","Takes the nearest texel from the two nearest mipmaps, and merges them.",64],[13,"NearestMipmapLinear","","Same as `Linear`, but from the nearest mipmap.",64],[13,"LinearMipmapLinear","","Same as `Linear`, but from the two nearest mipmaps.",64],[4,"UniformValue","","Represents a value to bind to a uniform."],[13,"Block","","Contains a handle to the buffer, and a function that indicates whether this buffer\ncan be binded on a block with the given layout.\nThe last parameter is a sender which must be used to send a `SyncFence` that expires when\nthe buffer has finished being used.",65],[13,"SignedInt","","",65],[13,"UnsignedInt","","",65],[13,"Float","","",65],[13,"Mat2","","2x2 column-major matrix. The second parameter describes whether to transpose it.",65],[13,"Mat3","","3x3 column-major matrix. The second parameter describes whether to transpose it.",65],[13,"Mat4","","4x4 column-major matrix. The second parameter describes whether to transpose it.",65],[13,"Vec2","","",65],[13,"Vec3","","",65],[13,"Vec4","","",65],[13,"Texture1d","","",65],[13,"CompressedTexture1d","","",65],[13,"IntegralTexture1d","","",65],[13,"UnsignedTexture1d","","",65],[13,"DepthTexture1d","","",65],[13,"Texture2d","","",65],[13,"CompressedTexture2d","","",65],[13,"IntegralTexture2d","","",65],[13,"UnsignedTexture2d","","",65],[13,"DepthTexture2d","","",65],[13,"Texture2dMultisample","","",65],[13,"IntegralTexture2dMultisample","","",65],[13,"UnsignedTexture2dMultisample","","",65],[13,"DepthTexture2dMultisample","","",65],[13,"Texture3d","","",65],[13,"CompressedTexture3d","","",65],[13,"IntegralTexture3d","","",65],[13,"UnsignedTexture3d","","",65],[13,"DepthTexture3d","","",65],[13,"Texture1dArray","","",65],[13,"CompressedTexture1dArray","","",65],[13,"IntegralTexture1dArray","","",65],[13,"UnsignedTexture1dArray","","",65],[13,"DepthTexture1dArray","","",65],[13,"Texture2dArray","","",65],[13,"CompressedTexture2dArray","","",65],[13,"IntegralTexture2dArray","","",65],[13,"UnsignedTexture2dArray","","",65],[13,"DepthTexture2dArray","","",65],[13,"Texture2dArrayMultisample","","",65],[13,"IntegralTexture2dArrayMultisample","","",65],[13,"UnsignedTexture2dArrayMultisample","","",65],[13,"DepthTexture2dArrayMultisample","","",65],[4,"UniformType","","Type of a uniform in a program."],[13,"Float","","",66],[13,"FloatVec2","","",66],[13,"FloatVec3","","",66],[13,"FloatVec4","","",66],[13,"Double","","",66],[13,"DoubleVec2","","",66],[13,"DoubleVec3","","",66],[13,"DoubleVec4","","",66],[13,"Int","","",66],[13,"IntVec2","","",66],[13,"IntVec3","","",66],[13,"IntVec4","","",66],[13,"UnsignedInt","","",66],[13,"UnsignedIntVec2","","",66],[13,"UnsignedIntVec3","","",66],[13,"UnsignedIntVec4","","",66],[13,"Bool","","",66],[13,"BoolVec2","","",66],[13,"BoolVec3","","",66],[13,"BoolVec4","","",66],[13,"FloatMat2","","",66],[13,"FloatMat3","","",66],[13,"FloatMat4","","",66],[13,"FloatMat2x3","","",66],[13,"FloatMat2x4","","",66],[13,"FloatMat3x2","","",66],[13,"FloatMat3x4","","",66],[13,"FloatMat4x2","","",66],[13,"FloatMat4x3","","",66],[13,"DoubleMat2","","",66],[13,"DoubleMat3","","",66],[13,"DoubleMat4","","",66],[13,"DoubleMat2x3","","",66],[13,"DoubleMat2x4","","",66],[13,"DoubleMat3x2","","",66],[13,"DoubleMat3x4","","",66],[13,"DoubleMat4x2","","",66],[13,"DoubleMat4x3","","",66],[13,"Sampler1d","","",66],[13,"ISampler1d","","",66],[13,"USampler1d","","",66],[13,"Sampler2d","","",66],[13,"ISampler2d","","",66],[13,"USampler2d","","",66],[13,"Sampler3d","","",66],[13,"ISampler3d","","",66],[13,"USampler3d","","",66],[13,"Sampler1dArray","","",66],[13,"ISampler1dArray","","",66],[13,"USampler1dArray","","",66],[13,"Sampler2dArray","","",66],[13,"ISampler2dArray","","",66],[13,"USampler2dArray","","",66],[13,"SamplerCube","","",66],[13,"ISamplerCube","","",66],[13,"USamplerCube","","",66],[13,"Sampler2dRect","","",66],[13,"ISampler2dRect","","",66],[13,"USampler2dRect","","",66],[13,"Sampler2dRectShadow","","",66],[13,"SamplerCubeArray","","",66],[13,"ISamplerCubeArray","","",66],[13,"USamplerCubeArray","","",66],[13,"SamplerBuffer","","",66],[13,"ISamplerBuffer","","",66],[13,"USamplerBuffer","","",66],[13,"Sampler2dMultisample","","",66],[13,"ISampler2dMultisample","","",66],[13,"USampler2dMultisample","","",66],[13,"Sampler2dMultisampleArray","","",66],[13,"ISampler2dMultisampleArray","","",66],[13,"USampler2dMultisampleArray","","",66],[13,"Sampler1dShadow","","",66],[13,"Sampler2dShadow","","",66],[13,"SamplerCubeShadow","","",66],[13,"Sampler1dArrayShadow","","",66],[13,"Sampler2dArrayShadow","","",66],[13,"SamplerCubeArrayShadow","","",66],[13,"Image1d","","",66],[13,"IImage1d","","",66],[13,"UImage1d","","",66],[13,"Image2d","","",66],[13,"IImage2d","","",66],[13,"UImage2d","","",66],[13,"Image3d","","",66],[13,"IImage3d","","",66],[13,"UImage3d","","",66],[13,"Image2dRect","","",66],[13,"IImage2dRect","","",66],[13,"UImage2dRect","","",66],[13,"ImageCube","","",66],[13,"IImageCube","","",66],[13,"UImageCube","","",66],[13,"ImageBuffer","","",66],[13,"IImageBuffer","","",66],[13,"UImageBuffer","","",66],[13,"Image1dArray","","",66],[13,"IImage1dArray","","",66],[13,"UImage1dArray","","",66],[13,"Image2dArray","","",66],[13,"IImage2dArray","","",66],[13,"UImage2dArray","","",66],[13,"Image2dMultisample","","",66],[13,"IImage2dMultisample","","",66],[13,"UImage2dMultisample","","",66],[13,"Image2dMultisampleArray","","",66],[13,"IImage2dMultisampleArray","","",66],[13,"UImage2dMultisampleArray","","",66],[13,"AtomicCounterUint","","",66],[11,"fmt","","",67],[11,"new","","Uploads data in the uniforms buffer.",67],[11,"new_if_supported","","Uploads data in the uniforms buffer.",67],[11,"new_persistent","","Builds a new uniform buffer with persistent mapping.",67],[11,"new_persistent_if_supported","","Builds a new uniform buffer with persistent mapping, or `None` if this is not supported.",67],[11,"upload","","Modifies the content of the buffer.",67],[11,"map","","Maps the buffer to allow write access to it.",67],[11,"read","","Reads the content of the buffer.",67],[11,"read_if_supported","","Reads the content of the buffer.",67],[11,"get_id","","",67],[11,"eq","","",62],[11,"ne","","",62],[11,"hash","","",62],[11,"clone","","",62],[11,"fmt","","",62],[11,"eq","","",63],[11,"ne","","",63],[11,"hash","","",63],[11,"clone","","",63],[11,"fmt","","",63],[11,"eq","","",64],[11,"ne","","",64],[11,"hash","","",64],[11,"clone","","",64],[11,"fmt","","",64],[11,"new","","Builds a new `Sampler` with default parameters.",68],[11,"wrap_function","","Changes the wrap functions of all three coordinates.",68],[11,"minify_filter","","Changes the minifying filter of the sampler.",68],[11,"magnify_filter","","Changes the magnifying filter of the sampler.",68],[11,"anisotropy","","Changes the magnifying filter of the sampler.",68],[11,"eq","","",61],[11,"ne","","",61],[11,"hash","","",61],[11,"clone","","",61],[11,"fmt","","",61],[11,"default","","",61],[11,"clone","","",69],[11,"fmt","","",69],[11,"visit_values","","",69],[11,"new","","Builds a new storage with a value.",70],[11,"add","","Adds a value to the storage.",70],[11,"eq","","",66],[11,"ne","","",66],[11,"fmt","","",66],[11,"clone","","",66],[11,"is_usable_with","","Returns true if this value can be used with a uniform of the given type.",65],[11,"into_uniform_value","nalgebra::structs::mat","",71],[11,"into_uniform_value","","",72],[11,"into_uniform_value","","",73],[11,"into_uniform_value","nalgebra::structs::ortho","",74],[11,"into_uniform_value","","",75],[11,"into_uniform_value","nalgebra::structs::persp","",76],[11,"into_uniform_value","","",77],[11,"into_uniform_value","nalgebra::structs::pnt","",78],[11,"into_uniform_value","","",79],[11,"into_uniform_value","","",80],[11,"into_uniform_value","nalgebra::structs::quat","",81],[11,"into_uniform_value","nalgebra::structs::rot","",82],[11,"into_uniform_value","","",83],[11,"into_uniform_value","","",84],[11,"into_uniform_value","nalgebra::structs::quat","",85],[11,"into_uniform_value","nalgebra::structs::vec","",86],[11,"into_uniform_value","","",87],[11,"into_uniform_value","","",88],[11,"into_uniform_value","cgmath::matrix","",89],[11,"into_uniform_value","","",90],[11,"into_uniform_value","","",91],[11,"into_uniform_value","cgmath::vector","",92],[11,"into_uniform_value","","",93],[11,"into_uniform_value","","",94],[8,"IntoUniformValue","glium::uniforms","Represents a value that can be used as the value of a uniform."],[10,"into_uniform_value","","Builds a `UniformValue`.",95],[8,"Uniforms","","Object that contains the values of all the uniforms to bind to a program."],[10,"visit_values","","Calls the parameter once with the name and value of each uniform.",96],[8,"UniformBlock","","Objects that are suitable for being binded to a uniform block."],[10,"matches","","Checks whether the uniforms' layout matches the given block.",97],[0,"vertex","glium","Contains everything related to vertex buffers."],[3,"VertexBufferAny","glium::vertex","A list of vertices loaded in the graphics card's memory."],[3,"Mapping","","A mapping of a buffer."],[3,"VertexBufferSlice","","Represents a slice of a `VertexBuffer`."],[3,"VertexBufferAnySlice","","Represents a slice of a `VertexBufferAny`."],[3,"PerInstanceAttributesBuffer","","A list of vertices loaded in the graphics card's memory."],[3,"PerInstanceAttributesBufferAny","","A list of vertices loaded in the graphics card's memory."],[3,"PerInstanceAttributesBufferMapping","","A mapping of a buffer."],[4,"AttributeType","",""],[13,"I8","","",98],[13,"I8I8","","",98],[13,"I8I8I8","","",98],[13,"I8I8I8I8","","",98],[13,"U8","","",98],[13,"U8U8","","",98],[13,"U8U8U8","","",98],[13,"U8U8U8U8","","",98],[13,"I16","","",98],[13,"I16I16","","",98],[13,"I16I16I16","","",98],[13,"I16I16I16I16","","",98],[13,"U16","","",98],[13,"U16U16","","",98],[13,"U16U16U16","","",98],[13,"U16U16U16U16","","",98],[13,"I32","","",98],[13,"I32I32","","",98],[13,"I32I32I32","","",98],[13,"I32I32I32I32","","",98],[13,"U32","","",98],[13,"U32U32","","",98],[13,"U32U32U32","","",98],[13,"U32U32U32U32","","",98],[13,"F32","","",98],[13,"F32F32","","",98],[13,"F32F32F32","","",98],[13,"F32F32F32F32","","",98],[13,"F32x2x2","","2x2 matrix of `f32`s",98],[13,"F32x2x3","","2x3 matrix of `f32`s",98],[13,"F32x2x4","","2x3 matrix of `f32`s",98],[13,"F32x3x2","","3x2 matrix of `f32`s",98],[13,"F32x3x3","","3x3 matrix of `f32`s",98],[13,"F32x3x4","","3x4 matrix of `f32`s",98],[13,"F32x4x2","","4x2 matrix of `f32`s",98],[13,"F32x4x3","","4x3 matrix of `f32`s",98],[13,"F32x4x4","","4x4 matrix of `f32`s",98],[13,"F64","","Warning: using `f64`s can be very slow.",98],[13,"F64F64","","Warning: using `f64`s can be very slow.",98],[13,"F64F64F64","","Warning: using `f64`s can be very slow.",98],[13,"F64F64F64F64","","Warning: using `f64`s can be very slow.",98],[13,"F64x2x2","","2x2 matrix of `f64`s\nWarning: using `f64`s can be very slow.",98],[13,"F64x2x3","","2x3 matrix of `f64`s\nWarning: using `f64`s can be very slow.",98],[13,"F64x2x4","","2x3 matrix of `f64`s\nWarning: using `f64`s can be very slow.",98],[13,"F64x3x2","","3x2 matrix of `f64`s\nWarning: using `f64`s can be very slow.",98],[13,"F64x3x3","","3x3 matrix of `f64`s\nWarning: using `f64`s can be very slow.",98],[13,"F64x3x4","","3x4 matrix of `f64`s\nWarning: using `f64`s can be very slow.",98],[13,"F64x4x2","","4x2 matrix of `f64`s\nWarning: using `f64`s can be very slow.",98],[13,"F64x4x3","","4x3 matrix of `f64`s\nWarning: using `f64`s can be very slow.",98],[13,"F64x4x4","","4x4 matrix of `f64`s\nWarning: using `f64`s can be very slow.",98],[4,"VerticesSource","","Describes the source to use for the vertices when drawing."],[13,"VertexBuffer","","A buffer uploaded in the video memory.",99],[13,"PerInstanceBuffer","","A buffer uploaded in the video memory.",99],[11,"fmt","glium","",100],[11,"new","","Builds a new vertex buffer.",100],[11,"new_dynamic","","Builds a new vertex buffer.",100],[11,"new_persistent","","Builds a new vertex buffer with persistent mapping.",100],[11,"new_persistent_if_supported","","Builds a new vertex buffer with persistent mapping, or `None` if this is not supported.",100],[11,"new_raw","","Builds a new vertex buffer from an indeterminate data type and bindings.",100],[11,"slice","","Accesses a slice of the buffer.",100],[11,"map","","Maps the buffer to allow write access to it.",100],[11,"read","","Reads the content of the buffer.",100],[11,"read_if_supported","","Reads the content of the buffer.",100],[11,"write","","Replaces the content of the buffer.",100],[11,"is_persistent","","Returns true if the buffer is mapped in a permanent way in memory.",100],[11,"get_elements_size","","Returns the number of bytes between two consecutive elements in the buffer.",100],[11,"get_bindings","","Returns the associated `VertexFormat`.",100],[11,"into_vertex_buffer_any","","Discard the type information and turn the vertex buffer into a `VertexBufferAny`.",100],[11,"len","","Returns the number of elements in the buffer.",100],[11,"get_id","","",100],[11,"read","glium::vertex","Reads the content of the slice.",101],[11,"read_if_supported","","Reads the content of the buffer.",101],[11,"write","","Writes some vertices to the buffer.",101],[11,"into_vertices_source","","",101],[11,"fmt","","",102],[11,"get_elements_size","","Returns the number of bytes between two consecutive elements in the buffer.",102],[11,"len","","Returns the number of elements in the buffer.",102],[11,"get_bindings","","Returns the associated `VertexFormat`.",102],[11,"into_vertex_buffer","","Turns the vertex buffer into a `VertexBuffer` without checking the type.",102],[11,"slice","","Accesses a slice of the buffer.",102],[11,"drop","","",102],[11,"get_id","","",102],[11,"into_vertices_source","","",103],[11,"deref","","",104],[11,"deref_mut","","",104],[11,"eq","","",98],[11,"ne","","",98],[11,"fmt","","",98],[11,"clone","","",98],[11,"get_num_components","","Returns the number of values for this type.",98],[11,"fmt","","",105],[11,"new","","Builds a new vertex buffer.",105],[11,"new_if_supported","","Builds a new buffer.",105],[11,"new_dynamic","","Builds a new vertex buffer.",105],[11,"new_persistent","","Builds a new vertex buffer with persistent mapping.",105],[11,"new_persistent_if_supported","","Builds a new vertex buffer with persistent mapping, or `None` if this is not supported.",105],[11,"new_raw","","Builds a new vertex buffer from an indeterminate data type and bindings.",105],[11,"map","","Maps the buffer to allow write access to it.",105],[11,"read","","Reads the content of the buffer.",105],[11,"read_if_supported","","Reads the content of the buffer.",105],[11,"read_slice","","Reads the content of the buffer.",105],[11,"read_slice_if_supported","","Reads the content of the buffer.",105],[11,"write","","Writes some vertices to the buffer.",105],[11,"is_persistent","","Returns true if the buffer is mapped in a permanent way in memory.",105],[11,"get_elements_size","","Returns the number of bytes between two consecutive elements in the buffer.",105],[11,"get_bindings","","Returns the associated `VertexFormat`.",105],[11,"into_vertex_buffer_any","","Discard the type information and turn the vertex buffer into a `PerInstanceAttributesBufferAny`.",105],[11,"get_id","","",105],[11,"fmt","","",106],[11,"get_elements_size","","Returns the number of bytes between two consecutive elements in the buffer.",106],[11,"len","","Returns the number of elements in the buffer.",106],[11,"get_bindings","","Returns the associated `VertexFormat`.",106],[11,"into_vertex_buffer","","Turns the vertex buffer into a `PerInstanceAttributesBuffer` without checking the type.",106],[11,"drop","","",106],[11,"get_id","","",106],[11,"deref","","",107],[11,"deref_mut","","",107],[8,"IntoVerticesSource","","Objects that can be used as vertex sources."],[10,"into_vertices_source","","Builds the `VerticesSource`.",108],[8,"MultiVerticesSource","","Objects that describe multiple vertex sources."],[16,"Iterator","glium::vertex::MultiVerticesSource",""],[10,"iter","glium::vertex","Iterates over the `VerticesSource`.",109],[8,"Vertex","","Trait for structures that represent a vertex."],[10,"build_bindings","","Builds the `VertexFormat` representing the layout of this element.",110],[8,"Attribute","","Trait for types that can be used as vertex attributes."],[10,"get_type","","Get the type of data.",111],[11,"clone","","",99],[11,"into_vertices_source","","",99],[6,"Iterator","",""],[6,"Iterator","",""],[6,"Iterator","",""],[6,"Iterator","",""],[6,"Iterator","",""],[6,"Iterator","",""],[6,"Iterator","",""],[6,"Iterator","",""],[0,"texture","glium","A texture is an image loaded in video memory, which can be sampled in your shaders."],[3,"Texture1d","glium::texture","A one-dimensional texture  containing floating-point data."],[3,"Texture1dMipmap","","Represents a single mipmap level of a `Texture1d`."],[3,"CompressedTexture1d","","A compressed one-dimensional texture  containing floating-point data."],[3,"CompressedTexture1dMipmap","","Represents a single mipmap level of a `CompressedTexture1d`."],[3,"IntegralTexture1d","","A one-dimensional texture  containing signed integral data."],[3,"IntegralTexture1dMipmap","","Represents a single mipmap level of a `IntegralTexture1d`."],[3,"UnsignedTexture1d","","A one-dimensional texture  containing unsigned integral data."],[3,"UnsignedTexture1dMipmap","","Represents a single mipmap level of a `UnsignedTexture1d`."],[3,"DepthTexture1d","","A one-dimensional texture  containing depth data."],[3,"DepthTexture1dMipmap","","Represents a single mipmap level of a `DepthTexture1d`."],[3,"StencilTexture1d","","A one-dimensional texture  containing stencil data."],[3,"StencilTexture1dMipmap","","Represents a single mipmap level of a `StencilTexture1d`."],[3,"DepthStencilTexture1d","","A one-dimensional texture  containing both depth and stencil data."],[3,"DepthStencilTexture1dMipmap","","Represents a single mipmap level of a `DepthStencilTexture1d`."],[3,"Texture2d","","A two-dimensional texture  containing floating-point data."],[3,"Texture2dMipmap","","Represents a single mipmap level of a `Texture2d`."],[3,"CompressedTexture2d","","A compressed two-dimensional texture  containing floating-point data."],[3,"CompressedTexture2dMipmap","","Represents a single mipmap level of a `CompressedTexture2d`."],[3,"IntegralTexture2d","","A two-dimensional texture  containing signed integral data."],[3,"IntegralTexture2dMipmap","","Represents a single mipmap level of a `IntegralTexture2d`."],[3,"UnsignedTexture2d","","A two-dimensional texture  containing unsigned integral data."],[3,"UnsignedTexture2dMipmap","","Represents a single mipmap level of a `UnsignedTexture2d`."],[3,"DepthTexture2d","","A two-dimensional texture  containing depth data."],[3,"DepthTexture2dMipmap","","Represents a single mipmap level of a `DepthTexture2d`."],[3,"StencilTexture2d","","A two-dimensional texture  containing stencil data."],[3,"StencilTexture2dMipmap","","Represents a single mipmap level of a `StencilTexture2d`."],[3,"DepthStencilTexture2d","","A two-dimensional texture  containing both depth and stencil data."],[3,"DepthStencilTexture2dMipmap","","Represents a single mipmap level of a `DepthStencilTexture2d`."],[3,"Texture2dMultisample","","A two-dimensional texture  containing floating-point data."],[3,"Texture2dMultisampleMipmap","","Represents a single mipmap level of a `Texture2dMultisample`."],[3,"IntegralTexture2dMultisample","","A two-dimensional texture  containing signed integral data."],[3,"IntegralTexture2dMultisampleMipmap","","Represents a single mipmap level of a `IntegralTexture2dMultisample`."],[3,"UnsignedTexture2dMultisample","","A two-dimensional texture  containing unsigned integral data."],[3,"UnsignedTexture2dMultisampleMipmap","","Represents a single mipmap level of a `UnsignedTexture2dMultisample`."],[3,"DepthTexture2dMultisample","","A two-dimensional texture  containing depth data."],[3,"DepthTexture2dMultisampleMipmap","","Represents a single mipmap level of a `DepthTexture2dMultisample`."],[3,"StencilTexture2dMultisample","","A two-dimensional texture  containing stencil data."],[3,"StencilTexture2dMultisampleMipmap","","Represents a single mipmap level of a `StencilTexture2dMultisample`."],[3,"DepthStencilTexture2dMultisample","","A two-dimensional texture  containing both depth and stencil data."],[3,"DepthStencilTexture2dMultisampleMipmap","","Represents a single mipmap level of a `DepthStencilTexture2dMultisample`."],[3,"Texture3d","","A three-dimensional texture  containing floating-point data."],[3,"Texture3dMipmap","","Represents a single mipmap level of a `Texture3d`."],[3,"CompressedTexture3d","","A compressed three-dimensional texture  containing floating-point data."],[3,"CompressedTexture3dMipmap","","Represents a single mipmap level of a `CompressedTexture3d`."],[3,"IntegralTexture3d","","A three-dimensional texture  containing signed integral data."],[3,"IntegralTexture3dMipmap","","Represents a single mipmap level of a `IntegralTexture3d`."],[3,"UnsignedTexture3d","","A three-dimensional texture  containing unsigned integral data."],[3,"UnsignedTexture3dMipmap","","Represents a single mipmap level of a `UnsignedTexture3d`."],[3,"DepthTexture3d","","A three-dimensional texture  containing depth data."],[3,"DepthTexture3dMipmap","","Represents a single mipmap level of a `DepthTexture3d`."],[3,"StencilTexture3d","","A three-dimensional texture  containing stencil data."],[3,"StencilTexture3dMipmap","","Represents a single mipmap level of a `StencilTexture3d`."],[3,"DepthStencilTexture3d","","A three-dimensional texture  containing both depth and stencil data."],[3,"DepthStencilTexture3dMipmap","","Represents a single mipmap level of a `DepthStencilTexture3d`."],[3,"Texture1dArray","","An array of one-dimensional textures  containing floating-point data."],[3,"Texture1dArrayLayer","","Represents a single layer of a `Texture1dArray`."],[3,"Texture1dArrayMipmap","","Represents a single mipmap level of a `Texture1dArray`."],[3,"CompressedTexture1dArray","","An array of compressed one-dimensional textures  containing floating-point data."],[3,"CompressedTexture1dArrayLayer","","Represents a single layer of a `CompressedTexture1dArray`."],[3,"CompressedTexture1dArrayMipmap","","Represents a single mipmap level of a `CompressedTexture1dArray`."],[3,"IntegralTexture1dArray","","An array of one-dimensional textures  containing signed integral data."],[3,"IntegralTexture1dArrayLayer","","Represents a single layer of a `IntegralTexture1dArray`."],[3,"IntegralTexture1dArrayMipmap","","Represents a single mipmap level of a `IntegralTexture1dArray`."],[3,"UnsignedTexture1dArray","","An array of one-dimensional textures  containing unsigned integral data."],[3,"UnsignedTexture1dArrayLayer","","Represents a single layer of a `UnsignedTexture1dArray`."],[3,"UnsignedTexture1dArrayMipmap","","Represents a single mipmap level of a `UnsignedTexture1dArray`."],[3,"DepthTexture1dArray","","An array of one-dimensional textures  containing depth data."],[3,"DepthTexture1dArrayLayer","","Represents a single layer of a `DepthTexture1dArray`."],[3,"DepthTexture1dArrayMipmap","","Represents a single mipmap level of a `DepthTexture1dArray`."],[3,"StencilTexture1dArray","","An array of one-dimensional textures  containing stencil data."],[3,"StencilTexture1dArrayLayer","","Represents a single layer of a `StencilTexture1dArray`."],[3,"StencilTexture1dArrayMipmap","","Represents a single mipmap level of a `StencilTexture1dArray`."],[3,"DepthStencilTexture1dArray","","An array of one-dimensional textures  containing both depth and stencil data."],[3,"DepthStencilTexture1dArrayLayer","","Represents a single layer of a `DepthStencilTexture1dArray`."],[3,"DepthStencilTexture1dArrayMipmap","","Represents a single mipmap level of a `DepthStencilTexture1dArray`."],[3,"Texture2dArray","","An array of two-dimensional textures  containing floating-point data."],[3,"Texture2dArrayLayer","","Represents a single layer of a `Texture2dArray`."],[3,"Texture2dArrayMipmap","","Represents a single mipmap level of a `Texture2dArray`."],[3,"CompressedTexture2dArray","","An array of compressed two-dimensional textures  containing floating-point data."],[3,"CompressedTexture2dArrayLayer","","Represents a single layer of a `CompressedTexture2dArray`."],[3,"CompressedTexture2dArrayMipmap","","Represents a single mipmap level of a `CompressedTexture2dArray`."],[3,"IntegralTexture2dArray","","An array of two-dimensional textures  containing signed integral data."],[3,"IntegralTexture2dArrayLayer","","Represents a single layer of a `IntegralTexture2dArray`."],[3,"IntegralTexture2dArrayMipmap","","Represents a single mipmap level of a `IntegralTexture2dArray`."],[3,"UnsignedTexture2dArray","","An array of two-dimensional textures  containing unsigned integral data."],[3,"UnsignedTexture2dArrayLayer","","Represents a single layer of a `UnsignedTexture2dArray`."],[3,"UnsignedTexture2dArrayMipmap","","Represents a single mipmap level of a `UnsignedTexture2dArray`."],[3,"DepthTexture2dArray","","An array of two-dimensional textures  containing depth data."],[3,"DepthTexture2dArrayLayer","","Represents a single layer of a `DepthTexture2dArray`."],[3,"DepthTexture2dArrayMipmap","","Represents a single mipmap level of a `DepthTexture2dArray`."],[3,"StencilTexture2dArray","","An array of two-dimensional textures  containing stencil data."],[3,"StencilTexture2dArrayLayer","","Represents a single layer of a `StencilTexture2dArray`."],[3,"StencilTexture2dArrayMipmap","","Represents a single mipmap level of a `StencilTexture2dArray`."],[3,"DepthStencilTexture2dArray","","An array of two-dimensional textures  containing both depth and stencil data."],[3,"DepthStencilTexture2dArrayLayer","","Represents a single layer of a `DepthStencilTexture2dArray`."],[3,"DepthStencilTexture2dArrayMipmap","","Represents a single mipmap level of a `DepthStencilTexture2dArray`."],[3,"Texture2dArrayMultisample","","An array of two-dimensional textures  containing floating-point data."],[3,"Texture2dArrayMultisampleMipmap","","Represents a single mipmap level of a `Texture2dArrayMultisample`."],[3,"IntegralTexture2dArrayMultisample","","An array of two-dimensional textures  containing signed integral data."],[3,"IntegralTexture2dArrayMultisampleMipmap","","Represents a single mipmap level of a `IntegralTexture2dArrayMultisample`."],[3,"UnsignedTexture2dArrayMultisample","","An array of two-dimensional textures  containing unsigned integral data."],[3,"UnsignedTexture2dArrayMultisampleMipmap","","Represents a single mipmap level of a `UnsignedTexture2dArrayMultisample`."],[3,"DepthTexture2dArrayMultisample","","An array of two-dimensional textures  containing depth data."],[3,"DepthTexture2dArrayMultisampleMipmap","","Represents a single mipmap level of a `DepthTexture2dArrayMultisample`."],[3,"StencilTexture2dArrayMultisample","","An array of two-dimensional textures  containing stencil data."],[3,"StencilTexture2dArrayMultisampleMipmap","","Represents a single mipmap level of a `StencilTexture2dArrayMultisample`."],[3,"DepthStencilTexture2dArrayMultisample","","An array of two-dimensional textures  containing both depth and stencil data."],[3,"DepthStencilTexture2dArrayMultisampleMipmap","","Represents a single mipmap level of a `DepthStencilTexture2dArrayMultisample`."],[3,"RawImage1d","","Represents raw data for a two-dimensional image."],[12,"data","","A contiguous array of pixel data.",112],[12,"width","","Number of pixels per column.",112],[12,"format","","Formats of the pixels.",112],[3,"RawImage2d","","Represents raw data for a two-dimensional image."],[12,"data","","A contiguous array of pixel data.",113],[12,"width","","Number of pixels per column.",113],[12,"height","","Number of pixels per row.",113],[12,"format","","Formats of the pixels.",113],[3,"RawImage3d","","Represents raw data for a two-dimensional image."],[12,"data","","A contiguous array of pixel data.",114],[12,"width","","Number of pixels per column.",114],[12,"height","","Number of pixels per row.",114],[12,"depth","","Number of pixels per depth.",114],[12,"format","","Formats of the pixels.",114],[3,"TextureSurface","","Struct that allows you to draw on a texture."],[4,"ClientFormat","","List of client-side pixel formats."],[13,"U8","","",115],[13,"U8U8","","",115],[13,"U8U8U8","","",115],[13,"U8U8U8U8","","",115],[13,"I8","","",115],[13,"I8I8","","",115],[13,"I8I8I8","","",115],[13,"I8I8I8I8","","",115],[13,"U16","","",115],[13,"U16U16","","",115],[13,"U16U16U16","","",115],[13,"U16U16U16U16","","",115],[13,"I16","","",115],[13,"I16I16","","",115],[13,"I16I16I16","","",115],[13,"I16I16I16I16","","",115],[13,"U32","","",115],[13,"U32U32","","",115],[13,"U32U32U32","","",115],[13,"U32U32U32U32","","",115],[13,"I32","","",115],[13,"I32I32","","",115],[13,"I32I32I32","","",115],[13,"I32I32I32I32","","",115],[13,"U3U3U2","","",115],[13,"U5U6U5","","",115],[13,"U4U4U4U4","","",115],[13,"U5U5U5U1","","",115],[13,"U10U10U10U2","","",115],[13,"F16","","",115],[13,"F16F16","","",115],[13,"F16F16F16","","",115],[13,"F16F16F16F16","","",115],[13,"F32","","",115],[13,"F32F32","","",115],[13,"F32F32F32","","",115],[13,"F32F32F32F32","","",115],[4,"TextureFormat","","Format of the internal representation of a texture."],[13,"UncompressedFloat","","",116],[13,"UncompressedIntegral","","",116],[13,"UncompressedUnsigned","","",116],[13,"CompressedFormat","","",116],[13,"DepthFormat","","",116],[13,"StencilFormat","","",116],[13,"DepthStencilFormat","","",116],[4,"UncompressedFloatFormat","","List of uncompressed pixel formats that contain floating-point-like data."],[13,"U8","","",117],[13,"I8","","",117],[13,"U16","","",117],[13,"I16","","",117],[13,"U8U8","","",117],[13,"I8I8","","",117],[13,"U16U16","","",117],[13,"I16I16","","",117],[13,"U3U32U","","",117],[13,"U4U4U4","","",117],[13,"U5U5U5","","",117],[13,"U8U8U8","","",117],[13,"I8I8I8","","",117],[13,"U10U10U10","","",117],[13,"U12U12U12","","",117],[13,"I16I16I16","","",117],[13,"U2U2U2U2","","",117],[13,"U4U4U4U4","","",117],[13,"U5U5U5U1","","",117],[13,"U8U8U8U8","","",117],[13,"I8I8I8I8","","",117],[13,"U10U10U10U2","","",117],[13,"U12U12U12U12","","",117],[13,"U16U16U16U16","","",117],[13,"F16","","",117],[13,"F16F16","","",117],[13,"F16F16F16","","",117],[13,"F16F16F16F16","","",117],[13,"F32","","",117],[13,"F32F32","","",117],[13,"F32F32F32","","",117],[13,"F32F32F32F32","","",117],[13,"F11F11F10","","",117],[13,"F9F9F9","","Uses three components of 9 bits of precision that all share the same exponent.",117],[4,"UncompressedIntFormat","","List of uncompressed pixel formats that contain signed integral data."],[13,"I8","","",118],[13,"I16","","",118],[13,"I32","","",118],[13,"I8I8","","",118],[13,"I16I16","","",118],[13,"I32I32","","",118],[13,"I8I8I8","","",118],[13,"I16I16I16","","May not be supported by renderbuffers.",118],[13,"I32I32I32","","May not be supported by renderbuffers.",118],[13,"I8I8I8I8","","May not be supported by renderbuffers.",118],[13,"I16I16I16I16","","",118],[13,"I32I32I32I32","","",118],[4,"UncompressedUintFormat","","List of uncompressed pixel formats that contain unsigned integral data."],[13,"U8","","",119],[13,"U16","","",119],[13,"U32","","",119],[13,"U8U8","","",119],[13,"U16U16","","",119],[13,"U32U32","","",119],[13,"U8U8U8","","",119],[13,"U16U16U16","","May not be supported by renderbuffers.",119],[13,"U32U32U32","","May not be supported by renderbuffers.",119],[13,"U8U8U8U8","","May not be supported by renderbuffers.",119],[13,"U16U16U16U16","","",119],[13,"U32U32U32U32","","",119],[13,"U10U10U10U2","","",119],[4,"CompressedFormat","","List of compressed texture formats."],[13,"RGTCFormatU","","Red/green compressed texture with one unsigned component.",120],[13,"RGTCFormatI","","Red/green compressed texture with one signed component.",120],[13,"RGTCFormatUU","","Red/green compressed texture with two unsigned components.",120],[13,"RGTCFormatII","","Red/green compressed texture with two signed components.",120],[4,"DepthFormat","","List of formats available for depth textures."],[13,"I16","","",121],[13,"I24","","",121],[13,"I32","","May not be supported by all hardware.",121],[13,"F32","","",121],[4,"DepthStencilFormat","","List of formats available for depth-stencil textures."],[13,"I24I8","","",122],[13,"F32I8","","",122],[4,"StencilFormat","","List of formats available for stencil textures."],[13,"I1","","",123],[13,"I4","","",123],[13,"I8","","",123],[13,"I16","","",123],[4,"TextureCreationError","","Error that can happen when creating a texture."],[13,"UnsupportedFormat","","The requested format is not supported by the backend.",124],[13,"DimensionsNotSupported","","The requested texture dimensions are not supported.",124],[4,"TextureMaybeSupportedCreationError","","Error that can happen when creating a texture which we don't know whether it is supported."],[13,"CreationError","","The texture type is supported, but a `TextureCreationError` happened.",125],[13,"NotSupported","","The texture type is not supported by the backend.",125],[11,"eq","","",115],[11,"ne","","",115],[11,"clone","","",115],[11,"fmt","","",115],[11,"get_size","","Returns the size in bytes of a pixel of this type.",115],[11,"get_num_components","","Returns the number of components of this client format.",115],[11,"eq","","",117],[11,"ne","","",117],[11,"clone","","",117],[11,"fmt","","",117],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",117],[11,"eq","","",118],[11,"ne","","",118],[11,"clone","","",118],[11,"fmt","","",118],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",118],[11,"eq","","",119],[11,"ne","","",119],[11,"clone","","",119],[11,"fmt","","",119],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",119],[11,"eq","","",120],[11,"ne","","",120],[11,"clone","","",120],[11,"fmt","","",120],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",120],[11,"eq","","",121],[11,"ne","","",121],[11,"clone","","",121],[11,"fmt","","",121],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",121],[11,"eq","","",122],[11,"ne","","",122],[11,"clone","","",122],[11,"fmt","","",122],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",122],[11,"eq","","",123],[11,"ne","","",123],[11,"clone","","",123],[11,"fmt","","",123],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",123],[11,"eq","","",116],[11,"ne","","",116],[11,"clone","","",116],[11,"fmt","","",116],[11,"get_format","image::color","",126],[11,"get_format","","",127],[11,"get_format","","",128],[11,"get_format","","",128],[11,"get_format","","",128],[11,"get_format","","",129],[11,"get_format","","",129],[11,"get_format","","",129],[8,"PixelValue","glium::texture","A trait that must be implemented for any type that can represent the value of a pixel."],[10,"get_format","","Returns corresponding client format.",130],[8,"Texture","","Trait that describes a texture."],[10,"get_width","","Returns the width in pixels of the texture.",131],[10,"get_height","","Returns the height in pixels of the texture, or `None` for one dimensional textures.",131],[10,"get_depth","","Returns the depth in pixels of the texture, or `None` for one or two dimensional textures.",131],[10,"get_array_size","","Returns the number of textures in the array, or `None` for non-arrays.",131],[8,"Texture1dDataSource","","Trait that describes data for a one-dimensional texture."],[16,"Data","glium::texture::Texture1dDataSource",""],[10,"into_raw","glium::texture","Returns the raw representation of the data.",132],[8,"Texture1dDataSink","","Trait that describes data for a one-dimensional texture."],[16,"Data","glium::texture::Texture1dDataSink",""],[10,"get_preferred_formats","glium::texture","Returns the list of accepted formats.",133],[10,"from_raw","","Builds a new object from raw data.",133],[8,"Texture2dDataSource","","Trait that describes data for a two-dimensional texture."],[16,"Data","glium::texture::Texture2dDataSource",""],[10,"into_raw","glium::texture","Returns the raw representation of the data.",134],[8,"Texture2dDataSink","","Trait that describes data for a two-dimensional texture."],[16,"Data","glium::texture::Texture2dDataSink",""],[10,"get_preferred_formats","glium::texture","Returns the list of accepted formats.",135],[10,"from_raw","","Builds a new object from raw data.",135],[8,"Texture3dDataSource","","Trait that describes data for a two-dimensional texture."],[16,"Data","glium::texture::Texture3dDataSource",""],[10,"into_raw","glium::texture","Returns the raw representation of the data.",136],[8,"Texture3dDataSink","","Trait that describes data for a two-dimensional texture."],[16,"Data","glium::texture::Texture3dDataSink",""],[10,"get_preferred_formats","glium::texture","Returns the list of accepted formats.",137],[10,"from_raw","","Builds a new object from raw data.",137],[11,"get_width","","",138],[11,"get_height","","",138],[11,"get_depth","","",138],[11,"get_array_size","","",138],[6,"Id","",""],[11,"get_id","","",138],[11,"fmt","","",138],[11,"into_uniform_value","glium::uniforms","",68],[11,"new","glium::texture","Builds a new texture by uploading data.",138],[11,"new_if_supported","","Builds a new texture by uploading data.",138],[11,"with_mipmaps","","Builds a new texture by uploading data.",138],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",138],[11,"with_format","","Builds a new texture with a specific format.",138],[11,"with_format_if_supported","","Builds a new texture with a specific format.",138],[11,"new_empty","","Creates an empty texture.",138],[11,"empty","","Creates an empty texture.",138],[11,"empty_if_supported","","Creates an empty texture.",138],[11,"empty_with_format","","Creates an empty texture with a specific format.",138],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",138],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",138],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",138],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",138],[11,"mipmap","","Access a single mipmap level of this texture.",138],[11,"main_level","","Access the main mipmap level of this texture.",138],[11,"clone","","",139],[11,"get_texture","","Returns the corresponding texture.",139],[11,"get_level","","Returns the layer index.",139],[11,"get_width","","",140],[11,"get_height","","",140],[11,"get_depth","","",140],[11,"get_array_size","","",140],[6,"Id","",""],[11,"get_id","","",140],[11,"fmt","","",140],[11,"into_uniform_value","glium::uniforms","",68],[11,"new","glium::texture","Builds a new texture by uploading data.",140],[11,"new_if_supported","","Builds a new texture by uploading data.",140],[11,"with_mipmaps","","Builds a new texture by uploading data.",140],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",140],[11,"with_format","","Builds a new texture with a specific format.",140],[11,"with_format_if_supported","","Builds a new texture with a specific format.",140],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",140],[11,"mipmap","","Access a single mipmap level of this texture.",140],[11,"main_level","","Access the main mipmap level of this texture.",140],[11,"clone","","",141],[11,"get_texture","","Returns the corresponding texture.",141],[11,"get_level","","Returns the layer index.",141],[11,"get_width","","",142],[11,"get_height","","",142],[11,"get_depth","","",142],[11,"get_array_size","","",142],[6,"Id","",""],[11,"get_id","","",142],[11,"fmt","","",142],[11,"into_uniform_value","glium::uniforms","",68],[11,"new","glium::texture","Builds a new texture by uploading data.",142],[11,"new_if_supported","","Builds a new texture by uploading data.",142],[11,"with_mipmaps","","Builds a new texture by uploading data.",142],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",142],[11,"with_format","","Builds a new texture with a specific format.",142],[11,"with_format_if_supported","","Builds a new texture with a specific format.",142],[11,"new_empty","","Creates an empty texture.",142],[11,"empty","","Creates an empty texture.",142],[11,"empty_if_supported","","Creates an empty texture.",142],[11,"empty_with_format","","Creates an empty texture with a specific format.",142],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",142],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",142],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",142],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",142],[11,"mipmap","","Access a single mipmap level of this texture.",142],[11,"main_level","","Access the main mipmap level of this texture.",142],[11,"clone","","",143],[11,"get_texture","","Returns the corresponding texture.",143],[11,"get_level","","Returns the layer index.",143],[11,"get_width","","",144],[11,"get_height","","",144],[11,"get_depth","","",144],[11,"get_array_size","","",144],[6,"Id","",""],[11,"get_id","","",144],[11,"fmt","","",144],[11,"into_uniform_value","glium::uniforms","",68],[11,"new","glium::texture","Builds a new texture by uploading data.",144],[11,"new_if_supported","","Builds a new texture by uploading data.",144],[11,"with_mipmaps","","Builds a new texture by uploading data.",144],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",144],[11,"with_format","","Builds a new texture with a specific format.",144],[11,"with_format_if_supported","","Builds a new texture with a specific format.",144],[11,"new_empty","","Creates an empty texture.",144],[11,"empty","","Creates an empty texture.",144],[11,"empty_if_supported","","Creates an empty texture.",144],[11,"empty_with_format","","Creates an empty texture with a specific format.",144],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",144],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",144],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",144],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",144],[11,"mipmap","","Access a single mipmap level of this texture.",144],[11,"main_level","","Access the main mipmap level of this texture.",144],[11,"clone","","",145],[11,"get_texture","","Returns the corresponding texture.",145],[11,"get_level","","Returns the layer index.",145],[11,"get_width","","",146],[11,"get_height","","",146],[11,"get_depth","","",146],[11,"get_array_size","","",146],[6,"Id","",""],[11,"get_id","","",146],[11,"fmt","","",146],[11,"into_uniform_value","glium::uniforms","",68],[11,"new","glium::texture","Builds a new texture by uploading data.",146],[11,"new_if_supported","","Builds a new texture by uploading data.",146],[11,"with_mipmaps","","Builds a new texture by uploading data.",146],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",146],[11,"with_format","","Builds a new texture with a specific format.",146],[11,"with_format_if_supported","","Builds a new texture with a specific format.",146],[11,"new_empty","","Creates an empty texture.",146],[11,"empty","","Creates an empty texture.",146],[11,"empty_if_supported","","Creates an empty texture.",146],[11,"empty_with_format","","Creates an empty texture with a specific format.",146],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",146],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",146],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",146],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",146],[11,"mipmap","","Access a single mipmap level of this texture.",146],[11,"main_level","","Access the main mipmap level of this texture.",146],[11,"clone","","",147],[11,"get_texture","","Returns the corresponding texture.",147],[11,"get_level","","Returns the layer index.",147],[11,"get_width","","",148],[11,"get_height","","",148],[11,"get_depth","","",148],[11,"get_array_size","","",148],[6,"Id","",""],[11,"get_id","","",148],[11,"fmt","","",148],[11,"new","","Builds a new texture by uploading data.",148],[11,"new_if_supported","","Builds a new texture by uploading data.",148],[11,"with_mipmaps","","Builds a new texture by uploading data.",148],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",148],[11,"with_format","","Builds a new texture with a specific format.",148],[11,"with_format_if_supported","","Builds a new texture with a specific format.",148],[11,"new_empty","","Creates an empty texture.",148],[11,"empty","","Creates an empty texture.",148],[11,"empty_if_supported","","Creates an empty texture.",148],[11,"empty_with_format","","Creates an empty texture with a specific format.",148],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",148],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",148],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",148],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",148],[11,"mipmap","","Access a single mipmap level of this texture.",148],[11,"main_level","","Access the main mipmap level of this texture.",148],[11,"clone","","",149],[11,"get_texture","","Returns the corresponding texture.",149],[11,"get_level","","Returns the layer index.",149],[11,"get_width","","",150],[11,"get_height","","",150],[11,"get_depth","","",150],[11,"get_array_size","","",150],[6,"Id","",""],[11,"get_id","","",150],[11,"fmt","","",150],[11,"new","","Builds a new texture by uploading data.",150],[11,"new_if_supported","","Builds a new texture by uploading data.",150],[11,"with_mipmaps","","Builds a new texture by uploading data.",150],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",150],[11,"with_format","","Builds a new texture with a specific format.",150],[11,"with_format_if_supported","","Builds a new texture with a specific format.",150],[11,"new_empty","","Creates an empty texture.",150],[11,"empty","","Creates an empty texture.",150],[11,"empty_if_supported","","Creates an empty texture.",150],[11,"empty_with_format","","Creates an empty texture with a specific format.",150],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",150],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",150],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",150],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",150],[11,"mipmap","","Access a single mipmap level of this texture.",150],[11,"main_level","","Access the main mipmap level of this texture.",150],[11,"clone","","",151],[11,"get_texture","","Returns the corresponding texture.",151],[11,"get_level","","Returns the layer index.",151],[11,"get_width","","",152],[11,"get_height","","",152],[11,"get_depth","","",152],[11,"get_array_size","","",152],[6,"Id","",""],[11,"get_id","","",152],[11,"fmt","","",152],[11,"into_uniform_value","glium::uniforms","",68],[11,"to_color_attachment","glium::texture","",152],[11,"new","","Builds a new texture by uploading data.",152],[11,"with_mipmaps","","Builds a new texture by uploading data.",152],[11,"with_format","","Builds a new texture with a specific format.",152],[11,"new_empty","","Creates an empty texture.",152],[11,"empty","","Creates an empty texture.",152],[11,"empty_if_supported","","Creates an empty texture.",152],[11,"empty_with_format","","Creates an empty texture with a specific format.",152],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",152],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",152],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",152],[11,"as_surface","","Starts drawing on the texture.",152],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",152],[11,"read","","Reads the content of the texture to RAM.",152],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory.",152],[11,"write","","Uploads some data in the texture.",152],[11,"mipmap","","Access a single mipmap level of this texture.",152],[11,"main_level","","Access the main mipmap level of this texture.",152],[11,"clone","","",153],[11,"get_texture","","Returns the corresponding texture.",153],[11,"get_level","","Returns the layer index.",153],[11,"get_width","","",154],[11,"get_height","","",154],[11,"get_depth","","",154],[11,"get_array_size","","",154],[6,"Id","",""],[11,"get_id","","",154],[11,"fmt","","",154],[11,"into_uniform_value","glium::uniforms","",68],[11,"new","glium::texture","Builds a new texture by uploading data.",154],[11,"with_mipmaps","","Builds a new texture by uploading data.",154],[11,"with_format","","Builds a new texture with a specific format.",154],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",154],[11,"read","","Reads the content of the texture to RAM.",154],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory.",154],[11,"write","","Uploads some data in the texture.",154],[11,"mipmap","","Access a single mipmap level of this texture.",154],[11,"main_level","","Access the main mipmap level of this texture.",154],[11,"clone","","",155],[11,"get_texture","","Returns the corresponding texture.",155],[11,"get_level","","Returns the layer index.",155],[11,"get_width","","",156],[11,"get_height","","",156],[11,"get_depth","","",156],[11,"get_array_size","","",156],[6,"Id","",""],[11,"get_id","","",156],[11,"fmt","","",156],[11,"into_uniform_value","glium::uniforms","",68],[11,"new","glium::texture","Builds a new texture by uploading data.",156],[11,"new_if_supported","","Builds a new texture by uploading data.",156],[11,"with_mipmaps","","Builds a new texture by uploading data.",156],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",156],[11,"with_format","","Builds a new texture with a specific format.",156],[11,"with_format_if_supported","","Builds a new texture with a specific format.",156],[11,"new_empty","","Creates an empty texture.",156],[11,"empty","","Creates an empty texture.",156],[11,"empty_if_supported","","Creates an empty texture.",156],[11,"empty_with_format","","Creates an empty texture with a specific format.",156],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",156],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",156],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",156],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",156],[11,"mipmap","","Access a single mipmap level of this texture.",156],[11,"main_level","","Access the main mipmap level of this texture.",156],[11,"clone","","",157],[11,"get_texture","","Returns the corresponding texture.",157],[11,"get_level","","Returns the layer index.",157],[11,"get_width","","",158],[11,"get_height","","",158],[11,"get_depth","","",158],[11,"get_array_size","","",158],[6,"Id","",""],[11,"get_id","","",158],[11,"fmt","","",158],[11,"into_uniform_value","glium::uniforms","",68],[11,"new","glium::texture","Builds a new texture by uploading data.",158],[11,"new_if_supported","","Builds a new texture by uploading data.",158],[11,"with_mipmaps","","Builds a new texture by uploading data.",158],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",158],[11,"with_format","","Builds a new texture with a specific format.",158],[11,"with_format_if_supported","","Builds a new texture with a specific format.",158],[11,"new_empty","","Creates an empty texture.",158],[11,"empty","","Creates an empty texture.",158],[11,"empty_if_supported","","Creates an empty texture.",158],[11,"empty_with_format","","Creates an empty texture with a specific format.",158],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",158],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",158],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",158],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",158],[11,"mipmap","","Access a single mipmap level of this texture.",158],[11,"main_level","","Access the main mipmap level of this texture.",158],[11,"clone","","",159],[11,"get_texture","","Returns the corresponding texture.",159],[11,"get_level","","Returns the layer index.",159],[11,"get_width","","",160],[11,"get_height","","",160],[11,"get_depth","","",160],[11,"get_array_size","","",160],[6,"Id","",""],[11,"get_id","","",160],[11,"fmt","","",160],[11,"into_uniform_value","glium::uniforms","",68],[11,"to_depth_attachment","glium::texture","",160],[11,"new","","Builds a new texture by uploading data.",160],[11,"new_if_supported","","Builds a new texture by uploading data.",160],[11,"with_mipmaps","","Builds a new texture by uploading data.",160],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",160],[11,"with_format","","Builds a new texture with a specific format.",160],[11,"with_format_if_supported","","Builds a new texture with a specific format.",160],[11,"new_empty","","Creates an empty texture.",160],[11,"empty","","Creates an empty texture.",160],[11,"empty_if_supported","","Creates an empty texture.",160],[11,"empty_with_format","","Creates an empty texture with a specific format.",160],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",160],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",160],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",160],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",160],[11,"mipmap","","Access a single mipmap level of this texture.",160],[11,"main_level","","Access the main mipmap level of this texture.",160],[11,"clone","","",161],[11,"get_texture","","Returns the corresponding texture.",161],[11,"get_level","","Returns the layer index.",161],[11,"get_width","","",162],[11,"get_height","","",162],[11,"get_depth","","",162],[11,"get_array_size","","",162],[6,"Id","",""],[11,"get_id","","",162],[11,"fmt","","",162],[11,"to_stencil_attachment","","",162],[11,"new","","Builds a new texture by uploading data.",162],[11,"new_if_supported","","Builds a new texture by uploading data.",162],[11,"with_mipmaps","","Builds a new texture by uploading data.",162],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",162],[11,"with_format","","Builds a new texture with a specific format.",162],[11,"with_format_if_supported","","Builds a new texture with a specific format.",162],[11,"new_empty","","Creates an empty texture.",162],[11,"empty","","Creates an empty texture.",162],[11,"empty_if_supported","","Creates an empty texture.",162],[11,"empty_with_format","","Creates an empty texture with a specific format.",162],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",162],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",162],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",162],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",162],[11,"mipmap","","Access a single mipmap level of this texture.",162],[11,"main_level","","Access the main mipmap level of this texture.",162],[11,"clone","","",163],[11,"get_texture","","Returns the corresponding texture.",163],[11,"get_level","","Returns the layer index.",163],[11,"get_width","","",164],[11,"get_height","","",164],[11,"get_depth","","",164],[11,"get_array_size","","",164],[6,"Id","",""],[11,"get_id","","",164],[11,"fmt","","",164],[11,"to_depth_stencil_attachment","","",164],[11,"new","","Builds a new texture by uploading data.",164],[11,"new_if_supported","","Builds a new texture by uploading data.",164],[11,"with_mipmaps","","Builds a new texture by uploading data.",164],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",164],[11,"with_format","","Builds a new texture with a specific format.",164],[11,"with_format_if_supported","","Builds a new texture with a specific format.",164],[11,"new_empty","","Creates an empty texture.",164],[11,"empty","","Creates an empty texture.",164],[11,"empty_if_supported","","Creates an empty texture.",164],[11,"empty_with_format","","Creates an empty texture with a specific format.",164],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",164],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",164],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",164],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",164],[11,"mipmap","","Access a single mipmap level of this texture.",164],[11,"main_level","","Access the main mipmap level of this texture.",164],[11,"clone","","",165],[11,"get_texture","","Returns the corresponding texture.",165],[11,"get_level","","Returns the layer index.",165],[11,"get_width","","",166],[11,"get_height","","",166],[11,"get_depth","","",166],[11,"get_array_size","","",166],[6,"Id","",""],[11,"get_id","","",166],[11,"fmt","","",166],[11,"into_uniform_value","glium::uniforms","",68],[11,"new_empty","glium::texture","Creates an empty texture.",166],[11,"empty","","Creates an empty texture.",166],[11,"empty_if_supported","","Creates an empty texture.",166],[11,"empty_with_format","","Creates an empty texture with a specific format.",166],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",166],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",166],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",166],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",166],[11,"mipmap","","Access a single mipmap level of this texture.",166],[11,"main_level","","Access the main mipmap level of this texture.",166],[11,"clone","","",167],[11,"get_texture","","Returns the corresponding texture.",167],[11,"get_level","","Returns the layer index.",167],[11,"get_width","","",168],[11,"get_height","","",168],[11,"get_depth","","",168],[11,"get_array_size","","",168],[6,"Id","",""],[11,"get_id","","",168],[11,"fmt","","",168],[11,"into_uniform_value","glium::uniforms","",68],[11,"new_empty","glium::texture","Creates an empty texture.",168],[11,"empty","","Creates an empty texture.",168],[11,"empty_if_supported","","Creates an empty texture.",168],[11,"empty_with_format","","Creates an empty texture with a specific format.",168],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",168],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",168],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",168],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",168],[11,"mipmap","","Access a single mipmap level of this texture.",168],[11,"main_level","","Access the main mipmap level of this texture.",168],[11,"clone","","",169],[11,"get_texture","","Returns the corresponding texture.",169],[11,"get_level","","Returns the layer index.",169],[11,"get_width","","",170],[11,"get_height","","",170],[11,"get_depth","","",170],[11,"get_array_size","","",170],[6,"Id","",""],[11,"get_id","","",170],[11,"fmt","","",170],[11,"into_uniform_value","glium::uniforms","",68],[11,"new_empty","glium::texture","Creates an empty texture.",170],[11,"empty","","Creates an empty texture.",170],[11,"empty_if_supported","","Creates an empty texture.",170],[11,"empty_with_format","","Creates an empty texture with a specific format.",170],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",170],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",170],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",170],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",170],[11,"mipmap","","Access a single mipmap level of this texture.",170],[11,"main_level","","Access the main mipmap level of this texture.",170],[11,"clone","","",171],[11,"get_texture","","Returns the corresponding texture.",171],[11,"get_level","","Returns the layer index.",171],[11,"get_width","","",172],[11,"get_height","","",172],[11,"get_depth","","",172],[11,"get_array_size","","",172],[6,"Id","",""],[11,"get_id","","",172],[11,"fmt","","",172],[11,"into_uniform_value","glium::uniforms","",68],[11,"new_empty","glium::texture","Creates an empty texture.",172],[11,"empty","","Creates an empty texture.",172],[11,"empty_if_supported","","Creates an empty texture.",172],[11,"empty_with_format","","Creates an empty texture with a specific format.",172],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",172],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",172],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",172],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",172],[11,"mipmap","","Access a single mipmap level of this texture.",172],[11,"main_level","","Access the main mipmap level of this texture.",172],[11,"clone","","",173],[11,"get_texture","","Returns the corresponding texture.",173],[11,"get_level","","Returns the layer index.",173],[11,"get_width","","",174],[11,"get_height","","",174],[11,"get_depth","","",174],[11,"get_array_size","","",174],[6,"Id","",""],[11,"get_id","","",174],[11,"fmt","","",174],[11,"new_empty","","Creates an empty texture.",174],[11,"empty","","Creates an empty texture.",174],[11,"empty_if_supported","","Creates an empty texture.",174],[11,"empty_with_format","","Creates an empty texture with a specific format.",174],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",174],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",174],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",174],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",174],[11,"mipmap","","Access a single mipmap level of this texture.",174],[11,"main_level","","Access the main mipmap level of this texture.",174],[11,"clone","","",175],[11,"get_texture","","Returns the corresponding texture.",175],[11,"get_level","","Returns the layer index.",175],[11,"get_width","","",176],[11,"get_height","","",176],[11,"get_depth","","",176],[11,"get_array_size","","",176],[6,"Id","",""],[11,"get_id","","",176],[11,"fmt","","",176],[11,"new_empty","","Creates an empty texture.",176],[11,"empty","","Creates an empty texture.",176],[11,"empty_if_supported","","Creates an empty texture.",176],[11,"empty_with_format","","Creates an empty texture with a specific format.",176],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",176],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",176],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",176],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",176],[11,"mipmap","","Access a single mipmap level of this texture.",176],[11,"main_level","","Access the main mipmap level of this texture.",176],[11,"clone","","",177],[11,"get_texture","","Returns the corresponding texture.",177],[11,"get_level","","Returns the layer index.",177],[11,"get_width","","",178],[11,"get_height","","",178],[11,"get_depth","","",178],[11,"get_array_size","","",178],[6,"Id","",""],[11,"get_id","","",178],[11,"fmt","","",178],[11,"into_uniform_value","glium::uniforms","",68],[11,"new","glium::texture","Builds a new texture by uploading data.",178],[11,"new_if_supported","","Builds a new texture by uploading data.",178],[11,"with_mipmaps","","Builds a new texture by uploading data.",178],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",178],[11,"with_format","","Builds a new texture with a specific format.",178],[11,"with_format_if_supported","","Builds a new texture with a specific format.",178],[11,"new_empty","","Creates an empty texture.",178],[11,"empty","","Creates an empty texture.",178],[11,"empty_if_supported","","Creates an empty texture.",178],[11,"empty_with_format","","Creates an empty texture with a specific format.",178],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",178],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",178],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",178],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",178],[11,"mipmap","","Access a single mipmap level of this texture.",178],[11,"main_level","","Access the main mipmap level of this texture.",178],[11,"clone","","",179],[11,"get_texture","","Returns the corresponding texture.",179],[11,"get_level","","Returns the layer index.",179],[11,"get_width","","",180],[11,"get_height","","",180],[11,"get_depth","","",180],[11,"get_array_size","","",180],[6,"Id","",""],[11,"get_id","","",180],[11,"fmt","","",180],[11,"into_uniform_value","glium::uniforms","",68],[11,"new","glium::texture","Builds a new texture by uploading data.",180],[11,"new_if_supported","","Builds a new texture by uploading data.",180],[11,"with_mipmaps","","Builds a new texture by uploading data.",180],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",180],[11,"with_format","","Builds a new texture with a specific format.",180],[11,"with_format_if_supported","","Builds a new texture with a specific format.",180],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",180],[11,"mipmap","","Access a single mipmap level of this texture.",180],[11,"main_level","","Access the main mipmap level of this texture.",180],[11,"clone","","",181],[11,"get_texture","","Returns the corresponding texture.",181],[11,"get_level","","Returns the layer index.",181],[11,"get_width","","",182],[11,"get_height","","",182],[11,"get_depth","","",182],[11,"get_array_size","","",182],[6,"Id","",""],[11,"get_id","","",182],[11,"fmt","","",182],[11,"into_uniform_value","glium::uniforms","",68],[11,"new","glium::texture","Builds a new texture by uploading data.",182],[11,"new_if_supported","","Builds a new texture by uploading data.",182],[11,"with_mipmaps","","Builds a new texture by uploading data.",182],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",182],[11,"with_format","","Builds a new texture with a specific format.",182],[11,"with_format_if_supported","","Builds a new texture with a specific format.",182],[11,"new_empty","","Creates an empty texture.",182],[11,"empty","","Creates an empty texture.",182],[11,"empty_if_supported","","Creates an empty texture.",182],[11,"empty_with_format","","Creates an empty texture with a specific format.",182],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",182],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",182],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",182],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",182],[11,"mipmap","","Access a single mipmap level of this texture.",182],[11,"main_level","","Access the main mipmap level of this texture.",182],[11,"clone","","",183],[11,"get_texture","","Returns the corresponding texture.",183],[11,"get_level","","Returns the layer index.",183],[11,"get_width","","",184],[11,"get_height","","",184],[11,"get_depth","","",184],[11,"get_array_size","","",184],[6,"Id","",""],[11,"get_id","","",184],[11,"fmt","","",184],[11,"into_uniform_value","glium::uniforms","",68],[11,"new","glium::texture","Builds a new texture by uploading data.",184],[11,"new_if_supported","","Builds a new texture by uploading data.",184],[11,"with_mipmaps","","Builds a new texture by uploading data.",184],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",184],[11,"with_format","","Builds a new texture with a specific format.",184],[11,"with_format_if_supported","","Builds a new texture with a specific format.",184],[11,"new_empty","","Creates an empty texture.",184],[11,"empty","","Creates an empty texture.",184],[11,"empty_if_supported","","Creates an empty texture.",184],[11,"empty_with_format","","Creates an empty texture with a specific format.",184],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",184],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",184],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",184],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",184],[11,"mipmap","","Access a single mipmap level of this texture.",184],[11,"main_level","","Access the main mipmap level of this texture.",184],[11,"clone","","",185],[11,"get_texture","","Returns the corresponding texture.",185],[11,"get_level","","Returns the layer index.",185],[11,"get_width","","",186],[11,"get_height","","",186],[11,"get_depth","","",186],[11,"get_array_size","","",186],[6,"Id","",""],[11,"get_id","","",186],[11,"fmt","","",186],[11,"into_uniform_value","glium::uniforms","",68],[11,"new","glium::texture","Builds a new texture by uploading data.",186],[11,"new_if_supported","","Builds a new texture by uploading data.",186],[11,"with_mipmaps","","Builds a new texture by uploading data.",186],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",186],[11,"with_format","","Builds a new texture with a specific format.",186],[11,"with_format_if_supported","","Builds a new texture with a specific format.",186],[11,"new_empty","","Creates an empty texture.",186],[11,"empty","","Creates an empty texture.",186],[11,"empty_if_supported","","Creates an empty texture.",186],[11,"empty_with_format","","Creates an empty texture with a specific format.",186],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",186],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",186],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",186],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",186],[11,"mipmap","","Access a single mipmap level of this texture.",186],[11,"main_level","","Access the main mipmap level of this texture.",186],[11,"clone","","",187],[11,"get_texture","","Returns the corresponding texture.",187],[11,"get_level","","Returns the layer index.",187],[11,"get_width","","",188],[11,"get_height","","",188],[11,"get_depth","","",188],[11,"get_array_size","","",188],[6,"Id","",""],[11,"get_id","","",188],[11,"fmt","","",188],[11,"new","","Builds a new texture by uploading data.",188],[11,"new_if_supported","","Builds a new texture by uploading data.",188],[11,"with_mipmaps","","Builds a new texture by uploading data.",188],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",188],[11,"with_format","","Builds a new texture with a specific format.",188],[11,"with_format_if_supported","","Builds a new texture with a specific format.",188],[11,"new_empty","","Creates an empty texture.",188],[11,"empty","","Creates an empty texture.",188],[11,"empty_if_supported","","Creates an empty texture.",188],[11,"empty_with_format","","Creates an empty texture with a specific format.",188],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",188],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",188],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",188],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",188],[11,"mipmap","","Access a single mipmap level of this texture.",188],[11,"main_level","","Access the main mipmap level of this texture.",188],[11,"clone","","",189],[11,"get_texture","","Returns the corresponding texture.",189],[11,"get_level","","Returns the layer index.",189],[11,"get_width","","",190],[11,"get_height","","",190],[11,"get_depth","","",190],[11,"get_array_size","","",190],[6,"Id","",""],[11,"get_id","","",190],[11,"fmt","","",190],[11,"new","","Builds a new texture by uploading data.",190],[11,"new_if_supported","","Builds a new texture by uploading data.",190],[11,"with_mipmaps","","Builds a new texture by uploading data.",190],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",190],[11,"with_format","","Builds a new texture with a specific format.",190],[11,"with_format_if_supported","","Builds a new texture with a specific format.",190],[11,"new_empty","","Creates an empty texture.",190],[11,"empty","","Creates an empty texture.",190],[11,"empty_if_supported","","Creates an empty texture.",190],[11,"empty_with_format","","Creates an empty texture with a specific format.",190],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",190],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",190],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",190],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",190],[11,"mipmap","","Access a single mipmap level of this texture.",190],[11,"main_level","","Access the main mipmap level of this texture.",190],[11,"clone","","",191],[11,"get_texture","","Returns the corresponding texture.",191],[11,"get_level","","Returns the layer index.",191],[11,"get_width","","",192],[11,"get_height","","",192],[11,"get_depth","","",192],[11,"get_array_size","","",192],[6,"Id","",""],[11,"get_id","","",192],[11,"fmt","","",192],[11,"into_uniform_value","glium::uniforms","",68],[11,"new","glium::texture","Builds a new texture by uploading data.",192],[11,"with_mipmaps","","Builds a new texture by uploading data.",192],[11,"with_format","","Builds a new texture with a specific format.",192],[11,"new_empty","","Creates an empty texture.",192],[11,"empty","","Creates an empty texture.",192],[11,"empty_if_supported","","Creates an empty texture.",192],[11,"empty_with_format","","Creates an empty texture with a specific format.",192],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",192],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",192],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",192],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",192],[11,"layer","","Access a single layer of this texture.",192],[11,"clone","","",193],[11,"get_texture","","Returns the corresponding texture.",193],[11,"get_layer","","Returns the layer index.",193],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",193],[11,"mipmap","","Access a single mipmap level of this layer.",193],[11,"main_level","","Access the main mipmap level of this layer.",193],[11,"clone","","",194],[11,"get_texture","","Returns the corresponding texture.",194],[11,"get_level","","Returns the layer index.",194],[11,"get_layer","","Returns the layer index.",194],[11,"get_width","","",195],[11,"get_height","","",195],[11,"get_depth","","",195],[11,"get_array_size","","",195],[6,"Id","",""],[11,"get_id","","",195],[11,"fmt","","",195],[11,"into_uniform_value","glium::uniforms","",68],[11,"new","glium::texture","Builds a new texture by uploading data.",195],[11,"with_mipmaps","","Builds a new texture by uploading data.",195],[11,"with_format","","Builds a new texture with a specific format.",195],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",195],[11,"layer","","Access a single layer of this texture.",195],[11,"clone","","",196],[11,"get_texture","","Returns the corresponding texture.",196],[11,"get_layer","","Returns the layer index.",196],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",196],[11,"mipmap","","Access a single mipmap level of this layer.",196],[11,"main_level","","Access the main mipmap level of this layer.",196],[11,"clone","","",197],[11,"get_texture","","Returns the corresponding texture.",197],[11,"get_level","","Returns the layer index.",197],[11,"get_layer","","Returns the layer index.",197],[11,"get_width","","",198],[11,"get_height","","",198],[11,"get_depth","","",198],[11,"get_array_size","","",198],[6,"Id","",""],[11,"get_id","","",198],[11,"fmt","","",198],[11,"into_uniform_value","glium::uniforms","",68],[11,"new","glium::texture","Builds a new texture by uploading data.",198],[11,"new_if_supported","","Builds a new texture by uploading data.",198],[11,"with_mipmaps","","Builds a new texture by uploading data.",198],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",198],[11,"with_format","","Builds a new texture with a specific format.",198],[11,"with_format_if_supported","","Builds a new texture with a specific format.",198],[11,"new_empty","","Creates an empty texture.",198],[11,"empty","","Creates an empty texture.",198],[11,"empty_if_supported","","Creates an empty texture.",198],[11,"empty_with_format","","Creates an empty texture with a specific format.",198],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",198],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",198],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",198],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",198],[11,"layer","","Access a single layer of this texture.",198],[11,"clone","","",199],[11,"get_texture","","Returns the corresponding texture.",199],[11,"get_layer","","Returns the layer index.",199],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",199],[11,"mipmap","","Access a single mipmap level of this layer.",199],[11,"main_level","","Access the main mipmap level of this layer.",199],[11,"clone","","",200],[11,"get_texture","","Returns the corresponding texture.",200],[11,"get_level","","Returns the layer index.",200],[11,"get_layer","","Returns the layer index.",200],[11,"get_width","","",201],[11,"get_height","","",201],[11,"get_depth","","",201],[11,"get_array_size","","",201],[6,"Id","",""],[11,"get_id","","",201],[11,"fmt","","",201],[11,"into_uniform_value","glium::uniforms","",68],[11,"new","glium::texture","Builds a new texture by uploading data.",201],[11,"new_if_supported","","Builds a new texture by uploading data.",201],[11,"with_mipmaps","","Builds a new texture by uploading data.",201],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",201],[11,"with_format","","Builds a new texture with a specific format.",201],[11,"with_format_if_supported","","Builds a new texture with a specific format.",201],[11,"new_empty","","Creates an empty texture.",201],[11,"empty","","Creates an empty texture.",201],[11,"empty_if_supported","","Creates an empty texture.",201],[11,"empty_with_format","","Creates an empty texture with a specific format.",201],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",201],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",201],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",201],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",201],[11,"layer","","Access a single layer of this texture.",201],[11,"clone","","",202],[11,"get_texture","","Returns the corresponding texture.",202],[11,"get_layer","","Returns the layer index.",202],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",202],[11,"mipmap","","Access a single mipmap level of this layer.",202],[11,"main_level","","Access the main mipmap level of this layer.",202],[11,"clone","","",203],[11,"get_texture","","Returns the corresponding texture.",203],[11,"get_level","","Returns the layer index.",203],[11,"get_layer","","Returns the layer index.",203],[11,"get_width","","",204],[11,"get_height","","",204],[11,"get_depth","","",204],[11,"get_array_size","","",204],[6,"Id","",""],[11,"get_id","","",204],[11,"fmt","","",204],[11,"into_uniform_value","glium::uniforms","",68],[11,"new","glium::texture","Builds a new texture by uploading data.",204],[11,"new_if_supported","","Builds a new texture by uploading data.",204],[11,"with_mipmaps","","Builds a new texture by uploading data.",204],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",204],[11,"with_format","","Builds a new texture with a specific format.",204],[11,"with_format_if_supported","","Builds a new texture with a specific format.",204],[11,"new_empty","","Creates an empty texture.",204],[11,"empty","","Creates an empty texture.",204],[11,"empty_if_supported","","Creates an empty texture.",204],[11,"empty_with_format","","Creates an empty texture with a specific format.",204],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",204],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",204],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",204],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",204],[11,"layer","","Access a single layer of this texture.",204],[11,"clone","","",205],[11,"get_texture","","Returns the corresponding texture.",205],[11,"get_layer","","Returns the layer index.",205],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",205],[11,"mipmap","","Access a single mipmap level of this layer.",205],[11,"main_level","","Access the main mipmap level of this layer.",205],[11,"clone","","",206],[11,"get_texture","","Returns the corresponding texture.",206],[11,"get_level","","Returns the layer index.",206],[11,"get_layer","","Returns the layer index.",206],[11,"get_width","","",207],[11,"get_height","","",207],[11,"get_depth","","",207],[11,"get_array_size","","",207],[6,"Id","",""],[11,"get_id","","",207],[11,"fmt","","",207],[11,"new","","Builds a new texture by uploading data.",207],[11,"new_if_supported","","Builds a new texture by uploading data.",207],[11,"with_mipmaps","","Builds a new texture by uploading data.",207],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",207],[11,"with_format","","Builds a new texture with a specific format.",207],[11,"with_format_if_supported","","Builds a new texture with a specific format.",207],[11,"new_empty","","Creates an empty texture.",207],[11,"empty","","Creates an empty texture.",207],[11,"empty_if_supported","","Creates an empty texture.",207],[11,"empty_with_format","","Creates an empty texture with a specific format.",207],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",207],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",207],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",207],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",207],[11,"layer","","Access a single layer of this texture.",207],[11,"clone","","",208],[11,"get_texture","","Returns the corresponding texture.",208],[11,"get_layer","","Returns the layer index.",208],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",208],[11,"mipmap","","Access a single mipmap level of this layer.",208],[11,"main_level","","Access the main mipmap level of this layer.",208],[11,"clone","","",209],[11,"get_texture","","Returns the corresponding texture.",209],[11,"get_level","","Returns the layer index.",209],[11,"get_layer","","Returns the layer index.",209],[11,"get_width","","",210],[11,"get_height","","",210],[11,"get_depth","","",210],[11,"get_array_size","","",210],[6,"Id","",""],[11,"get_id","","",210],[11,"fmt","","",210],[11,"new","","Builds a new texture by uploading data.",210],[11,"new_if_supported","","Builds a new texture by uploading data.",210],[11,"with_mipmaps","","Builds a new texture by uploading data.",210],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",210],[11,"with_format","","Builds a new texture with a specific format.",210],[11,"with_format_if_supported","","Builds a new texture with a specific format.",210],[11,"new_empty","","Creates an empty texture.",210],[11,"empty","","Creates an empty texture.",210],[11,"empty_if_supported","","Creates an empty texture.",210],[11,"empty_with_format","","Creates an empty texture with a specific format.",210],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",210],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",210],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",210],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",210],[11,"layer","","Access a single layer of this texture.",210],[11,"clone","","",211],[11,"get_texture","","Returns the corresponding texture.",211],[11,"get_layer","","Returns the layer index.",211],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",211],[11,"mipmap","","Access a single mipmap level of this layer.",211],[11,"main_level","","Access the main mipmap level of this layer.",211],[11,"clone","","",212],[11,"get_texture","","Returns the corresponding texture.",212],[11,"get_level","","Returns the layer index.",212],[11,"get_layer","","Returns the layer index.",212],[11,"get_width","","",213],[11,"get_height","","",213],[11,"get_depth","","",213],[11,"get_array_size","","",213],[6,"Id","",""],[11,"get_id","","",213],[11,"fmt","","",213],[11,"into_uniform_value","glium::uniforms","",68],[11,"new","glium::texture","Builds a new texture by uploading data.",213],[11,"new_if_supported","","Builds a new texture by uploading data.",213],[11,"with_mipmaps","","Builds a new texture by uploading data.",213],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",213],[11,"with_format","","Builds a new texture with a specific format.",213],[11,"with_format_if_supported","","Builds a new texture with a specific format.",213],[11,"new_empty","","Creates an empty texture.",213],[11,"empty","","Creates an empty texture.",213],[11,"empty_if_supported","","Creates an empty texture.",213],[11,"empty_with_format","","Creates an empty texture with a specific format.",213],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",213],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",213],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",213],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",213],[11,"layer","","Access a single layer of this texture.",213],[11,"clone","","",214],[11,"get_texture","","Returns the corresponding texture.",214],[11,"get_layer","","Returns the layer index.",214],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",214],[11,"mipmap","","Access a single mipmap level of this layer.",214],[11,"main_level","","Access the main mipmap level of this layer.",214],[11,"clone","","",215],[11,"get_texture","","Returns the corresponding texture.",215],[11,"get_level","","Returns the layer index.",215],[11,"get_layer","","Returns the layer index.",215],[11,"get_width","","",216],[11,"get_height","","",216],[11,"get_depth","","",216],[11,"get_array_size","","",216],[6,"Id","",""],[11,"get_id","","",216],[11,"fmt","","",216],[11,"into_uniform_value","glium::uniforms","",68],[11,"new","glium::texture","Builds a new texture by uploading data.",216],[11,"new_if_supported","","Builds a new texture by uploading data.",216],[11,"with_mipmaps","","Builds a new texture by uploading data.",216],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",216],[11,"with_format","","Builds a new texture with a specific format.",216],[11,"with_format_if_supported","","Builds a new texture with a specific format.",216],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",216],[11,"layer","","Access a single layer of this texture.",216],[11,"clone","","",217],[11,"get_texture","","Returns the corresponding texture.",217],[11,"get_layer","","Returns the layer index.",217],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",217],[11,"mipmap","","Access a single mipmap level of this layer.",217],[11,"main_level","","Access the main mipmap level of this layer.",217],[11,"clone","","",218],[11,"get_texture","","Returns the corresponding texture.",218],[11,"get_level","","Returns the layer index.",218],[11,"get_layer","","Returns the layer index.",218],[11,"get_width","","",219],[11,"get_height","","",219],[11,"get_depth","","",219],[11,"get_array_size","","",219],[6,"Id","",""],[11,"get_id","","",219],[11,"fmt","","",219],[11,"into_uniform_value","glium::uniforms","",68],[11,"new","glium::texture","Builds a new texture by uploading data.",219],[11,"new_if_supported","","Builds a new texture by uploading data.",219],[11,"with_mipmaps","","Builds a new texture by uploading data.",219],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",219],[11,"with_format","","Builds a new texture with a specific format.",219],[11,"with_format_if_supported","","Builds a new texture with a specific format.",219],[11,"new_empty","","Creates an empty texture.",219],[11,"empty","","Creates an empty texture.",219],[11,"empty_if_supported","","Creates an empty texture.",219],[11,"empty_with_format","","Creates an empty texture with a specific format.",219],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",219],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",219],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",219],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",219],[11,"layer","","Access a single layer of this texture.",219],[11,"clone","","",220],[11,"get_texture","","Returns the corresponding texture.",220],[11,"get_layer","","Returns the layer index.",220],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",220],[11,"mipmap","","Access a single mipmap level of this layer.",220],[11,"main_level","","Access the main mipmap level of this layer.",220],[11,"clone","","",221],[11,"get_texture","","Returns the corresponding texture.",221],[11,"get_level","","Returns the layer index.",221],[11,"get_layer","","Returns the layer index.",221],[11,"get_width","","",222],[11,"get_height","","",222],[11,"get_depth","","",222],[11,"get_array_size","","",222],[6,"Id","",""],[11,"get_id","","",222],[11,"fmt","","",222],[11,"into_uniform_value","glium::uniforms","",68],[11,"new","glium::texture","Builds a new texture by uploading data.",222],[11,"new_if_supported","","Builds a new texture by uploading data.",222],[11,"with_mipmaps","","Builds a new texture by uploading data.",222],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",222],[11,"with_format","","Builds a new texture with a specific format.",222],[11,"with_format_if_supported","","Builds a new texture with a specific format.",222],[11,"new_empty","","Creates an empty texture.",222],[11,"empty","","Creates an empty texture.",222],[11,"empty_if_supported","","Creates an empty texture.",222],[11,"empty_with_format","","Creates an empty texture with a specific format.",222],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",222],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",222],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",222],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",222],[11,"layer","","Access a single layer of this texture.",222],[11,"clone","","",223],[11,"get_texture","","Returns the corresponding texture.",223],[11,"get_layer","","Returns the layer index.",223],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",223],[11,"mipmap","","Access a single mipmap level of this layer.",223],[11,"main_level","","Access the main mipmap level of this layer.",223],[11,"clone","","",224],[11,"get_texture","","Returns the corresponding texture.",224],[11,"get_level","","Returns the layer index.",224],[11,"get_layer","","Returns the layer index.",224],[11,"get_width","","",225],[11,"get_height","","",225],[11,"get_depth","","",225],[11,"get_array_size","","",225],[6,"Id","",""],[11,"get_id","","",225],[11,"fmt","","",225],[11,"into_uniform_value","glium::uniforms","",68],[11,"new","glium::texture","Builds a new texture by uploading data.",225],[11,"new_if_supported","","Builds a new texture by uploading data.",225],[11,"with_mipmaps","","Builds a new texture by uploading data.",225],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",225],[11,"with_format","","Builds a new texture with a specific format.",225],[11,"with_format_if_supported","","Builds a new texture with a specific format.",225],[11,"new_empty","","Creates an empty texture.",225],[11,"empty","","Creates an empty texture.",225],[11,"empty_if_supported","","Creates an empty texture.",225],[11,"empty_with_format","","Creates an empty texture with a specific format.",225],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",225],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",225],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",225],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",225],[11,"layer","","Access a single layer of this texture.",225],[11,"clone","","",226],[11,"get_texture","","Returns the corresponding texture.",226],[11,"get_layer","","Returns the layer index.",226],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",226],[11,"mipmap","","Access a single mipmap level of this layer.",226],[11,"main_level","","Access the main mipmap level of this layer.",226],[11,"clone","","",227],[11,"get_texture","","Returns the corresponding texture.",227],[11,"get_level","","Returns the layer index.",227],[11,"get_layer","","Returns the layer index.",227],[11,"get_width","","",228],[11,"get_height","","",228],[11,"get_depth","","",228],[11,"get_array_size","","",228],[6,"Id","",""],[11,"get_id","","",228],[11,"fmt","","",228],[11,"new","","Builds a new texture by uploading data.",228],[11,"new_if_supported","","Builds a new texture by uploading data.",228],[11,"with_mipmaps","","Builds a new texture by uploading data.",228],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",228],[11,"with_format","","Builds a new texture with a specific format.",228],[11,"with_format_if_supported","","Builds a new texture with a specific format.",228],[11,"new_empty","","Creates an empty texture.",228],[11,"empty","","Creates an empty texture.",228],[11,"empty_if_supported","","Creates an empty texture.",228],[11,"empty_with_format","","Creates an empty texture with a specific format.",228],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",228],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",228],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",228],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",228],[11,"layer","","Access a single layer of this texture.",228],[11,"clone","","",229],[11,"get_texture","","Returns the corresponding texture.",229],[11,"get_layer","","Returns the layer index.",229],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",229],[11,"mipmap","","Access a single mipmap level of this layer.",229],[11,"main_level","","Access the main mipmap level of this layer.",229],[11,"clone","","",230],[11,"get_texture","","Returns the corresponding texture.",230],[11,"get_level","","Returns the layer index.",230],[11,"get_layer","","Returns the layer index.",230],[11,"get_width","","",231],[11,"get_height","","",231],[11,"get_depth","","",231],[11,"get_array_size","","",231],[6,"Id","",""],[11,"get_id","","",231],[11,"fmt","","",231],[11,"new","","Builds a new texture by uploading data.",231],[11,"new_if_supported","","Builds a new texture by uploading data.",231],[11,"with_mipmaps","","Builds a new texture by uploading data.",231],[11,"with_mipmaps_if_supported","","Builds a new texture by uploading data.",231],[11,"with_format","","Builds a new texture with a specific format.",231],[11,"with_format_if_supported","","Builds a new texture with a specific format.",231],[11,"new_empty","","Creates an empty texture.",231],[11,"empty","","Creates an empty texture.",231],[11,"empty_if_supported","","Creates an empty texture.",231],[11,"empty_with_format","","Creates an empty texture with a specific format.",231],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",231],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",231],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",231],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",231],[11,"layer","","Access a single layer of this texture.",231],[11,"clone","","",232],[11,"get_texture","","Returns the corresponding texture.",232],[11,"get_layer","","Returns the layer index.",232],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",232],[11,"mipmap","","Access a single mipmap level of this layer.",232],[11,"main_level","","Access the main mipmap level of this layer.",232],[11,"clone","","",233],[11,"get_texture","","Returns the corresponding texture.",233],[11,"get_level","","Returns the layer index.",233],[11,"get_layer","","Returns the layer index.",233],[11,"get_width","","",234],[11,"get_height","","",234],[11,"get_depth","","",234],[11,"get_array_size","","",234],[6,"Id","",""],[11,"get_id","","",234],[11,"fmt","","",234],[11,"into_uniform_value","glium::uniforms","",68],[11,"new_empty","glium::texture","Creates an empty texture.",234],[11,"empty","","Creates an empty texture.",234],[11,"empty_if_supported","","Creates an empty texture.",234],[11,"empty_with_format","","Creates an empty texture with a specific format.",234],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",234],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",234],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",234],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",234],[11,"mipmap","","Access a single mipmap level of this texture.",234],[11,"main_level","","Access the main mipmap level of this texture.",234],[11,"clone","","",235],[11,"get_texture","","Returns the corresponding texture.",235],[11,"get_level","","Returns the layer index.",235],[11,"get_width","","",236],[11,"get_height","","",236],[11,"get_depth","","",236],[11,"get_array_size","","",236],[6,"Id","",""],[11,"get_id","","",236],[11,"fmt","","",236],[11,"into_uniform_value","glium::uniforms","",68],[11,"new_empty","glium::texture","Creates an empty texture.",236],[11,"empty","","Creates an empty texture.",236],[11,"empty_if_supported","","Creates an empty texture.",236],[11,"empty_with_format","","Creates an empty texture with a specific format.",236],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",236],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",236],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",236],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",236],[11,"mipmap","","Access a single mipmap level of this texture.",236],[11,"main_level","","Access the main mipmap level of this texture.",236],[11,"clone","","",237],[11,"get_texture","","Returns the corresponding texture.",237],[11,"get_level","","Returns the layer index.",237],[11,"get_width","","",238],[11,"get_height","","",238],[11,"get_depth","","",238],[11,"get_array_size","","",238],[6,"Id","",""],[11,"get_id","","",238],[11,"fmt","","",238],[11,"into_uniform_value","glium::uniforms","",68],[11,"new_empty","glium::texture","Creates an empty texture.",238],[11,"empty","","Creates an empty texture.",238],[11,"empty_if_supported","","Creates an empty texture.",238],[11,"empty_with_format","","Creates an empty texture with a specific format.",238],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",238],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",238],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",238],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",238],[11,"mipmap","","Access a single mipmap level of this texture.",238],[11,"main_level","","Access the main mipmap level of this texture.",238],[11,"clone","","",239],[11,"get_texture","","Returns the corresponding texture.",239],[11,"get_level","","Returns the layer index.",239],[11,"get_width","","",240],[11,"get_height","","",240],[11,"get_depth","","",240],[11,"get_array_size","","",240],[6,"Id","",""],[11,"get_id","","",240],[11,"fmt","","",240],[11,"into_uniform_value","glium::uniforms","",68],[11,"new_empty","glium::texture","Creates an empty texture.",240],[11,"empty","","Creates an empty texture.",240],[11,"empty_if_supported","","Creates an empty texture.",240],[11,"empty_with_format","","Creates an empty texture with a specific format.",240],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",240],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",240],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",240],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",240],[11,"mipmap","","Access a single mipmap level of this texture.",240],[11,"main_level","","Access the main mipmap level of this texture.",240],[11,"clone","","",241],[11,"get_texture","","Returns the corresponding texture.",241],[11,"get_level","","Returns the layer index.",241],[11,"get_width","","",242],[11,"get_height","","",242],[11,"get_depth","","",242],[11,"get_array_size","","",242],[6,"Id","",""],[11,"get_id","","",242],[11,"fmt","","",242],[11,"new_empty","","Creates an empty texture.",242],[11,"empty","","Creates an empty texture.",242],[11,"empty_if_supported","","Creates an empty texture.",242],[11,"empty_with_format","","Creates an empty texture with a specific format.",242],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",242],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",242],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",242],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",242],[11,"mipmap","","Access a single mipmap level of this texture.",242],[11,"main_level","","Access the main mipmap level of this texture.",242],[11,"clone","","",243],[11,"get_texture","","Returns the corresponding texture.",243],[11,"get_level","","Returns the layer index.",243],[11,"get_width","","",244],[11,"get_height","","",244],[11,"get_depth","","",244],[11,"get_array_size","","",244],[6,"Id","",""],[11,"get_id","","",244],[11,"fmt","","",244],[11,"new_empty","","Creates an empty texture.",244],[11,"empty","","Creates an empty texture.",244],[11,"empty_if_supported","","Creates an empty texture.",244],[11,"empty_with_format","","Creates an empty texture with a specific format.",244],[11,"empty_with_format_if_supported","","Creates an empty texture with a specific format.",244],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",244],[11,"empty_with_mipmaps_if_supported","","Creates an empty texture. Specifies whether is has mipmaps.",244],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",244],[11,"mipmap","","Access a single mipmap level of this texture.",244],[11,"main_level","","Access the main mipmap level of this texture.",244],[11,"clone","","",245],[11,"get_texture","","Returns the corresponding texture.",245],[11,"get_level","","Returns the layer index.",245],[6,"Data","",""],[11,"into_raw","collections::vec","",246],[6,"Data","glium::texture",""],[11,"get_preferred_formats","collections::vec","",246],[11,"from_raw","","",246],[6,"Data","glium::texture",""],[6,"Data","",""],[11,"into_raw","collections::vec","",246],[6,"Data","glium::texture",""],[11,"get_preferred_formats","collections::vec","",246],[11,"from_raw","","",246],[6,"Data","glium::texture",""],[11,"into_raw","image::buffer","",247],[6,"Data","glium::texture",""],[11,"get_preferred_formats","image::buffer","",247],[11,"from_raw","","",247],[6,"Data","glium::texture",""],[11,"into_raw","image::dynimage","",248],[6,"Data","glium::texture",""],[11,"get_preferred_formats","image::dynimage","",248],[11,"from_raw","","",248],[6,"Data","glium::texture",""],[11,"into_raw","collections::vec","",246],[6,"Data","glium::texture",""],[11,"get_preferred_formats","collections::vec","",246],[11,"from_raw","","",246],[11,"clear","glium::texture","",249],[11,"get_dimensions","","",249],[11,"get_depth_buffer_bits","","",249],[11,"get_stencil_buffer_bits","","",249],[11,"draw","","",249],[11,"get_blit_helper","","",249],[11,"eq","","",124],[11,"ne","","",124],[11,"clone","","",124],[11,"fmt","","",124],[11,"eq","","",125],[11,"ne","","",125],[11,"clone","","",125],[11,"fmt","","",125],[0,"index_buffer","glium",""],[11,"next","","",250],[11,"next","","",251],[11,"eq","","",3],[11,"ne","","",3],[11,"fmt","","",3],[11,"clone","","",3],[11,"eq","","",4],[11,"ne","","",4],[11,"fmt","","",4],[11,"clone","","",4],[11,"eq","","",5],[11,"ne","","",5],[11,"fmt","","",5],[11,"clone","","",5],[11,"eq","","",6],[11,"ne","","",6],[11,"fmt","","",6],[11,"clone","","",6],[11,"requires_depth_buffer","","Returns true if the function requires a depth buffer to be used.",6],[11,"eq","","",7],[11,"ne","","",7],[11,"fmt","","",7],[11,"clone","","",7],[11,"eq","","",0],[11,"ne","","",0],[11,"fmt","","",0],[11,"clone","","",0],[11,"default","","",0],[11,"new","","Builds a new `SyncFence` that is injected in the server.",252],[11,"new_if_supported","","Builds a new `SyncFence` that is injected in the server.",252],[11,"wait","","Blocks until the operation has finished on the server.",252],[11,"drop","","",252],[11,"into_sync_fence","","Turns the prototype into a real fence.",253],[11,"drop","","",253],[11,"eq","","",254],[11,"ne","","",254],[11,"clone","","",254],[11,"fmt","","",254],[11,"eq","","",9],[11,"ne","","",9],[11,"clone","","",9],[11,"fmt","","",9],[11,"partial_cmp","","",254],[6,"VertexFormat","","Describes the layout of each vertex in a vertex buffer."],[8,"GlObject","","Trait for objects that are OpenGL objects."],[16,"Id","glium::GlObject",""],[10,"get_id","glium","Returns the id of the object.",255],[8,"Surface","","Object that can be drawn upon."],[10,"clear","","Clears some attachments of the target.",256],[11,"clear_color","","Clears the color attachment of the target.",256],[11,"clear_depth","","Clears the depth attachment of the target.",256],[11,"clear_stencil","","Clears the stencil attachment of the target.",256],[11,"clear_color_and_depth","","Clears the color and depth attachments of the target.",256],[11,"clear_color_and_stencil","","Clears the color and stencil attachments of the target.",256],[11,"clear_depth_and_stencil","","Clears the depth and stencil attachments of the target.",256],[11,"clear_all","","Clears the color, depth and stencil attachments of the target.",256],[10,"get_dimensions","","Returns the dimensions in pixels of the target.",256],[10,"get_depth_buffer_bits","","Returns the number of bits of each pixel of the depth buffer.",256],[11,"has_depth_buffer","","Returns true if the surface has a depth buffer available.",256],[10,"get_stencil_buffer_bits","","Returns the number of bits of each pixel of the stencil buffer.",256],[11,"has_stencil_buffer","","Returns true if the surface has a stencil buffer available.",256],[10,"draw","","Draws.",256],[10,"get_blit_helper","","Returns an opaque type that is used by the implementation of blit functions.",256],[11,"blit_color","","Copies a rectangle of pixels from this surface to another surface.",256],[11,"blit_whole_color_to","","Copies the entire surface to a target surface. See `blit_color`.",256],[11,"fill","","Copies the entire surface to the entire target. See `blit_color`.",256],[8,"DisplayBuild","","Objects that can build a `Display` object."],[10,"build_glium","","Build a context and a `Display` to draw on it.",257],[10,"rebuild_glium","","Changes the settings of an existing `Display`.",257],[11,"eq","","",1],[11,"ne","","",1],[11,"default","","",1],[11,"clone","","",1],[11,"fmt","","",1],[11,"eq","","",2],[11,"ne","","",2],[11,"default","","",2],[11,"clone","","",2],[11,"fmt","","",2],[11,"fmt","","",10],[11,"clone","","",10],[11,"fmt","","",10],[11,"finish","","Stop drawing, and swap the buffers.",258],[11,"clear","","",258],[11,"get_dimensions","","",258],[11,"get_depth_buffer_bits","","",258],[11,"get_stencil_buffer_bits","","",258],[11,"draw","","",258],[11,"get_blit_helper","","",258],[11,"drop","","",258],[11,"eq","","",11],[11,"ne","","",11],[11,"fmt","","",11],[11,"clone","","",11],[11,"fmt","","",11],[11,"description","","",11],[11,"cause","","",11],[11,"from_error","","",11],[11,"build_glium","glutin::window","",259],[11,"rebuild_glium","","",259],[11,"build_glium","glutin::headless","",260],[11,"rebuild_glium","","",260],[11,"clone","glium","",261],[11,"poll_events","","Reads all events received by the window.",261],[11,"wait_events","","Reads all events received by the window.",261],[11,"get_window","","Returns the underlying window, or `None` if glium uses a headless context.",261],[11,"get_framebuffer_dimensions","","Returns the dimensions of the main framebuffer.",261],[11,"get_opengl_version","","Returns the OpenGL version of the current context.",261],[11,"draw","","Start drawing on the backbuffer.",261],[11,"get_max_anisotropy_support","","Returns the maximum value that can be used for anisotropic filtering, or `None`\nif the hardware doesn't support it.",261],[11,"get_max_viewport_dimensions","","Returns the maximum dimensions of the viewport.",261],[11,"release_shader_compiler","","Releases the shader compiler, indicating that no new programs will be created for a while.",261],[11,"get_free_video_memory","","Returns an estimate of the amount of video memory available in bytes.",261],[11,"read_front_buffer","","Reads the content of the front buffer.",261],[11,"exec_in_context","","Execute an arbitrary closure with the OpenGL context active. Useful if another\ncomponent needs to directly manipulate OpenGL state.",261],[11,"assert_no_error","","Asserts that there are no OpenGL errors pending.",261],[11,"synchronize","","Waits until all the previous commands have finished being executed.",261],[14,"uniform!","","Returns an implementation-defined type which implements the `Uniform` trait."],[14,"implement_vertex!","","Implements the `glium::vertex::Vertex` trait for the given type."]],"paths":[[3,"DrawParameters"],[3,"Rect"],[3,"BlitTarget"],[4,"BlendingFunction"],[4,"LinearBlendingFactor"],[4,"BackfaceCullingMode"],[4,"DepthTest"],[4,"PolygonMode"],[4,"ProgramCreationError"],[4,"Api"],[4,"DrawError"],[4,"GliumCreationError"],[4,"Severity"],[4,"Source"],[4,"MessageType"],[3,"TimestampQuery"],[4,"ColorAttachment"],[4,"DepthAttachment"],[4,"StencilAttachment"],[4,"DepthStencilAttachment"],[8,"ToColorAttachment"],[8,"ToDepthAttachment"],[8,"ToStencilAttachment"],[8,"ToDepthStencilAttachment"],[3,"SimpleFrameBuffer"],[3,"MultiOutputFrameBuffer"],[4,"IndicesSource"],[4,"PrimitiveType"],[4,"IndexType"],[3,"IndexBuffer"],[3,"PointsList"],[3,"LinesList"],[3,"LinesListAdjacency"],[3,"LineStrip"],[3,"LineStripAdjacency"],[3,"TrianglesList"],[3,"TrianglesListAdjacency"],[3,"TriangleStrip"],[3,"TriangleStripAdjacency"],[3,"TriangleFan"],[3,"Patches"],[8,"ToIndicesSource"],[8,"Index"],[8,"IntoIndexBuffer"],[3,"NoIndices"],[3,"PixelBuffer"],[3,"Uniform"],[3,"UniformBlock"],[3,"UniformBlockMember"],[3,"Attribute"],[3,"TransformFeedbackVarying"],[3,"SourceCode"],[3,"Binary"],[4,"TransformFeedbackMode"],[4,"ProgramCreationInput"],[3,"Program"],[8,"IntoProgramCreationInput"],[3,"RenderBuffer"],[3,"DepthRenderBuffer"],[3,"StencilRenderBuffer"],[3,"DepthStencilRenderBuffer"],[3,"SamplerBehavior"],[4,"SamplerWrapFunction"],[4,"MagnifySamplerFilter"],[4,"MinifySamplerFilter"],[4,"UniformValue"],[4,"UniformType"],[3,"UniformBuffer"],[3,"Sampler"],[3,"EmptyUniforms"],[3,"UniformsStorage"],[3,"Mat2"],[3,"Mat3"],[3,"Mat4"],[3,"Ortho3"],[3,"OrthoMat3"],[3,"Persp3"],[3,"PerspMat3"],[3,"Pnt2"],[3,"Pnt3"],[3,"Pnt4"],[3,"Quat"],[3,"Rot2"],[3,"Rot3"],[3,"Rot4"],[3,"UnitQuat"],[3,"Vec2"],[3,"Vec3"],[3,"Vec4"],[3,"Matrix2"],[3,"Matrix3"],[3,"Matrix4"],[3,"Vector2"],[3,"Vector3"],[3,"Vector4"],[8,"IntoUniformValue"],[8,"Uniforms"],[8,"UniformBlock"],[4,"AttributeType"],[4,"VerticesSource"],[3,"VertexBuffer"],[3,"VertexBufferSlice"],[3,"VertexBufferAny"],[3,"VertexBufferAnySlice"],[3,"Mapping"],[3,"PerInstanceAttributesBuffer"],[3,"PerInstanceAttributesBufferAny"],[3,"PerInstanceAttributesBufferMapping"],[8,"IntoVerticesSource"],[8,"MultiVerticesSource"],[8,"Vertex"],[8,"Attribute"],[3,"RawImage1d"],[3,"RawImage2d"],[3,"RawImage3d"],[4,"ClientFormat"],[4,"TextureFormat"],[4,"UncompressedFloatFormat"],[4,"UncompressedIntFormat"],[4,"UncompressedUintFormat"],[4,"CompressedFormat"],[4,"DepthFormat"],[4,"DepthStencilFormat"],[4,"StencilFormat"],[4,"TextureCreationError"],[4,"TextureMaybeSupportedCreationError"],[3,"Rgb"],[3,"Rgba"],[3,"Luma"],[3,"LumaA"],[8,"PixelValue"],[8,"Texture"],[8,"Texture1dDataSource"],[8,"Texture1dDataSink"],[8,"Texture2dDataSource"],[8,"Texture2dDataSink"],[8,"Texture3dDataSource"],[8,"Texture3dDataSink"],[3,"Texture1d"],[3,"Texture1dMipmap"],[3,"CompressedTexture1d"],[3,"CompressedTexture1dMipmap"],[3,"IntegralTexture1d"],[3,"IntegralTexture1dMipmap"],[3,"UnsignedTexture1d"],[3,"UnsignedTexture1dMipmap"],[3,"DepthTexture1d"],[3,"DepthTexture1dMipmap"],[3,"StencilTexture1d"],[3,"StencilTexture1dMipmap"],[3,"DepthStencilTexture1d"],[3,"DepthStencilTexture1dMipmap"],[3,"Texture2d"],[3,"Texture2dMipmap"],[3,"CompressedTexture2d"],[3,"CompressedTexture2dMipmap"],[3,"IntegralTexture2d"],[3,"IntegralTexture2dMipmap"],[3,"UnsignedTexture2d"],[3,"UnsignedTexture2dMipmap"],[3,"DepthTexture2d"],[3,"DepthTexture2dMipmap"],[3,"StencilTexture2d"],[3,"StencilTexture2dMipmap"],[3,"DepthStencilTexture2d"],[3,"DepthStencilTexture2dMipmap"],[3,"Texture2dMultisample"],[3,"Texture2dMultisampleMipmap"],[3,"IntegralTexture2dMultisample"],[3,"IntegralTexture2dMultisampleMipmap"],[3,"UnsignedTexture2dMultisample"],[3,"UnsignedTexture2dMultisampleMipmap"],[3,"DepthTexture2dMultisample"],[3,"DepthTexture2dMultisampleMipmap"],[3,"StencilTexture2dMultisample"],[3,"StencilTexture2dMultisampleMipmap"],[3,"DepthStencilTexture2dMultisample"],[3,"DepthStencilTexture2dMultisampleMipmap"],[3,"Texture3d"],[3,"Texture3dMipmap"],[3,"CompressedTexture3d"],[3,"CompressedTexture3dMipmap"],[3,"IntegralTexture3d"],[3,"IntegralTexture3dMipmap"],[3,"UnsignedTexture3d"],[3,"UnsignedTexture3dMipmap"],[3,"DepthTexture3d"],[3,"DepthTexture3dMipmap"],[3,"StencilTexture3d"],[3,"StencilTexture3dMipmap"],[3,"DepthStencilTexture3d"],[3,"DepthStencilTexture3dMipmap"],[3,"Texture1dArray"],[3,"Texture1dArrayLayer"],[3,"Texture1dArrayMipmap"],[3,"CompressedTexture1dArray"],[3,"CompressedTexture1dArrayLayer"],[3,"CompressedTexture1dArrayMipmap"],[3,"IntegralTexture1dArray"],[3,"IntegralTexture1dArrayLayer"],[3,"IntegralTexture1dArrayMipmap"],[3,"UnsignedTexture1dArray"],[3,"UnsignedTexture1dArrayLayer"],[3,"UnsignedTexture1dArrayMipmap"],[3,"DepthTexture1dArray"],[3,"DepthTexture1dArrayLayer"],[3,"DepthTexture1dArrayMipmap"],[3,"StencilTexture1dArray"],[3,"StencilTexture1dArrayLayer"],[3,"StencilTexture1dArrayMipmap"],[3,"DepthStencilTexture1dArray"],[3,"DepthStencilTexture1dArrayLayer"],[3,"DepthStencilTexture1dArrayMipmap"],[3,"Texture2dArray"],[3,"Texture2dArrayLayer"],[3,"Texture2dArrayMipmap"],[3,"CompressedTexture2dArray"],[3,"CompressedTexture2dArrayLayer"],[3,"CompressedTexture2dArrayMipmap"],[3,"IntegralTexture2dArray"],[3,"IntegralTexture2dArrayLayer"],[3,"IntegralTexture2dArrayMipmap"],[3,"UnsignedTexture2dArray"],[3,"UnsignedTexture2dArrayLayer"],[3,"UnsignedTexture2dArrayMipmap"],[3,"DepthTexture2dArray"],[3,"DepthTexture2dArrayLayer"],[3,"DepthTexture2dArrayMipmap"],[3,"StencilTexture2dArray"],[3,"StencilTexture2dArrayLayer"],[3,"StencilTexture2dArrayMipmap"],[3,"DepthStencilTexture2dArray"],[3,"DepthStencilTexture2dArrayLayer"],[3,"DepthStencilTexture2dArrayMipmap"],[3,"Texture2dArrayMultisample"],[3,"Texture2dArrayMultisampleMipmap"],[3,"IntegralTexture2dArrayMultisample"],[3,"IntegralTexture2dArrayMultisampleMipmap"],[3,"UnsignedTexture2dArrayMultisample"],[3,"UnsignedTexture2dArrayMultisampleMipmap"],[3,"DepthTexture2dArrayMultisample"],[3,"DepthTexture2dArrayMultisampleMipmap"],[3,"StencilTexture2dArrayMultisample"],[3,"StencilTexture2dArrayMultisampleMipmap"],[3,"DepthStencilTexture2dArrayMultisample"],[3,"DepthStencilTexture2dArrayMultisampleMipmap"],[3,"Vec"],[3,"ImageBuffer"],[4,"DynamicImage"],[3,"TextureSurface"],[3,"PollEventsIter"],[3,"WaitEventsIter"],[3,"SyncFence"],[3,"LinearSyncFence"],[3,"Version"],[8,"GlObject"],[8,"Surface"],[8,"DisplayBuild"],[3,"Frame"],[3,"WindowBuilder"],[3,"HeadlessRendererBuilder"],[3,"Display"]]};
searchIndex['glutin'] = {"items":[[0,"","glutin","The purpose of this library is to provide an OpenGL context on as many\n platforms as possible."],[3,"HeadlessRendererBuilder","","Object that allows you to build headless contexts."],[3,"HeadlessContext","","Represents a headless OpenGL context."],[3,"WindowBuilder","","Object that allows you to build windows."],[3,"Window","","Represents an OpenGL context and the Window or environment around it."],[3,"WindowProxy","","Represents a thread safe subset of operations that can be called\non a window. This structure can be safely cloned and sent between\nthreads."],[3,"PollEventsIterator","","An iterator for the `poll_events` function."],[3,"WaitEventsIterator","","An iterator for the `wait_events` function."],[3,"AvailableMonitorsIter","","An iterator for the list of available monitors."],[3,"MonitorID","","Identifier for a monitor."],[3,"PixelFormat","","Describes a possible format. Unused."],[12,"red_bits","","",0],[12,"green_bits","","",0],[12,"blue_bits","","",0],[12,"alpha_bits","","",0],[12,"depth_bits","","",0],[12,"stencil_bits","","",0],[12,"stereoscopy","","",0],[12,"double_buffer","","",0],[12,"multisampling","","",0],[12,"srgb","","",0],[4,"Event","",""],[13,"Resized","","The size of the window has changed.",1],[13,"Moved","","The position of the window has changed.",1],[13,"Closed","","The window has been closed.",1],[13,"ReceivedCharacter","","The window received a unicode character.",1],[13,"Focused","","The window gained or lost focus.",1],[13,"KeyboardInput","","An event from the keyboard has been received.",1],[13,"MouseMoved","","The cursor has moved on the window.",1],[13,"MouseWheel","","A positive value indicates that the wheel was rotated forward, away from the user;\na negative value indicates that the wheel was rotated backward, toward the user.",1],[13,"MouseInput","","An event from the mouse has been received.",1],[13,"Awakened","","The event loop was woken up by another thread.",1],[4,"ElementState","",""],[13,"Pressed","","",2],[13,"Released","","",2],[4,"MouseButton","",""],[13,"Left","","",3],[13,"Right","","",3],[13,"Middle","","",3],[13,"Other","","",3],[4,"VirtualKeyCode","",""],[13,"Key1","","The '1' key over the letters.",4],[13,"Key2","","The '2' key over the letters.",4],[13,"Key3","","The '3' key over the letters.",4],[13,"Key4","","The '4' key over the letters.",4],[13,"Key5","","The '5' key over the letters.",4],[13,"Key6","","The '6' key over the letters.",4],[13,"Key7","","The '7' key over the letters.",4],[13,"Key8","","The '8' key over the letters.",4],[13,"Key9","","The '9' key over the letters.",4],[13,"Key0","","The '0' key over the 'O' and 'P' keys.",4],[13,"A","","",4],[13,"B","","",4],[13,"C","","",4],[13,"D","","",4],[13,"E","","",4],[13,"F","","",4],[13,"G","","",4],[13,"H","","",4],[13,"I","","",4],[13,"J","","",4],[13,"K","","",4],[13,"L","","",4],[13,"M","","",4],[13,"N","","",4],[13,"O","","",4],[13,"P","","",4],[13,"Q","","",4],[13,"R","","",4],[13,"S","","",4],[13,"T","","",4],[13,"U","","",4],[13,"V","","",4],[13,"W","","",4],[13,"X","","",4],[13,"Y","","",4],[13,"Z","","",4],[13,"Escape","","The Escape key, next to F1.",4],[13,"F1","","",4],[13,"F2","","",4],[13,"F3","","",4],[13,"F4","","",4],[13,"F5","","",4],[13,"F6","","",4],[13,"F7","","",4],[13,"F8","","",4],[13,"F9","","",4],[13,"F10","","",4],[13,"F11","","",4],[13,"F12","","",4],[13,"F13","","",4],[13,"F14","","",4],[13,"F15","","",4],[13,"Snapshot","","Print Screen/SysRq.",4],[13,"Scroll","","Scroll Lock.",4],[13,"Pause","","Pause/Break key, next to Scroll lock.",4],[13,"Insert","","`Insert`, next to Backspace.",4],[13,"Home","","",4],[13,"Delete","","",4],[13,"End","","",4],[13,"PageDown","","",4],[13,"PageUp","","",4],[13,"Left","","",4],[13,"Up","","",4],[13,"Right","","",4],[13,"Down","","",4],[13,"Back","","The Backspace key, right over Enter.",4],[13,"Return","","The Enter key.",4],[13,"Space","","The space bar.",4],[13,"Numlock","","",4],[13,"Numpad0","","",4],[13,"Numpad1","","",4],[13,"Numpad2","","",4],[13,"Numpad3","","",4],[13,"Numpad4","","",4],[13,"Numpad5","","",4],[13,"Numpad6","","",4],[13,"Numpad7","","",4],[13,"Numpad8","","",4],[13,"Numpad9","","",4],[13,"AbntC1","","",4],[13,"AbntC2","","",4],[13,"Add","","",4],[13,"Apostrophe","","",4],[13,"Apps","","",4],[13,"At","","",4],[13,"Ax","","",4],[13,"Backslash","","",4],[13,"Calculator","","",4],[13,"Capital","","",4],[13,"Colon","","",4],[13,"Comma","","",4],[13,"Convert","","",4],[13,"Decimal","","",4],[13,"Divide","","",4],[13,"Equals","","",4],[13,"Grave","","",4],[13,"Kana","","",4],[13,"Kanji","","",4],[13,"LAlt","","",4],[13,"LBracket","","",4],[13,"LControl","","",4],[13,"LMenu","","",4],[13,"LShift","","",4],[13,"LWin","","",4],[13,"Mail","","",4],[13,"MediaSelect","","",4],[13,"MediaStop","","",4],[13,"Minus","","",4],[13,"Multiply","","",4],[13,"Mute","","",4],[13,"MyComputer","","",4],[13,"NextTrack","","",4],[13,"NoConvert","","",4],[13,"NumpadComma","","",4],[13,"NumpadEnter","","",4],[13,"NumpadEquals","","",4],[13,"OEM102","","",4],[13,"Period","","",4],[13,"Playpause","","",4],[13,"Power","","",4],[13,"Prevtrack","","",4],[13,"RAlt","","",4],[13,"RBracket","","",4],[13,"RControl","","",4],[13,"RMenu","","",4],[13,"RShift","","",4],[13,"RWin","","",4],[13,"Semicolon","","",4],[13,"Slash","","",4],[13,"Sleep","","",4],[13,"Stop","","",4],[13,"Subtract","","",4],[13,"Sysrq","","",4],[13,"Tab","","",4],[13,"Underline","","",4],[13,"Unlabeled","","",4],[13,"VolumeDown","","",4],[13,"VolumeUp","","",4],[13,"Wake","","",4],[13,"Webback","","",4],[13,"WebFavorites","","",4],[13,"WebForward","","",4],[13,"WebHome","","",4],[13,"WebRefresh","","",4],[13,"WebSearch","","",4],[13,"WebStop","","",4],[13,"Yen","","",4],[4,"CreationError","","Error that can happen while creating a window or a headless renderer."],[13,"OsError","","",5],[13,"NotSupported","","",5],[4,"Api","","All APIs related to OpenGL that you can possibly get while using glutin."],[13,"OpenGl","","The classical OpenGL. Available on Windows, Linux, OS/X.",6],[13,"OpenGlEs","","OpenGL embedded system. Available on Linux, Android.",6],[13,"WebGl","","OpenGL for the web. Very similar to OpenGL ES.",6],[4,"GlRequest","","Describes the OpenGL API and version that are being requested when a context is created."],[13,"Latest","","Request the latest version of the \"best\" API of this platform.",7],[13,"Specific","","Request a specific version of a specific API.",7],[13,"GlThenGles","","If OpenGL is available, create an OpenGL context with the specified `opengl_version`.\nElse if OpenGL ES or WebGL is available, create a context with the\nspecified `opengles_version`.",7],[12,"opengl_version","glutin::GlRequest","The version to use for OpenGL.",7],[12,"opengles_version","","The version to use for OpenGL ES.",7],[4,"MouseCursor","glutin",""],[13,"Default","","The platform-dependent default cursor.",8],[13,"Crosshair","","A simple crosshair.",8],[13,"Hand","","A hand (often used to indicate links in web browsers).",8],[13,"Arrow","","Self explanatory.",8],[13,"Move","","Indicates something is to be moved.",8],[13,"Text","","Indicates text that may be selected or edited.",8],[13,"Wait","","Program busy indicator.",8],[13,"Help","","Help indicator (often rendered as a \"?\")",8],[13,"Progress","","Progress indicator. Shows that processing is being done. But in contrast\nwith \"Wait\" the user may still interact with the program. Often rendered\nas a spinning beach ball, or an arrow with a watch or hourglass.",8],[13,"NotAllowed","","Cursor showing that something cannot be done.",8],[13,"ContextMenu","","",8],[13,"NoneCursor","","",8],[13,"Cell","","",8],[13,"VerticalText","","",8],[13,"Alias","","",8],[13,"Copy","","",8],[13,"NoDrop","","",8],[13,"Grab","","",8],[13,"Grabbing","","",8],[13,"AllScroll","","",8],[13,"ZoomIn","","",8],[13,"ZoomOut","","",8],[13,"EResize","","Indicate that some edge is to be moved. For example, the 'SeResize' cursor\nis used when the movement starts from the south-east corner of the box.",8],[13,"NResize","","",8],[13,"NeResize","","",8],[13,"NwResize","","",8],[13,"SResize","","",8],[13,"SeResize","","",8],[13,"SwResize","","",8],[13,"WResize","","",8],[13,"EwResize","","",8],[13,"NsResize","","",8],[13,"NeswResize","","",8],[13,"NwseResize","","",8],[13,"ColResize","","",8],[13,"RowResize","","",8],[5,"get_available_monitors","","Returns the list of all available monitors."],[5,"get_primary_monitor","","Returns the primary monitor of the system."],[11,"fmt","","",1],[11,"clone","","",1],[11,"clone","","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"hash","","",2],[11,"fmt","","",2],[11,"clone","","",3],[11,"eq","","",3],[11,"ne","","",3],[11,"hash","","",3],[11,"fmt","","",3],[11,"clone","","",4],[11,"eq","","",4],[11,"ne","","",4],[11,"hash","","",4],[11,"fmt","","",4],[11,"new","","Initializes a new `HeadlessRendererBuilder` with default values.",9],[11,"with_gl_version","","THIS FUNCTION IS DEPRECATED",9],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",9],[11,"with_gl_debug_flag","","Sets the *debug* flag for the OpenGL context.",9],[11,"build","","Builds the headless context.",9],[11,"build_strict","","Builds the headless context.",9],[11,"make_current","","Creates a new OpenGL context\nSets the context as the current context.",10],[11,"get_proc_address","","Returns the address of an OpenGL function.",10],[11,"get_api","","Returns the API that is currently provided by this window.",10],[11,"set_window_resize_callback","","",10],[11,"get_proc_addr","","",10],[11,"new","","Initializes a new `WindowBuilder` with default values.",11],[11,"with_dimensions","","Requests the window to be of specific dimensions.",11],[11,"with_title","","Requests a specific title for the window.",11],[11,"with_fullscreen","","Requests fullscreen mode.",11],[11,"with_shared_lists","","The created window will share all its OpenGL objects with the window in the parameter.",11],[11,"with_gl_version","","THIS FUNCTION IS DEPRECATED",11],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",11],[11,"with_gl_debug_flag","","Sets the *debug* flag for the OpenGL context.",11],[11,"with_vsync","","Requests that the window has vsync enabled.",11],[11,"with_visibility","","Sets whether the window will be initially hidden or visible.",11],[11,"with_multisampling","","Sets the multisampling level to request.",11],[11,"with_depth_buffer","","Sets the number of bits in the depth buffer.",11],[11,"with_stencil_buffer","","Sets the number of bits in the stencil buffer.",11],[11,"with_pixel_format","","Sets the number of bits in the color buffer.",11],[11,"with_stereoscopy","","Request the backend to be stereoscopic.",11],[11,"build","","Builds the window.",11],[11,"build_strict","","Builds the window.",11],[11,"default","","",12],[11,"new","","Creates a new OpenGL context, and a Window for platforms where this is appropriate.",12],[11,"is_closed","","Returns true if the window has previously been closed by the user.",12],[11,"should_close","","Returns true if the window has previously been closed by the user.",12],[11,"set_title","","Modifies the title of the window.",12],[11,"show","","Shows the window if it was hidden.",12],[11,"hide","","Hides the window if it was visible.",12],[11,"get_position","","Returns the position of the top-left hand corner of the window relative to the\n top-left hand corner of the desktop.",12],[11,"set_position","","Modifies the position of the window.",12],[11,"get_inner_size","","Returns the size in pixels of the client area of the window.",12],[11,"get_outer_size","","Returns the size in pixels of the window.",12],[11,"set_inner_size","","Modifies the inner size of the window.",12],[11,"poll_events","","Returns an iterator that poll for the next event in the window's events queue.\nReturns `None` if there is no event in the queue.",12],[11,"wait_events","","Returns an iterator that returns events one by one, blocking if necessary until one is\navailable.",12],[11,"make_current","","Sets the context as the current context.",12],[11,"get_proc_address","","Returns the address of an OpenGL function.",12],[11,"swap_buffers","","Swaps the buffers in case of double or triple buffering.",12],[11,"platform_display","","Gets the native platform specific display for this window.\nThis is typically only required when integrating with\nother libraries that need this information.",12],[11,"platform_window","","Gets the native platform specific window handle. This is\ntypically only required when integrating with other libraries\nthat need this information.",12],[11,"get_api","","Returns the API that is currently provided by this window.",12],[11,"create_window_proxy","","Create a window proxy for this window, that can be freely\npassed to different threads.",12],[11,"set_window_resize_callback","","Sets a resize callback that is called by Mac (and potentially other\noperating systems) during resize operations. This can be used to repaint\nduring window resizing.",12],[11,"set_cursor","","Modifies the mouse cursor of the window.\nHas no effect on Android.",12],[11,"hidpi_factor","","Returns the ratio between the backing framebuffer resolution and the\nwindow size in screen pixels. This is typically one for a normal display\nand two for a retina display.",12],[11,"get_proc_addr","","",12],[11,"clone","","",13],[11,"wakeup_event_loop","","Triggers a blocked event loop to wake up. This is\ntypically called when another thread wants to wake\nup the blocked rendering thread to cause a refresh.",13],[11,"next","","",14],[11,"next","","",15],[11,"next","","",16],[11,"get_name","","Returns a human-readable name of the monitor.",17],[11,"get_dimensions","","Returns the number of pixels currently displayed on the monitor.",17],[6,"ScanCode","",""],[11,"fmt","","",1],[11,"clone","","",1],[11,"clone","","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"hash","","",2],[11,"fmt","","",2],[11,"clone","","",3],[11,"eq","","",3],[11,"ne","","",3],[11,"hash","","",3],[11,"fmt","","",3],[11,"clone","","",4],[11,"eq","","",4],[11,"ne","","",4],[11,"hash","","",4],[11,"fmt","","",4],[11,"eq","","",5],[11,"ne","","",5],[11,"fmt","","",5],[11,"clone","","",5],[11,"fmt","","",5],[11,"description","","",5],[11,"eq","","",6],[11,"ne","","",6],[11,"clone","","",6],[11,"fmt","","",6],[11,"clone","","",7],[11,"fmt","","",7],[11,"fmt","","",8]],"paths":[[3,"PixelFormat"],[4,"Event"],[4,"ElementState"],[4,"MouseButton"],[4,"VirtualKeyCode"],[4,"CreationError"],[4,"Api"],[4,"GlRequest"],[4,"MouseCursor"],[3,"HeadlessRendererBuilder"],[3,"HeadlessContext"],[3,"WindowBuilder"],[3,"Window"],[3,"WindowProxy"],[3,"PollEventsIterator"],[3,"WaitEventsIterator"],[3,"AvailableMonitorsIter"],[3,"MonitorID"]]};

searchIndex['image'] = {"items":[[0,"","image","This crate provides native rust implementations of\nImage encoders and decoders and basic image manipulation\nfunctions."],[3,"Luma","","Grayscale colors"],[3,"LumaA","","Grayscale colors + alpha channel"],[3,"Rgb","","RGB colors"],[3,"Rgba","","RGB colors + alpha channel"],[3,"SubImage","","A View into another image"],[3,"ImageBuffer","","Generic image buffer"],[3,"Pixels","","Immutable pixel iterator"],[3,"MutPixels","","Mutable pixel iterator"],[3,"Frame","","A single animation frame"],[3,"Frames","","Hold the frames of the animated image"],[4,"ColorType","","An enumeration over supported color types and their bit depths"],[13,"Gray","","Pixel is grayscale",0],[13,"RGB","","Pixel contains R, G and B channels",0],[13,"Palette","","Pixel is an index into a color palette",0],[13,"GrayA","","Pixel is grayscale with an alpha channel",0],[13,"RGBA","","Pixel is RGB with an alpha channel",0],[4,"ImageError","","An enumeration of Image Errors"],[13,"FormatError","","The Image is not formatted properly",1],[13,"DimensionError","","The Image's dimensions are either too small or too large",1],[13,"UnsupportedError","","The Decoder does not support this image format",1],[13,"UnsupportedColor","","The Decoder does not support this color type",1],[13,"NotEnoughData","","Not enough data was provided to the Decoder\nto decode the image",1],[13,"IoError","","An I/O Error occurred while decoding the image",1],[13,"ImageEnd","","The end of the image has been reached",1],[4,"ImageFormat","","An enumeration of supported image formats.\nNot all formats support both encoding and decoding."],[13,"PNG","","An Image in PNG Format",2],[13,"JPEG","","An Image in JPEG Format",2],[13,"GIF","","An Image in GIF Format",2],[13,"WEBP","","An Image in WEBP Format",2],[13,"PPM","","An Image in PPM Format",2],[13,"TIFF","","An Image in TIFF Format",2],[13,"TGA","","An Image in TGA Format",2],[4,"FilterType","","Available Sampling Filters"],[13,"Nearest","","Nearest Neighbor",3],[13,"Triangle","","Linear Filter",3],[13,"CatmullRom","","Cubic Filter",3],[13,"Gaussian","","Gaussian Filter",3],[13,"Lanczos3","","Lanczos with window 3",3],[4,"DynamicImage","","A Dynamic Image"],[13,"ImageLuma8","","Each pixel in this image is 8-bit Luma",4],[13,"ImageLumaA8","","Each pixel in this image is 8-bit Luma with alpha",4],[13,"ImageRgb8","","Each pixel in this image is 8-bit Rgb",4],[13,"ImageRgba8","","Each pixel in this image is 8-bit Rgb with alpha",4],[5,"open","","Open the image located at the path specified.\nThe image's format is determined from the path's file extension."],[5,"load","","Create a new image from a Reader"],[5,"load_from_memory","","Create a new image from a byte slice\nMakes an educated guess about the image format.\nTGA is not supported by this function."],[5,"load_from_memory_with_format","","Create a new image from a byte slice"],[5,"save_buffer","","Saves the supplied buffer to a file at the path specified."],[0,"math","","Mathematical helper functions and types."],[0,"utils","image::math","Shared mathematical utility functions."],[5,"clamp","image::math::utils","Cut value to be inside given range"],[0,"nq","image::math","NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\nSee \"Kohonen neural networks for optimal colour quantization\"\nin \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\nfor a discussion of the algorithm.\nSee also  http://www.acm.org/~dekker/NEUQUANT.HTML"],[3,"NeuQuant","image::math::nq","Neural network color quantizer"],[11,"new","","Creates a new neuronal network and trains it with the supplied data",5],[11,"init","","Initializes the neuronal network and trains it with the supplied data",5],[11,"map_pixel","","Maps the pixel in-place to the best-matching color in the color map",5],[11,"index_of","","Finds the best-matching index in the color map for `pixel`",5],[0,"imageops","image","Image Processing Functions"],[5,"rotate90","image::imageops","Rotate an image 90 degrees clockwise."],[5,"rotate180","","Rotate an image 180 degrees clockwise."],[5,"rotate270","","Rotate an image 270 degrees clockwise."],[5,"flip_horizontal","","Flip an image horizontally"],[5,"flip_vertical","","Flip an image vertically"],[5,"filter3x3","","Perform a 3x3 box filter on the supplied image.\n```kernel``` is an array of the filter weights of length 9."],[5,"resize","","Resize the supplied image to the specified dimensions\n```nwidth``` and ```nheight``` are the new dimensions.\n```filter``` is the sampling filter to use."],[5,"blur","","Performs a Gaussian blur on the supplied image.\n```sigma``` is a measure of how much to blur by."],[5,"unsharpen","","Performs an unsharpen mask on the supplied image\n```sigma``` is the amount to blur the image by.\n```threshold``` is the threshold for the difference between\nsee https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking"],[5,"crop","","Return a mutable view into an image"],[5,"overlay","","Overlay an image at a given coordinate (x, y)"],[0,"colorops","","Public only because of Rust bug:\nhttps://github.com/rust-lang/rust/issues/18241\nFunctions for altering and converting the color of pixelbufs"],[3,"BiLevel","image::imageops::colorops","A bi-level color map"],[5,"grayscale","","Convert the supplied image to grayscale"],[5,"invert","","Invert each pixel within the supplied image\nThis function operates in place."],[5,"contrast","","Adjust the contrast of the supplied image\n```contrast``` is the amount to adjust the contrast by.\nNegative values decrease the contrast and positive values increase the contrast."],[5,"brighten","","Brighten the supplied image\n```value``` is the amount to brighten each pixel by.\nNegative values decrease the brightness and positive values increase it."],[5,"dither","","Reduces the colors of the image using the supplied `color_map` while applying\nFloyd-Steinberg dithering to improve the visual conception "],[5,"index_colors","","Reduces the colors using the supplied `color_map` and returns an image of the indices"],[8,"ColorMap","","A color map"],[16,"Color","image::imageops::colorops::ColorMap","The color type on which the map operates on"],[10,"index_of","image::imageops::colorops","Returns the index of the closed match of `color`\nin the color map.",6],[10,"map_color","","Maps `color` to the closes color in the color map.",6],[6,"Color","",""],[11,"index_of","","",7],[11,"map_color","","",7],[6,"Color","",""],[11,"index_of","image::math::nq","",5],[11,"map_color","","",5],[0,"webp","image","Decoding of Webp Images"],[3,"WebpDecoder","image::webp","A Representation of a Webp Image format decoder."],[11,"new","","Create a new WebpDecoder from the Reader ```r```.\nThis function takes ownership of the Reader.",8],[11,"dimensions","","",8],[11,"colortype","","",8],[11,"row_len","","",8],[11,"read_scanline","","",8],[11,"read_image","","",8],[0,"vp8","","An implementation of the VP8 Video Codec"],[3,"Frame","image::webp::vp8","A Representation of the last decoded video frame"],[12,"width","","The width of the luma plane",9],[12,"height","","The height of the luma plane",9],[12,"ybuf","","The luma plane of the frame",9],[12,"keyframe","","Indicates whether this frame is a keyframe",9],[12,"for_display","","Indicates whether this frame is intended for display",9],[12,"pixel_type","","The pixel type of the frame as defined by Section 9.2\nof the VP8 Specification",9],[3,"VP8Decoder","","VP8 Decoder\nOnly decodes keyframes"],[11,"clone","","",9],[11,"fmt","","",9],[11,"default","","",9],[11,"new","","Create a new decoder.\nThe reader must present a raw vp8 bitstream to the decoder",10],[11,"decode_frame","","Decodes the current frame and returns a reference to it",10],[0,"ppm","image","Encoding of portable pixmap Images"],[3,"PPMEncoder","image::ppm","A representation of a PPM encoder."],[11,"new","","Create a new PPMEncoder from the Writer ```w```.\nThis function takes ownership of the Writer.",11],[11,"encode","","Encode the buffer ```im``` as a PPM image.\n```width``` and ```height``` are the dimensions of the buffer.\n```color``` is the buffers ColorType.",11],[0,"png","image","Decoding and Encoding of PNG Images"],[3,"PNGDecoder","image::png","The representation of a PNG decoder"],[3,"PNGEncoder","","The representation of a PNG encoder"],[11,"new","","Create a new decoder that decodes from the stream ```r```",12],[11,"palette","","Returns a reference to the color palette used for indexed\ncolor images.\nEach array element is a tuple of RGB values.",12],[11,"dimensions","","",12],[11,"colortype","","",12],[11,"row_len","","",12],[11,"read_scanline","","",12],[11,"read_image","","",12],[11,"new","","Create a new encoder that writes its output to ```w```",13],[11,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```",13],[0,"zlib","","An Implementation of RFC 1950"],[3,"ZlibDecoder","image::png::zlib","A Zlib compressed stream decoder."],[11,"new","","Create a new decoder that decodes from a Reader",14],[11,"inner","","Return a mutable reference to the wrapped Reader",14],[11,"read","","",14],[0,"deflate","image::png","An Implementation of RFC 1951"],[3,"Inflater","image::png::deflate","A DEFLATE compressed stream decoder."],[11,"new","","Create a new decoder that decodes from a Reader",15],[11,"eof","","Indicate whether the end of the stream has been reached.",15],[11,"inner","","Return a mutable reference to the wrapped Reader",15],[11,"read","","",15],[0,"hash","image::png","This module provides implementations of common hashing algorithms."],[3,"Adler32","image::png::hash","An Implementation of the Adler-32 checksum"],[3,"Crc32","","An Implementation of the Crc-32 checksum"],[11,"new","","Create a new hasher.",16],[11,"update","","Update the internal hasher with the bytes from ```buf```",16],[11,"checksum","","Return the computed hash.",16],[11,"reset","","Reset this hasher to its initial state.",16],[11,"new","","Create a new hasher.",17],[11,"update","","Update the internal hasher with the bytes from ```buf```",17],[11,"checksum","","Return the computed hash.",17],[11,"reset","","Reset this hasher to its initial state.",17],[0,"jpeg","image","Decoding and Encoding of JPEG Images"],[3,"JPEGDecoder","image::jpeg","The representation of a JPEG decoder"],[3,"JPEGEncoder","","The representation of a JPEG encoder"],[3,"Component","","A representation of a JPEG component"],[12,"id","","The Component's identifier",18],[12,"h","","Horizontal sampling factor",18],[12,"v","","Vertical sampling factor",18],[12,"tq","","The quantization table selector",18],[12,"dc_table","","Index to the Huffman DC Table",18],[12,"ac_table","","Index to the AC Huffman Table",18],[12,"dc_pred","","The dc prediction of the component",18],[11,"new","","Create a new encoder that writes its output to ```w```",19],[11,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```\nThe Image in encoded with subsampling ratio 4:2:2",19],[11,"clone","","",18],[11,"new","","Create a new decoder that decodes from the stream ```r```",20],[11,"dimensions","","",20],[11,"colortype","","",20],[11,"row_len","","",20],[11,"read_scanline","","",20],[11,"read_image","","",20],[0,"gif","image","Decoding of GIF Images"],[3,"GIFDecoder","image::gif","A gif decoder"],[3,"GIFEncoder","","A GIF encoder."],[4,"ColorMode","","The color mode the encoder will use to encode the image."],[13,"TrueColor","","Image will be encoded in multiple frames if more than 256 colors are present",21],[13,"Indexed","","Number of colors will be reduced",21],[11,"new","","Creates a new GIF decoder",22],[11,"dimensions","","",22],[11,"colortype","","",22],[11,"row_len","","",22],[11,"read_scanline","","",22],[11,"read_image","","",22],[11,"fmt","","",21],[11,"new","","Creates a new GIF encoder",23],[11,"encode","","Encodes the image",23],[0,"tiff","image","Decoding and Encoding of TIFF Images"],[3,"TIFFDecoder","image::tiff","The representation of a PNG decoder"],[4,"ByteOrder","","Byte order of the TIFF file."],[13,"LittleEndian","","little endian byte order",24],[13,"BigEndian","","big endian byte order",24],[11,"fmt","","",25],[11,"new","","Create a new decoder that decodes from the stream ```r```",25],[11,"init","","Initializes the decoder.",25],[11,"next_image","","Reads in the next image.\nIf there is no further image in the TIFF file a format error is return.\nTo determine whether there are more images call `TIFFDecoder::more_images` instead.",25],[11,"more_images","","Returns `true` if there is at least one more image available.",25],[11,"byte_order","","Returns the byte_order",25],[11,"read_short","","Reads a TIFF short value",25],[11,"read_long","","Reads a TIFF long value",25],[11,"read_offset","","Reads a TIFF IFA offset/value field",25],[11,"goto_offset","","Moves the cursor to the specified offset",25],[11,"dimensions","","",25],[11,"colortype","","",25],[11,"row_len","","",25],[11,"read_scanline","","",25],[11,"read_image","","",25],[11,"fmt","","",24],[0,"tga","image","Decoding of TGA Images"],[3,"TGADecoder","image::tga","The representation of a TGA decoder"],[11,"new","","Create a new decoder that decodes from the stream `r`",26],[11,"dimensions","","",26],[11,"colortype","","",26],[11,"row_len","","",26],[11,"read_scanline","","",26],[11,"read_image","","",26],[11,"eq","image","",1],[11,"ne","","",1],[11,"fmt","","",1],[11,"clone","","",1],[11,"fmt","","",1],[11,"from_error","","",1],[11,"fmt","","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"next","","",27],[11,"next","","",28],[11,"new","","Construct a new subimage",29],[11,"inner_mut","","Returns a mutable reference to the wrapped image.",29],[11,"change_bounds","","Change the coordinates of this subimage.",29],[11,"to_image","","Convert this subimage to an ImageBuffer",29],[11,"dimensions","","",29],[11,"bounds","","",29],[11,"get_pixel","","",29],[11,"put_pixel","","",29],[11,"blend_pixel","","",29],[11,"get_pixel_mut","","",29],[11,"new_luma8","","Creates a dynamic image backed by a buffer of grey pixels.",4],[11,"new_luma_a8","","Creates a dynamic image backed by a buffer of grey\npixels with transparency.",4],[11,"new_rgb8","","Creates a dynamic image backed by a buffer of RGB pixels.",4],[11,"new_rgba8","","Creates a dynamic image backed by a buffer of RGBA pixels.",4],[11,"to_rgb","","Returns a copy of this image as an RGB image.",4],[11,"to_rgba","","Returns a copy of this image as an RGBA image.",4],[11,"to_luma","","Returns a copy of this image as a Luma image.",4],[11,"to_luma_alpha","","Returns a copy of this image as a LumaA image.",4],[11,"crop","","Return a cut out of this image delimited by the bounding rectangle.",4],[11,"as_rgb8","","Return a reference to an 8bit RGB image",4],[11,"as_mut_rgb8","","Return a mutable reference to an 8bit RGB image",4],[11,"as_rgba8","","Return a reference to an 8bit RGBA image",4],[11,"as_mut_rgba8","","Return a mutable reference to an 8bit RGBA image",4],[11,"as_luma8","","Return a reference to an 8bit Grayscale image",4],[11,"as_mut_luma8","","Return a mutable reference to an 8bit Grayscale image",4],[11,"as_luma_alpha8","","Return a reference to an 8bit Grayscale image with an alpha channel",4],[11,"as_mut_luma_alpha8","","Return a mutable reference to an 8bit Grayscale image with an alpha channel",4],[11,"raw_pixels","","Return this image's pixels as a byte vector.",4],[11,"color","","Return this image's color type.",4],[11,"grayscale","","Return a grayscale version of this image.",4],[11,"invert","","Invert the colors of this image.\nThis method operates inplace.",4],[11,"resize","","Resize this image using the specified filter algorithm.\nReturns a new image. The image's aspect ratio is preserved.\n```nwidth``` and ```nheight``` are the new image's dimensions",4],[11,"resize_exact","","Resize this image using the specified filter algorithm.\nReturns a new image. Does not preserve aspect ratio.\n```nwidth``` and ```nheight``` are the new image's dimensions",4],[11,"blur","","Performs a Gaussian blur on this image.\n```sigma``` is a measure of how much to blur by.",4],[11,"unsharpen","","Performs an unsharpen mask on this image\n```sigma``` is the amount to blur the image by.\n```threshold``` is a control of how much to sharpen.\nsee https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking",4],[11,"filter3x3","","Filters this image with the specified 3x3 kernel.",4],[11,"adjust_contrast","","Adjust the contrast of this image.\n```contrast``` is the amount to adjust the contrast by.\nNegative values decrease the contrast and positive values increase the contrast.",4],[11,"brighten","","Brighten the pixels of this image.\n```value``` is the amount to brighten each pixel by.\nNegative values decrease the brightness and positive values increase it.",4],[11,"flipv","","Flip this image vertically",4],[11,"fliph","","Flip this image horizontally",4],[11,"rotate90","","Rotate this image 90 degrees clockwise.",4],[11,"rotate180","","Rotate this image 180 degrees clockwise.",4],[11,"rotate270","","Rotate this image 270 degrees clockwise.",4],[11,"save","","Encode this image and write it to ```w```",4],[11,"dimensions","","",4],[11,"bounds","","",4],[11,"get_pixel","","",4],[11,"put_pixel","","",4],[11,"blend_pixel","","",4],[11,"get_pixel_mut","","",4],[11,"clone","","",0],[11,"fmt","","",0],[11,"eq","","",0],[11,"ne","","",0],[11,"hash","","",30],[11,"fmt","","",30],[11,"clone","","",30],[11,"eq","","",30],[11,"ne","","",30],[11,"channel_count","","",30],[11,"color_model","","",30],[11,"color_type","","",30],[11,"channels","","",30],[11,"channels_mut","","",30],[11,"channels4","","",30],[11,"from_channels","","",30],[11,"from_slice","","",30],[11,"from_slice_mut","","",30],[11,"to_rgb","","",30],[11,"to_rgba","","",30],[11,"to_luma","","",30],[11,"to_luma_alpha","","",30],[11,"map","","",30],[11,"apply","","",30],[11,"map_with_alpha","","",30],[11,"apply_with_alpha","","",30],[11,"map2","","",30],[11,"apply2","","",30],[11,"invert","","",30],[11,"blend","","",30],[11,"index","","",30],[11,"index_mut","","",30],[11,"hash","","",31],[11,"fmt","","",31],[11,"clone","","",31],[11,"eq","","",31],[11,"ne","","",31],[11,"channel_count","","",31],[11,"color_model","","",31],[11,"color_type","","",31],[11,"channels","","",31],[11,"channels_mut","","",31],[11,"channels4","","",31],[11,"from_channels","","",31],[11,"from_slice","","",31],[11,"from_slice_mut","","",31],[11,"to_rgb","","",31],[11,"to_rgba","","",31],[11,"to_luma","","",31],[11,"to_luma_alpha","","",31],[11,"map","","",31],[11,"apply","","",31],[11,"map_with_alpha","","",31],[11,"apply_with_alpha","","",31],[11,"map2","","",31],[11,"apply2","","",31],[11,"invert","","",31],[11,"blend","","",31],[11,"index","","",31],[11,"index_mut","","",31],[11,"hash","","",32],[11,"fmt","","",32],[11,"clone","","",32],[11,"eq","","",32],[11,"ne","","",32],[11,"channel_count","","",32],[11,"color_model","","",32],[11,"color_type","","",32],[11,"channels","","",32],[11,"channels_mut","","",32],[11,"channels4","","",32],[11,"from_channels","","",32],[11,"from_slice","","",32],[11,"from_slice_mut","","",32],[11,"to_rgb","","",32],[11,"to_rgba","","",32],[11,"to_luma","","",32],[11,"to_luma_alpha","","",32],[11,"map","","",32],[11,"apply","","",32],[11,"map_with_alpha","","",32],[11,"apply_with_alpha","","",32],[11,"map2","","",32],[11,"apply2","","",32],[11,"invert","","",32],[11,"blend","","",32],[11,"index","","",32],[11,"index_mut","","",32],[11,"hash","","",33],[11,"fmt","","",33],[11,"clone","","",33],[11,"eq","","",33],[11,"ne","","",33],[11,"channel_count","","",33],[11,"color_model","","",33],[11,"color_type","","",33],[11,"channels","","",33],[11,"channels_mut","","",33],[11,"channels4","","",33],[11,"from_channels","","",33],[11,"from_slice","","",33],[11,"from_slice_mut","","",33],[11,"to_rgb","","",33],[11,"to_rgba","","",33],[11,"to_luma","","",33],[11,"to_luma_alpha","","",33],[11,"map","","",33],[11,"apply","","",33],[11,"map_with_alpha","","",33],[11,"apply_with_alpha","","",33],[11,"map2","","",33],[11,"apply2","","",33],[11,"invert","","",33],[11,"blend","","",33],[11,"index","","",33],[11,"index_mut","","",33],[11,"from_color","","",31],[11,"from_color","","",31],[11,"from_color","","",31],[11,"from_color","","",33],[11,"from_color","","",33],[11,"from_color","","",33],[11,"from_color","","",32],[11,"from_color","","",32],[11,"from_color","","",32],[11,"from_color","","",30],[11,"from_color","","",30],[11,"from_color","","",30],[11,"blend","","",33],[11,"blend","","",31],[11,"blend","","",32],[11,"blend","","",30],[11,"invert","","",33],[11,"invert","","",31],[11,"invert","","",32],[11,"invert","","",30],[11,"as_mut_slice","collections::vec","",34],[11,"from_raw","image","Contructs a buffer from a generic container\n(for example a `Vec` or a slice)\nReturns None if the container is not big enough",35],[11,"into_raw","","Returns the underlying raw buffer",35],[11,"dimensions","","The width and height of this image.",35],[11,"width","","The width of this image.",35],[11,"height","","The height of this image.",35],[11,"as_slice","","The raw image data as a slice.",35],[11,"as_mut_slice","","The raw image data as a slice.",35],[11,"pixels","","Returns an iterator over the pixels of this image.",35],[11,"pixels_mut","","Returns an iterator over the mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",35],[11,"enumerate_pixels","","Enumerates over the pixels of the image.\nThe iterator yields the coordinates of each pixel\nalong with a reference to them.",35],[11,"enumerate_pixels_mut","","Enumerates over the pixels of the image.",35],[11,"get_pixel","","Gets a reference to the pixel at location `(x, y)`",35],[11,"get_pixel_mut","","Gets a reference to the mutable pixel at location `(x, y)`",35],[11,"put_pixel","","Puts a pixel at location `(x, y)`",35],[11,"save","","Saves the buffer to a file at the path specified.",35],[11,"clone","","",35],[11,"dimensions","","",35],[11,"bounds","","",35],[11,"get_pixel","","",35],[11,"get_pixel_mut","","",35],[11,"put_pixel","","",35],[11,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",35],[11,"index","","",35],[11,"new","","Creates a new image buffer based on a `Vec<P::Subpixel>`.",35],[11,"from_pixel","","Constructs a new ImageBuffer by copying a pixel",35],[11,"from_fn","","Constructs a new ImageBuffer by repeated application of the supplied function.\nThe arguments to the function are the pixel's x and y coordinates.",35],[11,"from_vec","","Creates an image buffer out of an existing buffer.\nReturns None if the buffer is not big enough.",35],[11,"into_vec","","Consumes the image buffer and returns the underlying data\nas an owned buffer",35],[11,"convert","","",35],[11,"new","","Contructs a new frame iterator",36],[11,"clone","","",37],[11,"new","","Contructs a new frame",37],[11,"from_parts","","Contructs a new frame",37],[11,"delay","","Delay of this frame",37],[11,"buffer","","Returns the image buffer",37],[11,"into_buffer","","Returns the image buffer",37],[11,"left","","Returns the x offset",37],[11,"top","","Returns the x offset",37],[11,"next","","",36],[6,"ImageResult","","Result of an image decoding/encoding process"],[6,"RgbImage","","Sendable Rgb image buffer"],[6,"RgbaImage","","Sendable Rgb + alpha channel image buffer"],[6,"GrayImage","","Sendable grayscale image buffer"],[6,"GrayAlphaImage","","Sendable grayscale + alpha channel image buffer"],[8,"Primitive","","Primitive trait from old stdlib, added max_value"],[10,"max_value","","The maximum value of primitive.",38],[8,"Pixel","","A generalized pixel."],[16,"Subpixel","image::Pixel","The underlying subpixel type."],[10,"channel_count","image","Returns the number of channels of this pixel type.",39],[10,"channels","","Returns the components as a slice.",39],[10,"channels_mut","","Returns the components as a mutable slice",39],[10,"color_model","","Returns a string that can help to interprete the meaning each channel\nSee [gimp babl](http://gegl.org/babl/).",39],[10,"color_type","","Returns the ColorType for this pixel format",39],[10,"channels4","","Returns the channels of this pixel as a 4 tuple. If the pixel\nhas less than 4 channels the remainder is filled with the maximum value\nTODO deprecate",39],[10,"from_channels","","Construct a pixel from the 4 channels a, b, c and d.\nIf the pixel does not contain 4 channels the extra are ignored.\nTODO deprecate",39],[10,"from_slice","","Returns a view into a slice.",39],[10,"from_slice_mut","","Returns mutable view into a mutable slice.",39],[10,"to_rgb","","Convert this pixel to RGB",39],[10,"to_rgba","","Convert this pixel to RGB with an alpha channel",39],[10,"to_luma","","Convert this pixel to luma",39],[10,"to_luma_alpha","","Convert this pixel to luma with an alpha channel",39],[10,"map","","Apply the function ```f``` to each channel of this pixel.",39],[10,"apply","","Apply the function ```f``` to each channel of this pixel.",39],[10,"map_with_alpha","","Apply the function f to each channel except the alpha channel.\nApply the function g to the alpha channel.",39],[10,"apply_with_alpha","","Apply the function f to each channel except the alpha channel.\nApply the function g to the alpha channel. Works in-place.",39],[10,"map2","","Apply the function ```f``` to each channel of this pixel and\n```other``` pairwise.",39],[10,"apply2","","Apply the function ```f``` to each channel of this pixel and\n```other``` pairwise. Works in-place.",39],[10,"invert","","Invert this pixel",39],[10,"blend","","Blend the color of a given pixel into ourself, taking into account alpha channels",39],[8,"ImageDecoder","","The trait that all decoders implement"],[10,"dimensions","","Returns a tuple containing the width and height of the image",40],[10,"colortype","","Returns the color type of the image e.g RGB(8) (8bit RGB)",40],[10,"row_len","","Returns the length in bytes of one decoded row of the image",40],[11,"is_animated","","Returns true if the image is animated",40],[11,"into_frames","","Returns the frames of the image\nIf the image is not animated it returns a single frame",40],[10,"read_scanline","","Reads one row from the image into buf and returns the row index",40],[10,"read_image","","Decodes the entire image and return it as a Vector",40],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle\nstarting from ```x``` and ```y``` and having ```length``` and ```width```",40],[8,"GenericImage","","A trait for manipulating images."],[16,"Pixel","image::GenericImage","The type of pixel."],[10,"dimensions","image","The width and height of this image.",41],[11,"width","","The width of this image.",41],[11,"height","","The height of this image.",41],[10,"bounds","","The bounding rectangle of this image.",41],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",41],[10,"get_pixel","","Returns the pixel located at (x, y)",41],[10,"get_pixel_mut","","Puts a pixel at location (x, y)",41],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",41],[10,"put_pixel","","Put a pixel at location (x, y)",41],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",41],[10,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",41],[11,"pixels","","Returns an Iterator over the pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with their value",41],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",41],[11,"copy_from","","Copies all of the pixels from another image into this image.",41],[11,"sub_image","","Returns a subimage that is a view into this image.",41],[11,"is_animated","","Returns true if the image is animated",40],[11,"into_frames","","Returns the frames of the image\nIf the image is not animated it returns a single frame",40],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle\nstarting from ```x``` and ```y``` and having ```length``` and ```width```",40],[11,"width","","The width of this image.",41],[11,"height","","The height of this image.",41],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",41],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",41],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",41],[11,"pixels","","Returns an Iterator over the pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with their value",41],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",41],[11,"copy_from","","Copies all of the pixels from another image into this image.",41],[11,"sub_image","","Returns a subimage that is a view into this image.",41],[11,"expand_palette","","Expands a color palette by re-using the existing buffer.\nAssumes 8 bit per pixel. Uses an optionally transparent index to\nadjust it's alpha value accordingly.",42]],"paths":[[4,"ColorType"],[4,"ImageError"],[4,"ImageFormat"],[4,"FilterType"],[4,"DynamicImage"],[3,"NeuQuant"],[8,"ColorMap"],[3,"BiLevel"],[3,"WebpDecoder"],[3,"Frame"],[3,"VP8Decoder"],[3,"PPMEncoder"],[3,"PNGDecoder"],[3,"PNGEncoder"],[3,"ZlibDecoder"],[3,"Inflater"],[3,"Adler32"],[3,"Crc32"],[3,"Component"],[3,"JPEGEncoder"],[3,"JPEGDecoder"],[4,"ColorMode"],[3,"GIFDecoder"],[3,"GIFEncoder"],[4,"ByteOrder"],[3,"TIFFDecoder"],[3,"TGADecoder"],[3,"Pixels"],[3,"MutPixels"],[3,"SubImage"],[3,"Rgb"],[3,"Luma"],[3,"Rgba"],[3,"LumaA"],[3,"Vec"],[3,"ImageBuffer"],[3,"Frames"],[3,"Frame"],[8,"Primitive"],[8,"Pixel"],[8,"ImageDecoder"],[8,"GenericImage"],[6,"GrayImage"]]};

searchIndex['gl_generator'] = {"items":[[0,"","gl_generator","# gl_generator"],[5,"generate_bindings","","Public function that generates Rust source code."],[0,"generators","",""],[5,"gen_type_aliases","gl_generator::generators","Generates all the type aliases for a namespace."],[5,"gen_parameters","","Generates the list of Rust `Arg`s that a `Cmd` requires."],[5,"gen_return_type","","Generates the Rust return type of a `Cmd`."],[5,"gen_symbol_name","","Generates the native symbol name of a `Cmd`."],[0,"global_gen","",""],[3,"GlobalGenerator","gl_generator::generators::global_gen",""],[11,"write","","",0],[0,"static_gen","gl_generator::generators",""],[3,"StaticGenerator","gl_generator::generators::static_gen",""],[11,"write","","",1],[0,"struct_gen","gl_generator::generators",""],[3,"StructGenerator","gl_generator::generators::struct_gen",""],[11,"write","","",2],[0,"static_struct_gen","gl_generator::generators",""],[3,"StaticStructGenerator","gl_generator::generators::static_struct_gen",""],[11,"write","","",3],[8,"Generator","gl_generator::generators","Trait for a bindings generator."],[10,"write","","Builds the GL bindings.",4],[0,"registry","gl_generator",""],[3,"Registry","gl_generator::registry",""],[12,"groups","","",5],[12,"enums","","",5],[12,"cmds","","",5],[12,"features","","",5],[12,"extensions","","",5],[12,"aliases","","",5],[3,"EnumIterator","",""],[3,"CmdIterator","",""],[3,"Group","",""],[12,"name","","",6],[12,"enums","","",6],[3,"EnumNs","",""],[12,"namespace","","",7],[12,"group","","",7],[12,"ty","","",7],[12,"start","","",7],[12,"end","","",7],[12,"vendor","","",7],[12,"comment","","",7],[12,"defs","","",7],[3,"Enum","",""],[12,"ident","","",8],[12,"value","","",8],[12,"alias","","",8],[12,"ty","","",8],[3,"CmdNs","",""],[12,"namespace","","",9],[12,"defs","","",9],[3,"Binding","",""],[12,"ident","","",10],[12,"ty","","",10],[12,"group","","",10],[3,"Cmd","",""],[12,"proto","","",11],[12,"params","","",11],[12,"is_safe","","True if this command doesn't take any pointers.",11],[12,"alias","","",11],[12,"vecequiv","","",11],[12,"glx","","",11],[3,"Feature","",""],[12,"api","","",12],[12,"name","","",12],[12,"number","","",12],[12,"requires","","",12],[12,"removes","","",12],[3,"Require","",""],[12,"comment","","",13],[12,"enums","","A reference to the earlier types, by name",13],[12,"commands","","A reference to the earlier types, by name",13],[3,"Remove","",""],[12,"profile","","",14],[12,"comment","","",14],[12,"enums","","A reference to the earlier types, by name",14],[12,"commands","","A reference to the earlier types, by name",14],[3,"Extension","",""],[12,"name","","",15],[12,"supported","","which apis this extension is defined for (see Feature.api)",15],[12,"requires","","",15],[3,"GlxOpcode","",""],[12,"ty","","",16],[12,"opcode","","",16],[12,"name","","",16],[12,"comment","","",16],[3,"Filter","",""],[12,"extensions","","",17],[12,"profile","","",17],[12,"version","","",17],[12,"api","","",17],[4,"Ns","",""],[13,"Gl","","",18],[13,"Glx","","",18],[13,"Wgl","","",18],[13,"Egl","","",18],[13,"Gles1","","",18],[13,"Gles2","","",18],[11,"fmt_struct_name","","",18],[6,"Err","",""],[11,"from_str","","",18],[11,"fmt","","",18],[11,"from_xml","","Generate a registry from the supplied XML string",5],[11,"get_tys","","Returns a set of all the types used in the supplied registry. This is useful\nfor working out what conversions are needed for the specific registry.",5],[11,"enum_iter","","",5],[11,"cmd_iter","","",5],[6,"Output","",""],[11,"add","","",5],[6,"Item","",""],[11,"next","","",19],[6,"Item","",""],[11,"next","","",20],[11,"clone","","",12],[11,"clone","","",13],[11,"clone","","",14],[11,"clone","","",15]],"paths":[[3,"GlobalGenerator"],[3,"StaticGenerator"],[3,"StructGenerator"],[3,"StaticStructGenerator"],[8,"Generator"],[3,"Registry"],[3,"Group"],[3,"EnumNs"],[3,"Enum"],[3,"CmdNs"],[3,"Binding"],[3,"Cmd"],[3,"Feature"],[3,"Require"],[3,"Remove"],[3,"Extension"],[3,"GlxOpcode"],[3,"Filter"],[4,"Ns"],[3,"EnumIterator"],[3,"CmdIterator"]]};

searchIndex['cgmath'] = {"items":[[0,"","cgmath","Computer graphics-centric math."],[3,"Matrix2","","A 2 x 2, column major matrix"],[12,"x","","",0],[12,"y","","",0],[3,"Matrix3","","A 3 x 3, column major matrix"],[12,"x","","",1],[12,"y","","",1],[12,"z","","",1],[3,"Matrix4","","A 4 x 4, column major matrix"],[12,"x","","",2],[12,"y","","",2],[12,"z","","",2],[12,"w","","",2],[3,"Quaternion","","A [quaternion](https://en.wikipedia.org/wiki/Quaternion) in scalar/vector\nform."],[12,"s","","",3],[12,"v","","",3],[3,"Vector2","",""],[12,"x","","",4],[12,"y","","",4],[3,"Vector3","",""],[12,"x","","",5],[12,"y","","",5],[12,"z","","",5],[3,"Vector4","",""],[12,"x","","",6],[12,"y","","",6],[12,"z","","",6],[12,"w","","",6],[3,"Rad","","An angle, in radians"],[12,"s","","",7],[3,"Deg","","An angle, in degrees"],[12,"s","","",8],[3,"Plane","","A 3-dimensional plane formed from the equation: `A*x + B*y + C*z - D = 0`."],[12,"n","","",9],[12,"d","","",9],[3,"Point2","","A point in 2-dimensional space."],[12,"x","","",10],[12,"y","","",10],[3,"Point3","","A point in 3-dimensional space."],[12,"x","","",11],[12,"y","","",11],[12,"z","","",11],[3,"Line","","A generic directed line segment from `origin` to `dest`."],[12,"origin","","",12],[12,"dest","","",12],[3,"Ray","","A generic ray starting at `origin` and extending infinitely in\n`direction`."],[12,"origin","","",13],[12,"direction","","",13],[3,"Basis3","","A three-dimensional rotation matrix."],[3,"Basis2","","A two-dimensional rotation matrix."],[3,"Decomposed","","A generic transformation consisting of a rotation,\ndisplacement vector and scale amount."],[12,"scale","","",14],[12,"rot","","",14],[12,"disp","","",14],[3,"AffineMatrix3","","A homogeneous transformation matrix."],[12,"mat","","",15],[3,"PerspectiveFov","","A perspective projection based on a vertical field-of-view angle."],[12,"fovy","","",16],[12,"aspect","","",16],[12,"near","","",16],[12,"far","","",16],[3,"Perspective","","A perspective projection with arbitrary left/right/bottom/top distances"],[12,"left","","",17],[12,"bottom","","",17],[12,"near","","",17],[3,"Ortho","","An orthographic projection with arbitrary left/right/bottom/top distances"],[12,"left","","",18],[12,"bottom","","",18],[12,"near","","",18],[3,"Aabb2","","A two-dimensional AABB, aka a rectangle."],[12,"min","","",19],[12,"max","","",19],[3,"Aabb3","","A three-dimensional AABB, aka a rectangular prism."],[12,"min","","",20],[12,"max","","",20],[3,"Cylinder","",""],[12,"center","","",21],[12,"axis","","",21],[12,"radius","","",21],[3,"Frustum","",""],[12,"left","","",22],[12,"right","","",22],[12,"bottom","","",22],[12,"top","","",22],[12,"near","","",22],[12,"far","","",22],[3,"FrustumPoints","",""],[12,"near_top_left","","",23],[12,"near_top_right","","",23],[12,"near_bottom_left","","",23],[12,"near_bottom_right","","",23],[12,"far_top_left","","",23],[12,"far_top_right","","",23],[12,"far_bottom_left","","",23],[12,"far_bottom_right","","",23],[3,"Obb2","",""],[12,"center","","",24],[12,"axis","","",24],[12,"extents","","",24],[3,"Obb3","",""],[12,"center","","",25],[12,"axis","","",25],[12,"extents","","",25],[3,"Sphere","",""],[12,"center","","",26],[12,"radius","","",26],[5,"dot","","Dot product of two vectors."],[5,"vec2","","The short constructor."],[5,"vec3","","The short constructor."],[5,"vec4","","The short constructor."],[5,"rad","","Create a new angle, in radians"],[5,"deg","","Create a new angle, in degrees"],[5,"bisect","",""],[5,"sin","",""],[5,"cos","",""],[5,"tan","",""],[5,"sin_cos","",""],[5,"cot","",""],[5,"sec","",""],[5,"csc","",""],[5,"acos","",""],[5,"asin","",""],[5,"atan","",""],[5,"atan2","",""],[5,"perspective","","Create a perspective projection matrix."],[5,"frustum","","Create a perspective matrix from a view frustrum."],[5,"ortho","","Create an orthographic projection matrix."],[5,"one","",""],[5,"zero","",""],[11,"rand","","",0],[11,"decode","","",0],[11,"encode","","",0],[11,"eq","","",0],[11,"ne","","",0],[11,"clone","","",0],[11,"rand","","",1],[11,"decode","","",1],[11,"encode","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"clone","","",1],[11,"rand","","",2],[11,"decode","","",2],[11,"encode","","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"clone","","",2],[11,"new","","Create a new matrix, providing values for each index.",0],[11,"from_cols","","Create a new matrix, providing columns.",0],[11,"from_value","","Create a new diagonal matrix, providing a single value to use for each\nnon-zero index.",0],[11,"zero","","Create a zero matrix (all zeros).",0],[11,"identity","","Create an identity matrix (diagonal matrix of ones).",0],[11,"look_at","","Create a transformation matrix that will cause a vector to point at\n`dir`, using `up` for orientation.",0],[11,"from_angle","","",0],[11,"new","","Create a new matrix, providing values for each index.",1],[11,"from_cols","","Create a new matrix, providing columns.",1],[11,"from_value","","Create a new diagonal matrix, providing a single value to use for each\nnon-zero index.",1],[11,"zero","","Create a zero matrix (all zeros).",1],[11,"identity","","Create an identity matrix (diagonal matrix of ones).",1],[11,"look_at","","Create a transformation matrix that will cause a vector to point at\n`dir`, using `up` for orientation.",1],[11,"from_angle_x","","Create a matrix from a rotation around the `x` axis (pitch).",1],[11,"from_angle_y","","Create a matrix from a rotation around the `y` axis (yaw).",1],[11,"from_angle_z","","Create a matrix from a rotation around the `z` axis (roll).",1],[11,"from_euler","","Create a matrix from a set of euler angles.",1],[11,"from_axis_angle","","Create a matrix from a rotation around an arbitrary axis",1],[11,"from_diagonal","","Create a matrix from a non-uniform scale",1],[11,"new","","Create a new matrix, providing values for each index.",2],[11,"from_cols","","Create a new matrix, providing columns.",2],[11,"from_value","","Create a new diagonal matrix, providing a single value to use for each\nnon-zero index.",2],[11,"zero","","Create a zero matrix (all zeros).",2],[11,"identity","","Create an identity matrix (diagonal matrix of ones).",2],[11,"from_translation","","Create a translation matrix from a Vector3",2],[11,"look_at","","Create a transformation matrix that will cause a vector to point at\n`dir`, using `up` for orientation.",2],[11,"add","","",0],[11,"add","","",1],[11,"add","","",2],[11,"sub","","",0],[11,"sub","","",1],[11,"sub","","",2],[11,"neg","","",0],[11,"neg","","",1],[11,"neg","","",2],[11,"zero","","",0],[11,"is_zero","","",0],[11,"zero","","",1],[11,"is_zero","","",1],[11,"zero","","",2],[11,"is_zero","","",2],[11,"mul","","",0],[11,"mul","","",1],[11,"mul","","",2],[11,"one","","",0],[11,"one","","",1],[11,"one","","",2],[11,"into_fixed","","",0],[11,"as_fixed","","",0],[11,"as_mut_fixed","","",0],[11,"from_fixed","","",0],[11,"from_fixed_ref","","",0],[11,"from_fixed_mut","","",0],[11,"index","","",0],[11,"index_mut","","",0],[11,"row","","",0],[11,"swap_rows","","",0],[11,"map","","",0],[11,"into_fixed","","",1],[11,"as_fixed","","",1],[11,"as_mut_fixed","","",1],[11,"from_fixed","","",1],[11,"from_fixed_ref","","",1],[11,"from_fixed_mut","","",1],[11,"index","","",1],[11,"index_mut","","",1],[11,"row","","",1],[11,"swap_rows","","",1],[11,"map","","",1],[11,"into_fixed","","",2],[11,"as_fixed","","",2],[11,"as_mut_fixed","","",2],[11,"from_fixed","","",2],[11,"from_fixed_ref","","",2],[11,"from_fixed_mut","","",2],[11,"index","","",2],[11,"index_mut","","",2],[11,"row","","",2],[11,"swap_rows","","",2],[11,"map","","",2],[11,"mul_s","","",0],[11,"div_s","","",0],[11,"rem_s","","",0],[11,"add_m","","",0],[11,"sub_m","","",0],[11,"mul_v","","",0],[11,"mul_m","","",0],[11,"neg_self","","",0],[11,"mul_self_s","","",0],[11,"div_self_s","","",0],[11,"rem_self_s","","",0],[11,"add_self_m","","",0],[11,"sub_self_m","","",0],[11,"transpose","","",0],[11,"transpose_self","","",0],[11,"determinant","","",0],[11,"diagonal","","",0],[11,"invert","","",0],[11,"is_diagonal","","",0],[11,"is_symmetric","","",0],[11,"mul_s","","",1],[11,"div_s","","",1],[11,"rem_s","","",1],[11,"add_m","","",1],[11,"sub_m","","",1],[11,"mul_v","","",1],[11,"mul_m","","",1],[11,"neg_self","","",1],[11,"mul_self_s","","",1],[11,"div_self_s","","",1],[11,"rem_self_s","","",1],[11,"add_self_m","","",1],[11,"sub_self_m","","",1],[11,"transpose","","",1],[11,"transpose_self","","",1],[11,"determinant","","",1],[11,"diagonal","","",1],[11,"invert","","",1],[11,"is_diagonal","","",1],[11,"is_symmetric","","",1],[11,"mul_s","","",2],[11,"div_s","","",2],[11,"rem_s","","",2],[11,"add_m","","",2],[11,"sub_m","","",2],[11,"mul_v","","",2],[11,"mul_m","","",2],[11,"neg_self","","",2],[11,"mul_self_s","","",2],[11,"div_self_s","","",2],[11,"rem_self_s","","",2],[11,"add_self_m","","",2],[11,"sub_self_m","","",2],[11,"transpose","","",2],[11,"transpose_self","","",2],[11,"determinant","","",2],[11,"diagonal","","",2],[11,"invert","","",2],[11,"is_diagonal","","",2],[11,"is_symmetric","","",2],[11,"approx_eq_eps","","",0],[11,"approx_eq_eps","","",1],[11,"approx_eq_eps","","",2],[11,"to_matrix3","","Clone the elements of a 2-dimensional matrix into the top-left corner\nof a 3-dimensional identity matrix.",0],[11,"to_matrix4","","Clone the elements of a 2-dimensional matrix into the top-left corner\nof a 4-dimensional identity matrix.",0],[11,"to_matrix4","","Clone the elements of a 3-dimensional matrix into the top-left corner\nof a 4-dimensional identity matrix.",1],[11,"to_quaternion","","Convert the matrix to a quaternion",1],[11,"fmt","","",0],[11,"fmt","","",1],[11,"fmt","","",2],[11,"rand","","",3],[11,"decode","","",3],[11,"encode","","",3],[11,"eq","","",3],[11,"ne","","",3],[11,"clone","","",3],[11,"map","","",3],[11,"index","","",3],[11,"index_mut","","",3],[11,"new","","Construct a new quaternion from one scalar component and three\nimaginary components",3],[11,"from_sv","","Construct a new quaternion from a scalar and a vector",3],[11,"zero","","The additive identity, ie: `q = 0 + 0i + 0j + 0i`",3],[11,"identity","","The multiplicative identity, ie: `q = 1 + 0i + 0j + 0i`",3],[11,"mul_s","","The result of multiplying the quaternion a scalar",3],[11,"div_s","","The result of dividing the quaternion a scalar",3],[11,"mul_v","","The result of multiplying the quaternion by a vector",3],[11,"add_q","","The sum of this quaternion and `other`",3],[11,"sub_q","","The difference between this quaternion and `other`",3],[11,"mul_q","","The result of multipliplying the quaternion by `other`",3],[11,"mul_self_s","","Multiply this quaternion by a scalar, in-place.",3],[11,"div_self_s","","Divide this quaternion by a scalar, in-place.",3],[11,"add_self_q","","Add this quaternion by another, in-place.",3],[11,"sub_self_q","","Subtract another quaternion from this one, in-place.",3],[11,"mul_self_q","","Multiply this quaternion by another, in-place.",3],[11,"dot","","The dot product of the quaternion and `q`.",3],[11,"conjugate","","The conjugate of the quaternion.",3],[11,"magnitude2","","The squared magnitude of the quaternion. This is useful for\nmagnitude comparisons where the exact magnitude does not need to be\ncalculated.",3],[11,"magnitude","","The magnitude of the quaternion",3],[11,"normalize","","Normalize this quaternion, returning the new quaternion.",3],[11,"nlerp","","Do a normalized linear interpolation with `other`, by `amount`.",3],[11,"approx_eq_eps","","",3],[11,"slerp","","Spherical Linear Intoperlation",3],[11,"to_euler","","Convert a Quaternion to Eular angles\n    This is a polar singularity aware conversion",3],[11,"to_matrix3","","Convert the quaternion to a 3 x 3 rotation matrix",3],[11,"to_matrix4","","Convert the quaternion to a 4 x 4 rotation matrix",3],[11,"neg","","",3],[11,"fmt","","",3],[11,"to_rot3","","",3],[11,"to_quaternion","","",3],[11,"identity","","",3],[11,"look_at","","",3],[11,"between_vectors","","",3],[11,"rotate_vector","","",3],[11,"concat","","",3],[11,"concat_self","","",3],[11,"invert","","",3],[11,"invert_self","","",3],[11,"from_axis_angle","","",3],[11,"from_euler","","- [Maths - Conversion Euler to Quaternion]\n(http://www.euclideanspace.com/maths/geometry/rotations/conversions/eulerToQuaternion/index.htm)",3],[11,"rand","","",4],[11,"decode","","",4],[11,"encode","","",4],[11,"hash","","",4],[11,"clone","","",4],[11,"eq","","",4],[11,"ne","","",4],[11,"new","","Construct a new vector, using the provided values.",4],[11,"from_value","","Construct a vector from a single value, replicating it.",4],[11,"zero","","",4],[11,"is_zero","","",4],[11,"one","","",4],[11,"cast","","Component-wise casting to another type",4],[11,"into_fixed","","",4],[11,"as_fixed","","",4],[11,"as_mut_fixed","","",4],[11,"from_fixed","","",4],[11,"from_fixed_ref","","",4],[11,"from_fixed_mut","","",4],[11,"index","","",4],[11,"index_mut","","",4],[11,"map","","",4],[11,"add_s","","",4],[11,"sub_s","","",4],[11,"mul_s","","",4],[11,"div_s","","",4],[11,"rem_s","","",4],[11,"add_v","","",4],[11,"sub_v","","",4],[11,"mul_v","","",4],[11,"div_v","","",4],[11,"rem_v","","",4],[11,"neg_self","","",4],[11,"add_self_s","","",4],[11,"sub_self_s","","",4],[11,"mul_self_s","","",4],[11,"div_self_s","","",4],[11,"rem_self_s","","",4],[11,"add_self_v","","",4],[11,"sub_self_v","","",4],[11,"mul_self_v","","",4],[11,"div_self_v","","",4],[11,"rem_self_v","","",4],[11,"comp_add","","",4],[11,"comp_mul","","",4],[11,"comp_min","","",4],[11,"comp_max","","",4],[11,"add","","",4],[11,"sub","","",4],[11,"neg","","",4],[11,"mul","","",4],[11,"div","","",4],[11,"rem","","",4],[11,"approx_eq_eps","","",4],[11,"rand","","",5],[11,"decode","","",5],[11,"encode","","",5],[11,"hash","","",5],[11,"clone","","",5],[11,"eq","","",5],[11,"ne","","",5],[11,"new","","Construct a new vector, using the provided values.",5],[11,"from_value","","Construct a vector from a single value, replicating it.",5],[11,"zero","","",5],[11,"is_zero","","",5],[11,"one","","",5],[11,"cast","","Component-wise casting to another type",5],[11,"into_fixed","","",5],[11,"as_fixed","","",5],[11,"as_mut_fixed","","",5],[11,"from_fixed","","",5],[11,"from_fixed_ref","","",5],[11,"from_fixed_mut","","",5],[11,"index","","",5],[11,"index_mut","","",5],[11,"map","","",5],[11,"add_s","","",5],[11,"sub_s","","",5],[11,"mul_s","","",5],[11,"div_s","","",5],[11,"rem_s","","",5],[11,"add_v","","",5],[11,"sub_v","","",5],[11,"mul_v","","",5],[11,"div_v","","",5],[11,"rem_v","","",5],[11,"neg_self","","",5],[11,"add_self_s","","",5],[11,"sub_self_s","","",5],[11,"mul_self_s","","",5],[11,"div_self_s","","",5],[11,"rem_self_s","","",5],[11,"add_self_v","","",5],[11,"sub_self_v","","",5],[11,"mul_self_v","","",5],[11,"div_self_v","","",5],[11,"rem_self_v","","",5],[11,"comp_add","","",5],[11,"comp_mul","","",5],[11,"comp_min","","",5],[11,"comp_max","","",5],[11,"add","","",5],[11,"sub","","",5],[11,"neg","","",5],[11,"mul","","",5],[11,"div","","",5],[11,"rem","","",5],[11,"approx_eq_eps","","",5],[11,"rand","","",6],[11,"decode","","",6],[11,"encode","","",6],[11,"hash","","",6],[11,"clone","","",6],[11,"eq","","",6],[11,"ne","","",6],[11,"new","","Construct a new vector, using the provided values.",6],[11,"from_value","","Construct a vector from a single value, replicating it.",6],[11,"zero","","",6],[11,"is_zero","","",6],[11,"one","","",6],[11,"cast","","Component-wise casting to another type",6],[11,"into_fixed","","",6],[11,"as_fixed","","",6],[11,"as_mut_fixed","","",6],[11,"from_fixed","","",6],[11,"from_fixed_ref","","",6],[11,"from_fixed_mut","","",6],[11,"index","","",6],[11,"index_mut","","",6],[11,"map","","",6],[11,"add_s","","",6],[11,"sub_s","","",6],[11,"mul_s","","",6],[11,"div_s","","",6],[11,"rem_s","","",6],[11,"add_v","","",6],[11,"sub_v","","",6],[11,"mul_v","","",6],[11,"div_v","","",6],[11,"rem_v","","",6],[11,"neg_self","","",6],[11,"add_self_s","","",6],[11,"sub_self_s","","",6],[11,"mul_self_s","","",6],[11,"div_self_s","","",6],[11,"rem_self_s","","",6],[11,"add_self_v","","",6],[11,"sub_self_v","","",6],[11,"mul_self_v","","",6],[11,"div_self_v","","",6],[11,"rem_self_v","","",6],[11,"comp_add","","",6],[11,"comp_mul","","",6],[11,"comp_min","","",6],[11,"comp_max","","",6],[11,"add","","",6],[11,"sub","","",6],[11,"neg","","",6],[11,"mul","","",6],[11,"div","","",6],[11,"rem","","",6],[11,"approx_eq_eps","","",6],[11,"unit_x","","A unit vector in the `x` direction.",4],[11,"unit_y","","A unit vector in the `y` direction.",4],[11,"perp_dot","","The perpendicular dot product of the vector and `other`.",4],[11,"extend","","Create a `Vector3`, using the `x` and `y` values from this vector, and the\nprovided `z`.",4],[11,"unit_x","","A unit vector in the `x` direction.",5],[11,"unit_y","","A unit vector in the `y` direction.",5],[11,"unit_z","","A unit vector in the `w` direction.",5],[11,"cross","","Returns the cross product of the vector and `other`.",5],[11,"cross_self","","Calculates the cross product of the vector and `other`, then stores the\nresult in `self`.",5],[11,"extend","","Create a `Vector4`, using the `x`, `y` and `z` values from this vector, and the\nprovided `w`.",5],[11,"truncate","","Create a `Vector2`, dropping the `z` value.",5],[11,"unit_x","","A unit vector in the `x` direction.",6],[11,"unit_y","","A unit vector in the `y` direction.",6],[11,"unit_z","","A unit vector in the `z` direction.",6],[11,"unit_w","","A unit vector in the `w` direction.",6],[11,"truncate","","Create a `Vector3`, dropping the `w` value.",6],[11,"truncate_n","","Create a `Vector3`, dropping the nth element",6],[11,"angle","","",4],[11,"angle","","",5],[11,"angle","","",6],[11,"fmt","","",4],[11,"fmt","","",5],[11,"fmt","","",6],[11,"rand","","",7],[11,"decode","","",7],[11,"encode","","",7],[11,"hash","","",7],[11,"partial_cmp","","",7],[11,"lt","","",7],[11,"le","","",7],[11,"gt","","",7],[11,"ge","","",7],[11,"eq","","",7],[11,"ne","","",7],[11,"clone","","",7],[11,"rand","","",8],[11,"decode","","",8],[11,"encode","","",8],[11,"hash","","",8],[11,"partial_cmp","","",8],[11,"lt","","",8],[11,"le","","",8],[11,"gt","","",8],[11,"ge","","",8],[11,"eq","","",8],[11,"ne","","",8],[11,"clone","","",8],[11,"to_rad","","",7],[11,"to_rad","","",8],[11,"to_deg","","",7],[11,"to_deg","","",8],[11,"zero","","",7],[11,"full_turn","","",7],[11,"turn_div_2","","",7],[11,"turn_div_3","","",7],[11,"turn_div_4","","",7],[11,"turn_div_6","","",7],[11,"zero","","",8],[11,"full_turn","","",8],[11,"turn_div_2","","",8],[11,"turn_div_3","","",8],[11,"turn_div_4","","",8],[11,"turn_div_6","","",8],[11,"add","","",7],[11,"add","","",8],[11,"sub","","",7],[11,"sub","","",8],[11,"neg","","",7],[11,"neg","","",8],[11,"zero","","",7],[11,"is_zero","","",7],[11,"zero","","",8],[11,"is_zero","","",8],[11,"mul","","",7],[11,"mul","","",8],[11,"one","","",7],[11,"one","","",8],[11,"from","","",7],[11,"full_turn","","",7],[11,"from","","",8],[11,"full_turn","","",8],[11,"fmt","","",7],[11,"fmt","","",8],[11,"approx_eq_eps","","",7],[11,"approx_eq_eps","","",8],[11,"decode","","",9],[11,"encode","","",9],[11,"eq","","",9],[11,"ne","","",9],[11,"clone","","",9],[11,"new","","Construct a plane from a normal vector and a scalar distance. The\nplane will be perpendicular to `n`, and `d` units offset from the\norigin.",9],[11,"from_abcd","","# Arguments",9],[11,"from_vector4","","Construct a plane from the components of a four-dimensional vector",9],[11,"from_points","","Constructs a plane that passes through the the three points `a`, `b` and `c`",9],[11,"from_point_normal","","Construct a plane from a point and a normal vector.\nThe plane will contain the point `p` and be perpendicular to `n`.",9],[11,"approx_eq_eps","","",9],[11,"fmt","","",9],[11,"decode","","",10],[11,"encode","","",10],[11,"hash","","",10],[11,"clone","","",10],[11,"eq","","",10],[11,"ne","","",10],[11,"decode","","",11],[11,"encode","","",11],[11,"hash","","",11],[11,"clone","","",11],[11,"eq","","",11],[11,"ne","","",11],[11,"new","","",10],[11,"new","","",11],[11,"from_homogeneous","","",11],[11,"to_homogeneous","","",11],[11,"into_fixed","","",10],[11,"as_fixed","","",10],[11,"as_mut_fixed","","",10],[11,"from_fixed","","",10],[11,"from_fixed_ref","","",10],[11,"from_fixed_mut","","",10],[11,"index","","",10],[11,"index_mut","","",10],[11,"map","","",10],[11,"origin","","",10],[11,"from_vec","","",10],[11,"to_vec","","",10],[11,"mul_s","","",10],[11,"div_s","","",10],[11,"rem_s","","",10],[11,"add_v","","",10],[11,"sub_p","","",10],[11,"mul_self_s","","",10],[11,"div_self_s","","",10],[11,"rem_self_s","","",10],[11,"add_self_v","","",10],[11,"dot","","",10],[11,"min","","",10],[11,"max","","",10],[11,"approx_eq_eps","","",10],[11,"into_fixed","","",11],[11,"as_fixed","","",11],[11,"as_mut_fixed","","",11],[11,"from_fixed","","",11],[11,"from_fixed_ref","","",11],[11,"from_fixed_mut","","",11],[11,"index","","",11],[11,"index_mut","","",11],[11,"map","","",11],[11,"origin","","",11],[11,"from_vec","","",11],[11,"to_vec","","",11],[11,"mul_s","","",11],[11,"div_s","","",11],[11,"rem_s","","",11],[11,"add_v","","",11],[11,"sub_p","","",11],[11,"mul_self_s","","",11],[11,"div_self_s","","",11],[11,"rem_self_s","","",11],[11,"add_self_v","","",11],[11,"dot","","",11],[11,"min","","",11],[11,"max","","",11],[11,"approx_eq_eps","","",11],[11,"fmt","","",10],[11,"fmt","","",11],[11,"decode","","",12],[11,"encode","","",12],[11,"eq","","",12],[11,"ne","","",12],[11,"clone","","",12],[11,"new","","",12],[11,"decode","","",13],[11,"encode","","",13],[11,"eq","","",13],[11,"ne","","",13],[11,"clone","","",13],[11,"new","","",13],[11,"decode","","",27],[11,"encode","","",27],[11,"clone","","",27],[11,"eq","","",27],[11,"ne","","",27],[11,"as_matrix2","","Coerce to a `Matrix2`",27],[11,"to_rot2","","",27],[11,"to_matrix2","","",27],[11,"identity","","",27],[11,"look_at","","",27],[11,"between_vectors","","",27],[11,"rotate_vector","","",27],[11,"concat","","",27],[11,"concat_self","","",27],[11,"invert","","",27],[11,"invert_self","","",27],[11,"approx_eq_eps","","",27],[11,"from_angle","","",27],[11,"decode","","",28],[11,"encode","","",28],[11,"clone","","",28],[11,"eq","","",28],[11,"ne","","",28],[11,"from_quaternion","","Create a new rotation matrix from a quaternion.",28],[11,"as_matrix3","","Coerce to a `Matrix3`",28],[11,"to_rot3","","",28],[11,"to_matrix3","","",28],[11,"to_quaternion","","",28],[11,"identity","","",28],[11,"look_at","","",28],[11,"between_vectors","","",28],[11,"rotate_vector","","",28],[11,"concat","","",28],[11,"concat_self","","",28],[11,"invert","","",28],[11,"invert_self","","",28],[11,"approx_eq_eps","","",28],[11,"from_axis_angle","","",28],[11,"from_euler","","",28],[11,"from_angle_x","","",28],[11,"from_angle_y","","",28],[11,"from_angle_z","","",28],[11,"decode","","",14],[11,"encode","","",14],[11,"clone","","",14],[11,"identity","","",14],[11,"look_at","","",14],[11,"transform_vector","","",14],[11,"transform_point","","",14],[11,"concat","","",14],[11,"invert","","",14],[11,"to_matrix4","","",14],[11,"fmt","","",14],[11,"decode","","",15],[11,"encode","","",15],[11,"clone","","",15],[11,"identity","","",15],[11,"look_at","","",15],[11,"transform_vector","","",15],[11,"transform_point","","",15],[11,"concat","","",15],[11,"invert","","",15],[11,"to_matrix4","","",15],[11,"decode","","",16],[11,"encode","","",16],[11,"eq","","",16],[11,"ne","","",16],[11,"clone","","",16],[11,"to_perspective","","",16],[11,"to_frustum","","",16],[11,"to_matrix4","","",16],[11,"decode","","",17],[11,"encode","","",17],[11,"eq","","",17],[11,"ne","","",17],[11,"clone","","",17],[11,"to_frustum","","",17],[11,"to_matrix4","","",17],[11,"decode","","",18],[11,"encode","","",18],[11,"eq","","",18],[11,"ne","","",18],[11,"clone","","",18],[11,"to_frustum","","",18],[11,"to_matrix4","","",18],[11,"decode","","",19],[11,"encode","","",19],[11,"eq","","",19],[11,"ne","","",19],[11,"clone","","",19],[11,"new","","Construct a new axis-aligned bounding box from two points.",19],[11,"new","","",19],[11,"min","","",19],[11,"max","","",19],[11,"contains","","",19],[11,"fmt","","",19],[11,"decode","","",20],[11,"encode","","",20],[11,"eq","","",20],[11,"ne","","",20],[11,"clone","","",20],[11,"new","","Construct a new axis-aligned bounding box from two points.",20],[11,"new","","",20],[11,"min","","",20],[11,"max","","",20],[11,"contains","","",20],[11,"fmt","","",20],[11,"decode","","",21],[11,"encode","","",21],[11,"eq","","",21],[11,"ne","","",21],[11,"clone","","",21],[11,"decode","","",22],[11,"encode","","",22],[11,"eq","","",22],[11,"ne","","",22],[11,"clone","","",22],[11,"new","","Constructs a frustum",22],[11,"from_matrix4","","Extracts frustum planes from a projection matrix",22],[11,"decode","","",23],[11,"encode","","",23],[11,"eq","","",23],[11,"ne","","",23],[11,"clone","","",23],[11,"decode","","",24],[11,"encode","","",24],[11,"eq","","",24],[11,"ne","","",24],[11,"clone","","",24],[11,"decode","","",25],[11,"encode","","",25],[11,"eq","","",25],[11,"ne","","",25],[11,"clone","","",25],[11,"decode","","",26],[11,"encode","","",26],[11,"eq","","",26],[11,"ne","","",26],[11,"clone","","",26],[6,"Line2","",""],[6,"Line3","",""],[6,"Ray2","",""],[6,"Ray3","",""],[8,"Array1","","An array containing elements of type `Element`"],[11,"ptr","","Get the pointer to the first element of the array.",29],[11,"mut_ptr","","Get a mutable pointer to the first element of the array.",29],[11,"swap_elems","","Swap the elements at indices `i` and `j` in-place.",29],[11,"replace_elem","","Replace an element in the array.",29],[10,"map","","Apply a function to each element.",29],[8,"Array2","","A column-major array"],[11,"ptr","","Get the pointer to the first element of the array.",30],[11,"mut_ptr","","Get a mutable pointer to the first element of the array.",30],[11,"swap_cols","","Swap two columns of this array.",30],[11,"replace_col","","Replace a column in the array.",30],[10,"row","","Get a row from this array by-value.",30],[10,"swap_rows","","Swap two rows of this array.",30],[11,"swap_elems","","Swap the values at index `a` and `b`",30],[10,"map","","Apply a function to each column.",30],[8,"FixedArray","","Homogeneous arrays of elements that can be converted to and from `[T, ..N]`\narrays."],[10,"into_fixed","","",31],[10,"as_fixed","","",31],[10,"as_mut_fixed","","",31],[10,"from_fixed","","",31],[10,"from_fixed_ref","","",31],[10,"from_fixed_mut","","",31],[8,"Matrix","",""],[10,"mul_s","","Multiply this matrix by a scalar, returning the new matrix.",32],[10,"div_s","","Divide this matrix by a scalar, returning the new matrix.",32],[10,"rem_s","","Take the remainder of this matrix by a scalar, returning the new\nmatrix.",32],[10,"add_m","","Add this matrix with another matrix, returning the new metrix.",32],[10,"sub_m","","Subtract another matrix from this matrix, returning the new matrix.",32],[10,"mul_v","","Multiplay a vector by this matrix, returning a new vector.",32],[10,"mul_m","","Multiply this matrix by another matrix, returning the new matrix.",32],[10,"neg_self","","Negate this matrix in-place (multiply by scalar -1).",32],[10,"mul_self_s","","Multiply this matrix by a scalar, in-place.",32],[10,"div_self_s","","Divide this matrix by a scalar, in-place.",32],[10,"rem_self_s","","Take the remainder of this matrix, in-place.",32],[10,"add_self_m","","Add this matrix with another matrix, in-place.",32],[10,"sub_self_m","","Subtract another matrix from this matrix, in-place.",32],[11,"mul_self_m","","Multiply this matrix by another matrix, in-place.",32],[10,"transpose","","Transpose this matrix, returning a new matrix.",32],[10,"transpose_self","","Transpose this matrix in-place.",32],[10,"determinant","","Take the determinant of this matrix.",32],[10,"diagonal","","Return a vector containing the diagonal of this matrix.",32],[11,"trace","","Return the trace of this matrix. That is, the sum of the diagonal.",32],[10,"invert","","Invert this matrix, returning a new matrix. `m.mul_m(m.invert())` is\nthe identity matrix. Returns `None` if this matrix is not invertible\n(has a determinant of zero).",32],[11,"invert_self","","Invert this matrix in-place.",32],[11,"is_invertible","","Test if this matrix is invertible.",32],[11,"is_identity","","Test if this matrix is the identity matrix. That is, it is diagonal\nand every element in the diagonal is one.",32],[10,"is_diagonal","","Test if this is a diagonal matrix. That is, every element outside of\nthe diagonal is 0.",32],[10,"is_symmetric","","Test if this matrix is symmetric. That is, it is equal to its\ntranspose.",32],[8,"ToMatrix2","","Represents types which can be converted to a Matrix2"],[10,"to_matrix2","","Convert this value to a Matrix2",33],[8,"ToMatrix3","","Represents types which can be converted to a Matrix3"],[10,"to_matrix3","","Convert this value to a Matrix3",34],[8,"ToMatrix4","","Represents types which can be converted to a Matrix4"],[10,"to_matrix4","","Convert this value to a Matrix4",35],[8,"ToQuaternion","","Represents types which can be expressed as a quaternion."],[10,"to_quaternion","","Convert this value to a quaternion.",36],[8,"Vector","","A trait that specifies a range of numeric operations for vectors. Not all\nof these make sense from a linear algebra point of view, but are included\nfor pragmatic reasons."],[10,"add_s","","Add a scalar to this vector, returning a new vector.",37],[10,"sub_s","","Subtract a scalar from this vector, returning a new vector.",37],[10,"mul_s","","Multiply this vector by a scalar, returning a new vector.",37],[10,"div_s","","Divide this vector by a scalar, returning a new vector.",37],[10,"rem_s","","Take the remainder of this vector by a scalar, returning a new vector.",37],[10,"add_v","","Add this vector to another, returning a new vector.",37],[10,"sub_v","","Subtract another vector from this one, returning a new vector.",37],[10,"mul_v","","Multiply this vector by another, returning a new vector.",37],[10,"div_v","","Divide this vector by another, returning a new vector.",37],[10,"rem_v","","Take the remainder of this vector by another, returning a new scalar.",37],[10,"neg_self","","Negate this vector in-place.",37],[10,"add_self_s","","Add a scalar to this vector in-place.",37],[10,"sub_self_s","","Subtract a scalar from this vector, in-place.",37],[10,"mul_self_s","","Multiply this vector by a scalar, in-place.",37],[10,"div_self_s","","Divide this vector by a scalar, in-place.",37],[10,"rem_self_s","","Take the remainder of this vector by a scalar, in-place.",37],[10,"add_self_v","","Add another vector to this one, in-place.",37],[10,"sub_self_v","","Subtract another vector from this one, in-place.",37],[10,"mul_self_v","","Multiply this matrix by another, in-place.",37],[10,"div_self_v","","Divide this matrix by anothor, in-place.",37],[10,"rem_self_v","","Take the remainder of this vector by another, in-place.",37],[10,"comp_add","","The sum of each component of the vector.",37],[10,"comp_mul","","The product of each component of the vector.",37],[11,"dot","","Vector dot product.",37],[10,"comp_min","","The minimum component of the vector.",37],[10,"comp_max","","The maximum component of the vector.",37],[8,"EuclideanVector","","Specifies geometric operations for vectors. This is only implemented for\n2-dimensional and 3-dimensional vectors."],[11,"is_perpendicular","","Returns `true` if the vector is perpendicular (at right angles) to the\nother vector.",38],[11,"length2","","Returns the squared length of the vector. This does not perform an\nexpensive square root operation like in the `length` method and can\ntherefore be more efficient for comparing the lengths of two vectors.",38],[11,"length","","The norm of the vector.",38],[10,"angle","","The angle between the vector and `other`, in radians.",38],[11,"normalize","","Returns a vector with the same direction, but with a `length` (or\n`norm`) of `1`.",38],[11,"normalize_to","","Returns a vector with the same direction and a given `length`.",38],[11,"lerp","","Returns the result of linarly interpolating the length of the vector\ntowards the length of `other` by the specified amount.",38],[11,"normalize_self","","Normalises the vector to a length of `1`.",38],[11,"normalize_self_to","","Normalizes the vector to `length`.",38],[11,"lerp_self","","Linearly interpolates the length of the vector towards the length of\n`other` by the specified amount.",38],[8,"Angle","","Operations on angles."],[10,"from","","Create a new angle from any other valid angle.",39],[11,"neg_self","","Negate this angle, in-place.",39],[11,"add_a","","Add this angle with another, returning the new angle.",39],[11,"sub_a","","Subtract another angle from this one, returning the new angle.",39],[11,"div_a","","Divide this angle by another, returning the ratio.",39],[11,"rem_a","","Take the remainder of this angle with another.",39],[11,"mul_s","","Multiply this angle by a scalar, returning the new angle.",39],[11,"div_s","","Divide this angle by a scalar, returing the new angle.",39],[11,"rem_s","","Take the remainder of this angle by a scalar, returning the new angle.",39],[11,"add_self_a","","Add this angle with another, in-place.",39],[11,"sub_self_a","","Subtract another angle from this one, in-place.",39],[11,"mul_self_s","","Multiply this angle by a scalar, in-place.",39],[11,"div_self_s","","Divide this angle by a scalar, in-place.",39],[11,"rem_self_s","","Take the remainder of this angle by a scalar, in-place.",39],[11,"normalize","","Return the angle, normalized to the range `[0, full_turn)`.",39],[11,"normalize_self","","Normalize the angle to the range `[0, full_turn)`.",39],[11,"opposite","","Return the angle rotated by half a turn",39],[11,"bisect","","Returns the interior bisector of the two angles",39],[10,"full_turn","","",39],[11,"turn_div_2","","",39],[11,"turn_div_3","","",39],[11,"turn_div_4","","",39],[11,"turn_div_6","","",39],[11,"equiv","","",39],[8,"ToRad","","Represents types that can be converted to radians."],[10,"to_rad","","Convert this value to radians.",40],[8,"ToDeg","","Represents types that can be converted to degrees."],[10,"to_deg","","Convert this value to degrees.",41],[8,"Point","","Specifies the numeric operations for point types."],[10,"origin","","Create a point at the origin.",42],[10,"from_vec","","Create a point from a vector.",42],[10,"to_vec","","Convert a point to a vector.",42],[10,"mul_s","","Multiply each component by a scalar, returning the new point.",42],[10,"div_s","","Divide each component by a scalar, returning the new point.",42],[10,"rem_s","","Subtract a scalar from each component, returning the new point.",42],[10,"add_v","","Add a vector to this point, returning the new point.",42],[10,"sub_p","","Subtract another point from this one, returning a new vector.",42],[10,"mul_self_s","","Multiply each component by a scalar, in-place.",42],[10,"div_self_s","","Divide each component by a scalar, in-place.",42],[10,"rem_self_s","","Take the remainder of each component by a scalar, in-place.",42],[10,"add_self_v","","Add a vector to this point, in-place.",42],[10,"dot","","This is a weird one, but its useful for plane calculations.",42],[10,"min","","",42],[10,"max","","",42],[8,"Rotation","","A trait for a generic rotation. A rotation is a transformation that\ncreates a circular motion, and preserves at least one point in the space."],[10,"identity","","Create the identity transform (causes no transformation).",43],[10,"look_at","","Create a rotation to a given direction with an 'up' vector",43],[10,"between_vectors","","Create a shortest rotation to transform vector 'a' into 'b'.\nBoth given vectors are assumed to have unit length.",43],[10,"rotate_vector","","Rotate a vector using this rotation.",43],[11,"rotate_point","","Rotate a point using this rotation, by converting it to its\nrepresentation as a vector.",43],[11,"rotate_ray","","Rotate a ray using this rotation.",43],[10,"concat","","Create a new rotation which combines both this rotation, and another.",43],[10,"invert","","Create a new rotation which \"un-does\" this rotation. That is,\n`r.concat(r.invert())` is the identity.",43],[11,"concat_self","","Modify this rotation in-place by combining it with another.",43],[11,"invert_self","","Invert this rotation in-place.",43],[8,"Rotation2","","A two-dimensional rotation."],[10,"from_angle","","Create a rotation by a given angle. Thus is a redundant case of both\nfrom_axis_angle() and from_euler() for 2D space.",44],[8,"Rotation3","","A three-dimensional rotation."],[10,"from_axis_angle","","Create a rotation using an angle around a given axis.",45],[10,"from_euler","","Create a rotation from a set of euler angles.",45],[11,"from_angle_x","","Create a rotation from an angle around the `x` axis (pitch).",45],[11,"from_angle_y","","Create a rotation from an angle around the `y` axis (yaw).",45],[11,"from_angle_z","","Create a rotation from an angle around the `z` axis (roll).",45],[8,"ToBasis2","","Represents types which can be converted to a rotation matrix."],[10,"to_rot2","","Convert this type to a rotation matrix.",46],[8,"ToBasis3","","Represents types which can be converted to a rotation matrix."],[10,"to_rot3","","Convert this type to a rotation matrix.",47],[8,"Transform","","A trait representing an [affine\ntransformation](https://en.wikipedia.org/wiki/Affine_transformation) that\ncan be applied to points or vectors. An affine transformation is one which"],[10,"identity","","Create an identity transformation. That is, a transformation which\ndoes nothing.",48],[10,"look_at","","Create a transformation that rotates a vector to look at `center` from\n`eye`, using `up` for orientation.",48],[10,"transform_vector","","Transform a vector using this transform.",48],[10,"transform_point","","Transform a point using this transform.",48],[11,"transform_ray","","Transform a ray using this transform.",48],[11,"transform_as_point","","Transform a vector as a point using this transform.",48],[10,"concat","","Combine this transform with another, yielding a new transformation\nwhich has the effects of both.",48],[10,"invert","","Create a transform that \"un-does\" this one.",48],[11,"concat_self","","Combine this transform with another, in-place.",48],[11,"invert_self","","Invert this transform in-place, failing if the transformation is not\ninvertible.",48],[8,"Transform3","",""],[8,"Projection","",""],[10,"to_frustum","","",49],[8,"Aabb","",""],[10,"new","","Create a new AABB using two points as opposing corners.",50],[10,"min","","Return a shared reference to the point nearest to (-inf, -inf).",50],[10,"max","","Return a shared reference to the point nearest to (inf, inf).",50],[11,"dim","","Return the dimensions of this AABB.",50],[11,"volume","","Return the volume this AABB encloses.",50],[11,"center","","Return the center point of this AABB.",50],[10,"contains","","Tests whether a point is cointained in the box, inclusive for min corner\nand exclusive for the max corner.",50],[11,"grow","","Returns a new AABB that is grown to include the given point.",50],[11,"add_v","","Add a vector to every point in the AABB, returning a new AABB.",50],[11,"mul_s","","Multiply every point in the AABB by a scalar, returning a new AABB.",50],[11,"mul_v","","Multiply every point in the AABB by a vector, returning a new AABB.",50],[8,"Intersect","",""],[10,"intersection","","",51],[8,"ApproxEq","",""],[11,"approx_epsilon","","",52],[11,"approx_eq","","",52],[10,"approx_eq_eps","","",52],[8,"PartialOrd","","A trait providing a [partial ordering](http://mathworld.wolfram.com/PartialOrder.html)."],[10,"partial_min","","",53],[10,"partial_max","","",53],[8,"BaseNum","","Base numeric types with partial ordering"],[8,"BaseInt","","Base integer types"],[8,"BaseFloat","","Base floating point types"],[8,"One","","Multiplicative neutral element"],[10,"one","","",54],[8,"Zero","","Additive neutral element"],[10,"zero","","",55],[10,"is_zero","","",55],[14,"assert_approx_eq_eps!","",""],[14,"assert_approx_eq!","",""],[11,"ptr","","Get the pointer to the first element of the array.",29],[11,"mut_ptr","","Get a mutable pointer to the first element of the array.",29],[11,"swap_elems","","Swap the elements at indices `i` and `j` in-place.",29],[11,"replace_elem","","Replace an element in the array.",29],[11,"ptr","","Get the pointer to the first element of the array.",30],[11,"mut_ptr","","Get a mutable pointer to the first element of the array.",30],[11,"swap_cols","","Swap two columns of this array.",30],[11,"replace_col","","Replace a column in the array.",30],[11,"swap_elems","","Swap the values at index `a` and `b`",30],[11,"mul_self_m","","Multiply this matrix by another matrix, in-place.",32],[11,"trace","","Return the trace of this matrix. That is, the sum of the diagonal.",32],[11,"invert_self","","Invert this matrix in-place.",32],[11,"is_invertible","","Test if this matrix is invertible.",32],[11,"is_identity","","Test if this matrix is the identity matrix. That is, it is diagonal\nand every element in the diagonal is one.",32],[11,"dot","","Vector dot product.",37],[11,"is_perpendicular","","Returns `true` if the vector is perpendicular (at right angles) to the\nother vector.",38],[11,"length2","","Returns the squared length of the vector. This does not perform an\nexpensive square root operation like in the `length` method and can\ntherefore be more efficient for comparing the lengths of two vectors.",38],[11,"length","","The norm of the vector.",38],[11,"normalize","","Returns a vector with the same direction, but with a `length` (or\n`norm`) of `1`.",38],[11,"normalize_to","","Returns a vector with the same direction and a given `length`.",38],[11,"lerp","","Returns the result of linarly interpolating the length of the vector\ntowards the length of `other` by the specified amount.",38],[11,"normalize_self","","Normalises the vector to a length of `1`.",38],[11,"normalize_self_to","","Normalizes the vector to `length`.",38],[11,"lerp_self","","Linearly interpolates the length of the vector towards the length of\n`other` by the specified amount.",38],[11,"neg_self","","Negate this angle, in-place.",39],[11,"add_a","","Add this angle with another, returning the new angle.",39],[11,"sub_a","","Subtract another angle from this one, returning the new angle.",39],[11,"div_a","","Divide this angle by another, returning the ratio.",39],[11,"rem_a","","Take the remainder of this angle with another.",39],[11,"mul_s","","Multiply this angle by a scalar, returning the new angle.",39],[11,"div_s","","Divide this angle by a scalar, returing the new angle.",39],[11,"rem_s","","Take the remainder of this angle by a scalar, returning the new angle.",39],[11,"add_self_a","","Add this angle with another, in-place.",39],[11,"sub_self_a","","Subtract another angle from this one, in-place.",39],[11,"mul_self_s","","Multiply this angle by a scalar, in-place.",39],[11,"div_self_s","","Divide this angle by a scalar, in-place.",39],[11,"rem_self_s","","Take the remainder of this angle by a scalar, in-place.",39],[11,"normalize","","Return the angle, normalized to the range `[0, full_turn)`.",39],[11,"normalize_self","","Normalize the angle to the range `[0, full_turn)`.",39],[11,"opposite","","Return the angle rotated by half a turn",39],[11,"bisect","","Returns the interior bisector of the two angles",39],[11,"turn_div_2","","",39],[11,"turn_div_3","","",39],[11,"turn_div_4","","",39],[11,"turn_div_6","","",39],[11,"equiv","","",39],[11,"rotate_point","","Rotate a point using this rotation, by converting it to its\nrepresentation as a vector.",43],[11,"rotate_ray","","Rotate a ray using this rotation.",43],[11,"concat_self","","Modify this rotation in-place by combining it with another.",43],[11,"invert_self","","Invert this rotation in-place.",43],[11,"from_angle_x","","Create a rotation from an angle around the `x` axis (pitch).",45],[11,"from_angle_y","","Create a rotation from an angle around the `y` axis (yaw).",45],[11,"from_angle_z","","Create a rotation from an angle around the `z` axis (roll).",45],[11,"transform_ray","","Transform a ray using this transform.",48],[11,"transform_as_point","","Transform a vector as a point using this transform.",48],[11,"concat_self","","Combine this transform with another, in-place.",48],[11,"invert_self","","Invert this transform in-place, failing if the transformation is not\ninvertible.",48],[11,"dim","","Return the dimensions of this AABB.",50],[11,"volume","","Return the volume this AABB encloses.",50],[11,"center","","Return the center point of this AABB.",50],[11,"grow","","Returns a new AABB that is grown to include the given point.",50],[11,"add_v","","Add a vector to every point in the AABB, returning a new AABB.",50],[11,"mul_s","","Multiply every point in the AABB by a scalar, returning a new AABB.",50],[11,"mul_v","","Multiply every point in the AABB by a vector, returning a new AABB.",50],[11,"approx_epsilon","","",52],[11,"approx_eq","","",52]],"paths":[[3,"Matrix2"],[3,"Matrix3"],[3,"Matrix4"],[3,"Quaternion"],[3,"Vector2"],[3,"Vector3"],[3,"Vector4"],[3,"Rad"],[3,"Deg"],[3,"Plane"],[3,"Point2"],[3,"Point3"],[3,"Line"],[3,"Ray"],[3,"Decomposed"],[3,"AffineMatrix3"],[3,"PerspectiveFov"],[3,"Perspective"],[3,"Ortho"],[3,"Aabb2"],[3,"Aabb3"],[3,"Cylinder"],[3,"Frustum"],[3,"FrustumPoints"],[3,"Obb2"],[3,"Obb3"],[3,"Sphere"],[3,"Basis2"],[3,"Basis3"],[8,"Array1"],[8,"Array2"],[8,"FixedArray"],[8,"Matrix"],[8,"ToMatrix2"],[8,"ToMatrix3"],[8,"ToMatrix4"],[8,"ToQuaternion"],[8,"Vector"],[8,"EuclideanVector"],[8,"Angle"],[8,"ToRad"],[8,"ToDeg"],[8,"Point"],[8,"Rotation"],[8,"Rotation2"],[8,"Rotation3"],[8,"ToBasis2"],[8,"ToBasis3"],[8,"Transform"],[8,"Projection"],[8,"Aabb"],[8,"Intersect"],[8,"ApproxEq"],[8,"PartialOrd"],[8,"One"],[8,"Zero"]]};

searchIndex['num'] = {"items":[[0,"","num","Simple numerics."],[5,"zero","","Returns the additive identity, `0`."],[5,"one","","Returns the multiplicative identity, `1`."],[5,"abs","","Computes the absolute value."],[5,"abs_sub","","The positive difference of two numbers."],[5,"signum","","Returns the sign of the number."],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring."],[0,"bigint","","A Big integer (signed version: `BigInt`, unsigned version: `BigUint`)."],[3,"BigUint","num::bigint","A big unsigned integer type."],[3,"BigInt","","A big signed integer type."],[4,"Sign","","A Sign is a `BigInt`'s composing element."],[13,"Minus","","",0],[13,"NoSign","","",0],[13,"Plus","","",0],[4,"ParseBigIntError","",""],[13,"ParseInt","","",1],[13,"Other","","",1],[0,"big_digit","",""],[5,"from_doublebigdigit","num::bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s."],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`"],[17,"BITS","",""],[17,"BASE","",""],[6,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`'s composing element."],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`."],[17,"ZERO_BIG_DIGIT","",""],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`."],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`."],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3],[8,"RandBigInt","",""],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4],[11,"fmt","","",5],[11,"decode","","",5],[11,"encode","","",5],[11,"clone","","",5],[11,"eq","","",5],[11,"partial_cmp","","",5],[11,"cmp","","",5],[11,"default","","",5],[11,"hash","","",5],[11,"fmt","","",5],[6,"Err","",""],[11,"from_str","","",5],[6,"Output","",""],[11,"bitand","","",5],[6,"Output","",""],[6,"Output","",""],[11,"bitand","","",5],[6,"Output","",""],[6,"Output","",""],[11,"bitor","","",5],[6,"Output","",""],[6,"Output","",""],[11,"bitor","","",5],[6,"Output","",""],[6,"Output","",""],[11,"bitxor","","",5],[6,"Output","",""],[6,"Output","",""],[11,"bitxor","","",5],[6,"Output","",""],[6,"Output","",""],[11,"shl","","",5],[6,"Output","",""],[6,"Output","",""],[11,"shr","","",5],[6,"Output","",""],[11,"zero","","",5],[11,"is_zero","","",5],[11,"one","","",5],[6,"Output","",""],[11,"add","","",5],[6,"Output","",""],[6,"Output","",""],[11,"add","","",5],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",5],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",5],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",5],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",5],[6,"Output","",""],[6,"Output","",""],[11,"div","","",5],[6,"Output","",""],[6,"Output","",""],[11,"div","","",5],[6,"Output","",""],[6,"Output","",""],[11,"rem","","",5],[6,"Output","",""],[6,"Output","",""],[11,"rem","","",5],[6,"Output","",""],[6,"Output","",""],[11,"neg","","",5],[6,"Output","",""],[11,"checked_add","","",5],[11,"checked_sub","","",5],[11,"checked_mul","","",5],[11,"checked_div","","",5],[11,"div_rem","","",5],[11,"div_floor","","",5],[11,"mod_floor","","",5],[11,"div_mod_floor","","",5],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5],[11,"to_i64","","",5],[11,"to_u64","","",5],[11,"from_i64","","",5],[11,"from_u64","","",5],[11,"to_biguint","","",6],[11,"to_biguint","","",5],[6,"Err","",""],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5],[11,"new","","Creates and initializes a `BigUint`.",5],[11,"from_slice","","Creates and initializes a `BigUint`.",5],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5],[11,"decode","","",0],[11,"encode","","",0],[11,"fmt","","",0],[11,"clone","","",0],[11,"cmp","","",0],[11,"partial_cmp","","",0],[11,"lt","","",0],[11,"le","","",0],[11,"gt","","",0],[11,"ge","","",0],[11,"eq","","",0],[11,"ne","","",0],[6,"Output","",""],[11,"neg","","Negate Sign value.",0],[11,"fmt","","",6],[11,"decode","","",6],[11,"encode","","",6],[11,"clone","","",6],[11,"eq","","",6],[11,"partial_cmp","","",6],[11,"cmp","","",6],[11,"default","","",6],[11,"fmt","","",6],[11,"hash","","",6],[6,"Err","",""],[11,"from_str","","",6],[6,"Output","",""],[11,"shl","","",6],[6,"Output","",""],[6,"Output","",""],[11,"shr","","",6],[6,"Output","",""],[11,"zero","","",6],[11,"is_zero","","",6],[11,"one","","",6],[11,"abs","","",6],[11,"abs_sub","","",6],[11,"signum","","",6],[11,"is_positive","","",6],[11,"is_negative","","",6],[6,"Output","",""],[11,"add","","",6],[6,"Output","",""],[6,"Output","",""],[11,"add","","",6],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",6],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",6],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",6],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",6],[6,"Output","",""],[6,"Output","",""],[11,"div","","",6],[6,"Output","",""],[6,"Output","",""],[11,"div","","",6],[6,"Output","",""],[6,"Output","",""],[11,"rem","","",6],[6,"Output","",""],[6,"Output","",""],[11,"rem","","",6],[6,"Output","",""],[6,"Output","",""],[11,"neg","","",6],[6,"Output","",""],[11,"checked_add","","",6],[11,"checked_sub","","",6],[11,"checked_mul","","",6],[11,"checked_div","","",6],[11,"div_rem","","",6],[11,"div_floor","","",6],[11,"mod_floor","","",6],[11,"div_mod_floor","","",6],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6],[11,"to_i64","","",6],[11,"to_u64","","",6],[11,"from_i64","","",6],[11,"from_u64","","",6],[11,"to_bigint","","",6],[11,"to_bigint","","",5],[6,"Err","",""],[11,"from_str_radix","","Creates and initializes a BigInt.",6],[11,"new","","Creates and initializes a BigInt.",6],[11,"from_biguint","","Creates and initializes a `BigInt`.",6],[11,"from_slice","","Creates and initializes a `BigInt`.",6],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",6],[11,"checked_add","","",6],[11,"checked_sub","","",6],[11,"checked_mul","","",6],[11,"checked_div","","",6],[11,"eq","","",1],[11,"ne","","",1],[11,"fmt","","",1],[11,"fmt","","",1],[11,"description","","",1],[11,"from_error","","",1],[0,"complex","num","Complex numbers."],[3,"Complex","num::complex","A complex number in Cartesian form."],[12,"re","","Real portion of the complex number",7],[12,"im","","Imaginary portion of the complex number",7],[6,"Complex32","",""],[6,"Complex64","",""],[11,"fmt","","",7],[11,"decode","","",7],[11,"encode","","",7],[11,"hash","","",7],[11,"clone","","",7],[11,"eq","","",7],[11,"ne","","",7],[11,"new","","Create a new Complex",7],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",7],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",7],[11,"scale","","Multiplies `self` by the scalar `t`.",7],[11,"unscale","","Divides `self` by the scalar `t`.",7],[11,"inv","","Returns `1/self`",7],[11,"norm","","Calculate |self|",7],[11,"arg","","Calculate the principal Arg of self.",7],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",7],[11,"from_polar","","Convert a polar representation into a complex number.",7],[6,"Output","",""],[11,"add","","",7],[6,"Output","",""],[6,"Output","",""],[11,"add","","",7],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",7],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",7],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",7],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",7],[6,"Output","",""],[6,"Output","",""],[11,"div","","",7],[6,"Output","",""],[6,"Output","",""],[11,"div","","",7],[6,"Output","",""],[6,"Output","",""],[11,"neg","","",7],[6,"Output","",""],[11,"zero","","",7],[11,"is_zero","","",7],[11,"one","","",7],[11,"fmt","","",7],[0,"integer","num","Integer trait and functions."],[5,"div_rem","num::integer","Simultaneous integer division and modulus"],[5,"div_floor","","Floored integer division"],[5,"mod_floor","","Floored integer modulus"],[5,"div_mod_floor","","Simultaneous floored integer division and modulus"],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive."],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`."],[8,"Integer","",""],[10,"div_floor","","Floored integer division.",8],[10,"mod_floor","","Floored integer modulo, satisfying:",8],[10,"gcd","","Greatest Common Divisor (GCD).",8],[10,"lcm","","Lowest Common Multiple (LCM).",8],[10,"divides","","Deprecated, use `is_multiple_of` instead.",8],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",8],[10,"is_even","","Returns `true` if the number is even.",8],[10,"is_odd","","Returns `true` if the number is odd.",8],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",8],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",8],[0,"iter","num","External iterators for generic mathematics"],[3,"Range","num::iter","An iterator over the range [start, stop)"],[3,"RangeInclusive","","An iterator over the range [start, stop]"],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive))."],[5,"range_inclusive","","Return an iterator over the range [start, stop]"],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[11,"clone","","",9],[6,"Item","",""],[11,"next","","",9],[11,"size_hint","","",9],[11,"next_back","","",9],[11,"clone","","",10],[6,"Item","",""],[11,"next","","",10],[11,"size_hint","","",10],[11,"next_back","","",10],[11,"clone","","",11],[6,"Item","",""],[11,"next","","",11],[11,"clone","","",12],[6,"Item","",""],[11,"next","","",12],[0,"traits","num","Numeric traits for generic mathematics"],[8,"Num","num::traits","The base trait for numeric types"],[8,"Zero","","Defines an additive identity element for `Self`."],[10,"zero","","Returns the additive identity element of `Self`, `0`.",13],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",13],[8,"One","","Defines a multiplicative identity element for `Self`."],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",14],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative)."],[10,"abs","","Computes the absolute value.",15],[10,"abs_sub","","The positive difference of two numbers.",15],[10,"signum","","Returns the sign of the number.",15],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15],[8,"Unsigned","","A trait for values which cannot be negative"],[8,"Bounded","","Numbers which have upper and lower bounds"],[10,"min_value","","returns the smallest finite number this type can represent",16],[10,"max_value","","returns the largest finite number this type can represent",16],[8,"Saturating","","Saturating math operations"],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",17],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",17],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow."],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",18],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow."],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",19],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow."],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow\nhappens, `None` is returned.",20],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow."],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that\nhappens, `None` is returned.",21],[0,"rational","num","Rational numbers"],[3,"Ratio","num::rational","Represents the ratio between 2 numbers."],[3,"ParseRatioError","",""],[6,"Rational","","Alias for a `Ratio` of machine-sized integers."],[6,"Rational32","",""],[6,"Rational64","",""],[6,"BigRational","","Alias for arbitrary precision rationals."],[11,"fmt","","",22],[11,"decode","","",22],[11,"encode","","",22],[11,"hash","","",22],[11,"clone","","",22],[11,"from_integer","","Creates a ratio representing the integer `t`.",22],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",22],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",22],[11,"to_integer","","Converts to an integer.",22],[11,"numer","","Gets an immutable reference to the numerator.",22],[11,"denom","","Gets an immutable reference to the denominator.",22],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",22],[11,"reduced","","Returns a `reduce`d copy of self.",22],[11,"recip","","Returns the reciprocal.",22],[11,"floor","","Rounds towards minus infinity.",22],[11,"ceil","","Rounds towards plus infinity.",22],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",22],[11,"trunc","","Rounds towards zero.",22],[11,"fract","","Returns the fractional part of a number.",22],[11,"from_float","","Converts a float into a rational number.",22],[11,"eq","","",22],[11,"ne","","",22],[11,"lt","","",22],[11,"gt","","",22],[11,"le","","",22],[11,"ge","","",22],[11,"partial_cmp","","",22],[11,"cmp","","",22],[6,"Output","",""],[11,"mul","","",22],[6,"Output","",""],[6,"Output","",""],[11,"mul","","",22],[6,"Output","",""],[6,"Output","",""],[11,"div","","",22],[6,"Output","",""],[6,"Output","",""],[11,"div","","",22],[6,"Output","",""],[6,"Output","",""],[11,"add","","",22],[6,"Output","",""],[6,"Output","",""],[11,"add","","",22],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",22],[6,"Output","",""],[6,"Output","",""],[11,"sub","","",22],[6,"Output","",""],[6,"Output","",""],[11,"rem","","",22],[6,"Output","",""],[6,"Output","",""],[11,"rem","","",22],[6,"Output","",""],[6,"Output","",""],[11,"neg","","",22],[6,"Output","",""],[11,"zero","","",22],[11,"is_zero","","",22],[11,"one","","",22],[11,"abs","","",22],[11,"abs_sub","","",22],[11,"signum","","",22],[11,"is_positive","","",22],[11,"is_negative","","",22],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",22],[6,"Err","",""],[11,"from_str","","Parses `numer/denom` or just `numer`.",22],[6,"Err","",""],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",22],[11,"eq","","",23],[11,"ne","","",23],[11,"fmt","","",23],[11,"fmt","","",23],[11,"description","","",23]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"],[3,"Complex"],[8,"Integer"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[3,"Ratio"],[3,"ParseRatioError"]]};

searchIndex['nalgebra'] = {"items":[[0,"","nalgebra","# nalgebra"],[3,"Identity","","Special identity matrix. All its operation are no-ops."],[3,"DMat","","Matrix with dimensions unknown at compile-time."],[3,"DVec","","Heap allocated, dynamically sized vector."],[12,"at","","Components of the vector. Contains as much elements as the vector dimension.",0],[3,"DVec1","","Stack-allocated, dynamically sized vector with a maximum size of 1."],[3,"DVec2","","Stack-allocated, dynamically sized vector with a maximum size of 2."],[3,"DVec3","","Stack-allocated, dynamically sized vector with a maximum size of 3."],[3,"DVec4","","Stack-allocated, dynamically sized vector with a maximum size of 4."],[3,"DVec5","","Stack-allocated, dynamically sized vector with a maximum size of 5."],[3,"DVec6","","Stack-allocated, dynamically sized vector with a maximum size of 6."],[3,"Iso2","","Two dimensional isometry."],[12,"rotation","","The rotation applicable by this isometry.",1],[12,"translation","","The translation applicable by this isometry.",1],[3,"Iso3","","Three dimensional isometry."],[12,"rotation","","The rotation applicable by this isometry.",2],[12,"translation","","The translation applicable by this isometry.",2],[3,"Iso4","","Four dimensional isometry."],[12,"rotation","","The rotation applicable by this isometry.",3],[12,"translation","","The translation applicable by this isometry.",3],[3,"Mat1","","Square matrix of dimension 1."],[12,"m11","","",4],[3,"Mat2","","Square matrix of dimension 2."],[12,"m11","","",5],[12,"m21","","",5],[12,"m12","","",5],[12,"m22","","",5],[3,"Mat3","","Square matrix of dimension 3."],[12,"m11","","",6],[12,"m21","","",6],[12,"m31","","",6],[12,"m12","","",6],[12,"m22","","",6],[12,"m32","","",6],[12,"m13","","",6],[12,"m23","","",6],[12,"m33","","",6],[3,"Mat4","","Square matrix of dimension 4."],[12,"m11","","",7],[12,"m21","","",7],[12,"m31","","",7],[12,"m41","","",7],[12,"m12","","",7],[12,"m22","","",7],[12,"m32","","",7],[12,"m42","","",7],[12,"m13","","",7],[12,"m23","","",7],[12,"m33","","",7],[12,"m43","","",7],[12,"m14","","",7],[12,"m24","","",7],[12,"m34","","",7],[12,"m44","","",7],[3,"Mat5","","Square matrix of dimension 5."],[12,"m11","","",8],[12,"m21","","",8],[12,"m31","","",8],[12,"m41","","",8],[12,"m51","","",8],[12,"m12","","",8],[12,"m22","","",8],[12,"m32","","",8],[12,"m42","","",8],[12,"m52","","",8],[12,"m13","","",8],[12,"m23","","",8],[12,"m33","","",8],[12,"m43","","",8],[12,"m53","","",8],[12,"m14","","",8],[12,"m24","","",8],[12,"m34","","",8],[12,"m44","","",8],[12,"m54","","",8],[12,"m15","","",8],[12,"m25","","",8],[12,"m35","","",8],[12,"m45","","",8],[12,"m55","","",8],[3,"Mat6","","Square matrix of dimension 6."],[12,"m11","","",9],[12,"m21","","",9],[12,"m31","","",9],[12,"m41","","",9],[12,"m51","","",9],[12,"m61","","",9],[12,"m12","","",9],[12,"m22","","",9],[12,"m32","","",9],[12,"m42","","",9],[12,"m52","","",9],[12,"m62","","",9],[12,"m13","","",9],[12,"m23","","",9],[12,"m33","","",9],[12,"m43","","",9],[12,"m53","","",9],[12,"m63","","",9],[12,"m14","","",9],[12,"m24","","",9],[12,"m34","","",9],[12,"m44","","",9],[12,"m54","","",9],[12,"m64","","",9],[12,"m15","","",9],[12,"m25","","",9],[12,"m35","","",9],[12,"m45","","",9],[12,"m55","","",9],[12,"m65","","",9],[12,"m16","","",9],[12,"m26","","",9],[12,"m36","","",9],[12,"m46","","",9],[12,"m56","","",9],[12,"m66","","",9],[3,"Rot2","","Two dimensional rotation matrix."],[3,"Rot3","","Three dimensional rotation matrix."],[3,"Rot4","","Four dimensional rotation matrix."],[3,"Vec0","","Vector of dimension 0."],[3,"Vec1","","Vector of dimension 1."],[12,"x","","First component of the vector.",10],[3,"Vec2","","Vector of dimension 2."],[12,"x","","First component of the vector.",11],[12,"y","","Second component of the vector.",11],[3,"Vec3","","Vector of dimension 3."],[12,"x","","First component of the vector.",12],[12,"y","","Second component of the vector.",12],[12,"z","","Third component of the vector.",12],[3,"Vec4","","Vector of dimension 4."],[12,"x","","First component of the vector.",13],[12,"y","","Second component of the vector.",13],[12,"z","","Third component of the vector.",13],[12,"w","","Fourth component of the vector.",13],[3,"Vec5","","Vector of dimension 5."],[12,"x","","First component of the vector.",14],[12,"y","","Second component of the vector.",14],[12,"z","","Third component of the vector.",14],[12,"w","","Fourth component of the vector.",14],[12,"a","","Fifth of the vector.",14],[3,"Vec6","","Vector of dimension 6."],[12,"x","","First component of the vector.",15],[12,"y","","Second component of the vector.",15],[12,"z","","Third component of the vector.",15],[12,"w","","Fourth component of the vector.",15],[12,"a","","Fifth of the vector.",15],[12,"b","","Sixth component of the vector.",15],[3,"Pnt0","","Point of dimension 0."],[3,"Pnt1","","Point of dimension 1."],[12,"x","","First component of the point.",16],[3,"Pnt2","","Point of dimension 2."],[12,"x","","First component of the point.",17],[12,"y","","Second component of the point.",17],[3,"Pnt3","","Point of dimension 3."],[12,"x","","First component of the point.",18],[12,"y","","Second component of the point.",18],[12,"z","","Third component of the point.",18],[3,"Pnt4","","Point of dimension 4."],[12,"x","","First component of the point.",19],[12,"y","","Second component of the point.",19],[12,"z","","Third component of the point.",19],[12,"w","","Fourth component of the point.",19],[3,"Pnt5","","Point of dimension 5."],[12,"x","","First component of the point.",20],[12,"y","","Second component of the point.",20],[12,"z","","Third component of the point.",20],[12,"w","","Fourth component of the point.",20],[12,"a","","Fifth of the point.",20],[3,"Pnt6","","Point of dimension 6."],[12,"x","","First component of the point.",21],[12,"y","","Second component of the point.",21],[12,"z","","Third component of the point.",21],[12,"w","","Fourth component of the point.",21],[12,"a","","Fifth of the point.",21],[12,"b","","Sixth component of the point.",21],[3,"Persp3","","A 3D perspective projection stored without any matrix."],[3,"PerspMat3","","A 3D perspective projection stored as a 4D matrix."],[3,"Ortho3","","A 3D orthographic projection stored without any matrix."],[3,"OrthoMat3","","A 3D orthographic projection stored as a 4D matrix."],[3,"Quat","","A quaternion."],[12,"w","","The scalar component of the quaternion.",22],[12,"i","","The first vector component of the quaternion.",22],[12,"j","","The second vector component of the quaternion.",22],[12,"k","","The third vector component of the quaternion.",22],[3,"UnitQuat","","A unit quaternion that can represent a 3D rotation."],[4,"POrdering","","Result of a partial ordering."],[13,"PartialLess","","Result of a strict comparison.",23],[13,"PartialEqual","","Equality relationship.",23],[13,"PartialGreater","","Result of a strict comparison.",23],[13,"NotComparable","","Result of a comparison between two objects that are not comparable.",23],[5,"qr","","QR decomposition using Householder reflections."],[5,"householder_matrix","","Get the householder matrix corresponding to a reflexion to the hyperplane\ndefined by `vec`. It can be a reflexion contained in a subspace."],[5,"clamp","","Change the input value to ensure it is on the range `[min, max]`."],[5,"max","","Same as `cmp::max`."],[5,"min","","Same as `cmp::min`."],[5,"inf","","Returns the infimum of `a` and `b`."],[5,"sup","","Returns the supremum of `a` and `b`."],[5,"partial_cmp","","Compare `a` and `b` using a partial ordering relation."],[5,"partial_lt","","Returns `true` iff `a` and `b` are comparable and `a < b`."],[5,"partial_le","","Returns `true` iff `a` and `b` are comparable and `a <= b`."],[5,"partial_gt","","Returns `true` iff `a` and `b` are comparable and `a > b`."],[5,"partial_ge","","Returns `true` iff `a` and `b` are comparable and `a >= b`."],[5,"partial_min","","Return the minimum of `a` and `b` if they are comparable."],[5,"partial_max","","Return the maximum of `a` and `b` if they are comparable."],[5,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`."],[5,"identity","","Create a special identity object."],[5,"zero","","Create a zero-valued value."],[5,"is_zero","","Tests is a value is iqual to zero."],[5,"one","","Create a one-valued value."],[5,"orig","","Returns the trivial origin of an affine space."],[5,"center","","Returns the center of two points."],[5,"dist","","Returns the distance between two points."],[5,"sqdist","","Returns the squared distance between two points."],[5,"perspective3d","","Computes a projection matrix given the frustrum near plane width, height, the field of\nview, and the distance to the clipping planes (`znear` and `zfar`)."],[5,"translation","","Gets the translation applicable by `m`."],[5,"inv_translation","","Gets the inverse translation applicable by `m`."],[5,"append_translation","","Applies the translation `v` to a copy of `m`."],[5,"translate","","Applies a translation to a point."],[5,"inv_translate","","Applies an inverse translation to a point."],[5,"rotation","","Gets the rotation applicable by `m`."],[5,"inv_rotation","","Gets the inverse rotation applicable by `m`."],[5,"append_rotation","","Applies the rotation `v` to a copy of `m`."],[5,"prepend_rotation","","Pre-applies the rotation `v` to a copy of `m`."],[5,"rotate","","Applies a rotation to a vector."],[5,"inv_rotate","","Applies an inverse rotation to a vector."],[5,"append_rotation_wrt_point","","Rotates a copy of `m` by `amount` using `center` as the pivot point."],[5,"append_rotation_wrt_center","","Rotates a copy of `m` by `amount` using `m.translation()` as the pivot point."],[5,"to_rot_mat","","Builds a rotation matrix from `r`."],[5,"absolute_rotate","","Applies a rotation using the absolute values of its components."],[5,"transformation","","Gets the transformation applicable by `m`."],[5,"inv_transformation","","Gets the inverse transformation applicable by `m`."],[5,"append_transformation","","Gets a transformed copy of `m`."],[5,"transform","","Applies a transformation to a vector."],[5,"inv_transform","","Applies an inverse transformation to a vector."],[5,"dot","","Computes the dot product of two vectors."],[5,"norm","","Computes the L2 norm of a vector."],[5,"sqnorm","","Computes the squared L2 norm of a vector."],[5,"normalize","","Gets the normalized version of a vector."],[5,"det","","Computes the determinant of a square matrix."],[5,"cross","","Computes the cross product of two vectors."],[5,"cross_matrix","","Given a vector, computes the matrix which, when multiplied by another vector, computes a cross\nproduct."],[5,"to_homogeneous","","Converts a matrix or vector to homogeneous coordinates."],[5,"from_homogeneous","","Converts a matrix or vector from homogeneous coordinates."],[5,"sample_sphere","","Samples the unit sphere living on the dimension as the samples types."],[5,"approx_eq","","Tests approximate equality."],[5,"approx_eq_eps","","Tests approximate equality using a custom epsilon."],[5,"abs","","Computes a component-wise absolute value."],[5,"inv","","Gets an inverted copy of a matrix."],[5,"transpose","","Gets a transposed copy of a matrix."],[5,"outer","","Computes the outer product of two vectors."],[5,"cov","","Computes the covariance of a set of observations."],[5,"mean","","Computes the mean of a set of observations."],[5,"eigen_qr","","Computes the eigenvalues and eigenvectors of a square matrix usin the QR algorithm."],[5,"new_identity","","Construct the identity matrix for a given dimension"],[5,"canonical_basis","","Computes the canonical basis for a given dimension."],[5,"orthonormal_subspace_basis","","Computes the basis of the orthonormal subspace of a given vector."],[5,"canonical_basis_element","","Gets the (0-based) i-th element of the canonical basis of V."],[5,"diag","","Gets the diagonal of a square matrix."],[5,"dim","","Gets the dimension an object lives in."],[5,"shape","","Gets the indexable range of an object."],[5,"cast","","Converts an object from one type to another."],[11,"clone","","",24],[11,"eq","","",24],[11,"ne","","",24],[11,"new_uninitialized","","Creates an uninitialized matrix.",24],[11,"new_zeros","","Builds a matrix filled with zeros.",24],[11,"is_zero","","Tests if all components of the matrix are zeroes.",24],[11,"reset","","",24],[11,"new_random","","Builds a matrix filled with random values.",24],[11,"new_ones","","Builds a matrix filled with a given constant.",24],[11,"from_elem","","Builds a matrix filled with a given constant.",24],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `DMat` stores its data\nin column-major order.",24],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `DMat` stores its data\nin column-major order.",24],[11,"from_fn","","Builds a matrix filled with a given constant.",24],[11,"nrows","","The number of row on the matrix.",24],[11,"ncols","","The number of columns on the matrix.",24],[11,"to_vec","","Transforms this matrix isizeo an array. This consumes the matrix and is O(1).\nThe returned vector contains the matrix data in column-major order.",24],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",24],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",24],[11,"new_identity","","Builds an identity matrix.",24],[11,"set","","Changes the value of a component of the matrix.",24],[11,"unsafe_set","","Just like `set` without bounds checking.",24],[11,"at","","Reads the value of a component of the matrix.",24],[11,"unsafe_at","","Just like `at` without bounds checking.",24],[11,"swap","","",24],[11,"shape","","",24],[11,"index","","",24],[11,"index_mut","","",24],[11,"mul","","",24],[11,"mul","","",24],[11,"mul","","",0],[11,"inv","","",24],[11,"inv_mut","","",24],[11,"transpose","","",24],[11,"transpose_mut","","",24],[11,"mean","","",24],[11,"cov","","",24],[11,"col_slice","","",24],[11,"row_slice","","",24],[11,"from_diag","","",24],[11,"set_diag","","",24],[11,"diag","","",24],[11,"approx_epsilon","","",24],[11,"approx_ulps","","",24],[11,"approx_eq_eps","","",24],[11,"approx_eq_ulps","","",24],[11,"fmt","","",24],[11,"mul","","",24],[11,"div","","",24],[11,"add","","",24],[11,"sub","","",24],[11,"clone","","",0],[11,"fmt","","",0],[11,"eq","","",0],[11,"ne","","",0],[11,"new_uninitialized","","Creates an uninitialized vec.",0],[11,"from_elem","","Builds a vector filled with a constant.",0],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",0],[11,"from_fn","","Builds a vector filled with the result of a function.",0],[11,"len","","",0],[11,"from_iter","","",0],[11,"new_zeros","","Builds a vector filled with zeros.",0],[11,"is_zero","","Tests if all components of the vector are zeroes.",0],[11,"as_slice","","Slices this vector.",0],[11,"as_mut_slice","","Mutably slices this vector.",0],[11,"shape","","",0],[11,"at","","",0],[11,"set","","",0],[11,"swap","","",0],[11,"unsafe_at","","",0],[11,"unsafe_set","","",0],[11,"index","","",0],[11,"index_mut","","",0],[11,"new_ones","","Builds a vector filled with ones.",0],[11,"new_random","","Builds a vector filled with random values.",0],[11,"iter","","",0],[11,"iter_mut","","",0],[11,"axpy","","",0],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",0],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",0],[11,"mul","","",0],[11,"div","","",0],[11,"add","","",0],[11,"sub","","",0],[11,"neg","","",0],[11,"dot","","",0],[11,"sqnorm","","",0],[11,"normalize","","",0],[11,"normalize_mut","","",0],[11,"approx_epsilon","","",0],[11,"approx_ulps","","",0],[11,"approx_eq_eps","","",0],[11,"approx_eq_ulps","","",0],[11,"mul","","",0],[11,"div","","",0],[11,"add","","",0],[11,"sub","","",0],[11,"len","","",25],[11,"eq","","",25],[11,"clone","","",25],[11,"new_zeros","","Builds a vector filled with zeros.",25],[11,"is_zero","","Tests if all components of the vector are zeroes.",25],[11,"as_slice","","Slices this vector.",25],[11,"as_mut_slice","","Mutably slices this vector.",25],[11,"shape","","",25],[11,"at","","",25],[11,"set","","",25],[11,"swap","","",25],[11,"unsafe_at","","",25],[11,"unsafe_set","","",25],[11,"index","","",25],[11,"index_mut","","",25],[11,"new_ones","","Builds a vector filled with ones.",25],[11,"new_random","","Builds a vector filled with random values.",25],[11,"iter","","",25],[11,"iter_mut","","",25],[11,"axpy","","",25],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",25],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",25],[11,"mul","","",25],[11,"div","","",25],[11,"add","","",25],[11,"sub","","",25],[11,"neg","","",25],[11,"dot","","",25],[11,"sqnorm","","",25],[11,"normalize","","",25],[11,"normalize_mut","","",25],[11,"approx_epsilon","","",25],[11,"approx_ulps","","",25],[11,"approx_eq_eps","","",25],[11,"approx_eq_ulps","","",25],[11,"mul","","",25],[11,"div","","",25],[11,"add","","",25],[11,"sub","","",25],[11,"from_elem","","Builds a vector filled with a constant.",25],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",25],[11,"from_fn","","Builds a vector filled with the result of a function.",25],[11,"from_iter","","",25],[11,"len","","",26],[11,"eq","","",26],[11,"clone","","",26],[11,"new_zeros","","Builds a vector filled with zeros.",26],[11,"is_zero","","Tests if all components of the vector are zeroes.",26],[11,"as_slice","","Slices this vector.",26],[11,"as_mut_slice","","Mutably slices this vector.",26],[11,"shape","","",26],[11,"at","","",26],[11,"set","","",26],[11,"swap","","",26],[11,"unsafe_at","","",26],[11,"unsafe_set","","",26],[11,"index","","",26],[11,"index_mut","","",26],[11,"new_ones","","Builds a vector filled with ones.",26],[11,"new_random","","Builds a vector filled with random values.",26],[11,"iter","","",26],[11,"iter_mut","","",26],[11,"axpy","","",26],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",26],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",26],[11,"mul","","",26],[11,"div","","",26],[11,"add","","",26],[11,"sub","","",26],[11,"neg","","",26],[11,"dot","","",26],[11,"sqnorm","","",26],[11,"normalize","","",26],[11,"normalize_mut","","",26],[11,"approx_epsilon","","",26],[11,"approx_ulps","","",26],[11,"approx_eq_eps","","",26],[11,"approx_eq_ulps","","",26],[11,"mul","","",26],[11,"div","","",26],[11,"add","","",26],[11,"sub","","",26],[11,"from_elem","","Builds a vector filled with a constant.",26],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",26],[11,"from_fn","","Builds a vector filled with the result of a function.",26],[11,"from_iter","","",26],[11,"len","","",27],[11,"eq","","",27],[11,"clone","","",27],[11,"new_zeros","","Builds a vector filled with zeros.",27],[11,"is_zero","","Tests if all components of the vector are zeroes.",27],[11,"as_slice","","Slices this vector.",27],[11,"as_mut_slice","","Mutably slices this vector.",27],[11,"shape","","",27],[11,"at","","",27],[11,"set","","",27],[11,"swap","","",27],[11,"unsafe_at","","",27],[11,"unsafe_set","","",27],[11,"index","","",27],[11,"index_mut","","",27],[11,"new_ones","","Builds a vector filled with ones.",27],[11,"new_random","","Builds a vector filled with random values.",27],[11,"iter","","",27],[11,"iter_mut","","",27],[11,"axpy","","",27],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",27],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",27],[11,"mul","","",27],[11,"div","","",27],[11,"add","","",27],[11,"sub","","",27],[11,"neg","","",27],[11,"dot","","",27],[11,"sqnorm","","",27],[11,"normalize","","",27],[11,"normalize_mut","","",27],[11,"approx_epsilon","","",27],[11,"approx_ulps","","",27],[11,"approx_eq_eps","","",27],[11,"approx_eq_ulps","","",27],[11,"mul","","",27],[11,"div","","",27],[11,"add","","",27],[11,"sub","","",27],[11,"from_elem","","Builds a vector filled with a constant.",27],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",27],[11,"from_fn","","Builds a vector filled with the result of a function.",27],[11,"from_iter","","",27],[11,"len","","",28],[11,"eq","","",28],[11,"clone","","",28],[11,"new_zeros","","Builds a vector filled with zeros.",28],[11,"is_zero","","Tests if all components of the vector are zeroes.",28],[11,"as_slice","","Slices this vector.",28],[11,"as_mut_slice","","Mutably slices this vector.",28],[11,"shape","","",28],[11,"at","","",28],[11,"set","","",28],[11,"swap","","",28],[11,"unsafe_at","","",28],[11,"unsafe_set","","",28],[11,"index","","",28],[11,"index_mut","","",28],[11,"new_ones","","Builds a vector filled with ones.",28],[11,"new_random","","Builds a vector filled with random values.",28],[11,"iter","","",28],[11,"iter_mut","","",28],[11,"axpy","","",28],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",28],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",28],[11,"mul","","",28],[11,"div","","",28],[11,"add","","",28],[11,"sub","","",28],[11,"neg","","",28],[11,"dot","","",28],[11,"sqnorm","","",28],[11,"normalize","","",28],[11,"normalize_mut","","",28],[11,"approx_epsilon","","",28],[11,"approx_ulps","","",28],[11,"approx_eq_eps","","",28],[11,"approx_eq_ulps","","",28],[11,"mul","","",28],[11,"div","","",28],[11,"add","","",28],[11,"sub","","",28],[11,"from_elem","","Builds a vector filled with a constant.",28],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",28],[11,"from_fn","","Builds a vector filled with the result of a function.",28],[11,"from_iter","","",28],[11,"len","","",29],[11,"eq","","",29],[11,"clone","","",29],[11,"new_zeros","","Builds a vector filled with zeros.",29],[11,"is_zero","","Tests if all components of the vector are zeroes.",29],[11,"as_slice","","Slices this vector.",29],[11,"as_mut_slice","","Mutably slices this vector.",29],[11,"shape","","",29],[11,"at","","",29],[11,"set","","",29],[11,"swap","","",29],[11,"unsafe_at","","",29],[11,"unsafe_set","","",29],[11,"index","","",29],[11,"index_mut","","",29],[11,"new_ones","","Builds a vector filled with ones.",29],[11,"new_random","","Builds a vector filled with random values.",29],[11,"iter","","",29],[11,"iter_mut","","",29],[11,"axpy","","",29],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",29],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",29],[11,"mul","","",29],[11,"div","","",29],[11,"add","","",29],[11,"sub","","",29],[11,"neg","","",29],[11,"dot","","",29],[11,"sqnorm","","",29],[11,"normalize","","",29],[11,"normalize_mut","","",29],[11,"approx_epsilon","","",29],[11,"approx_ulps","","",29],[11,"approx_eq_eps","","",29],[11,"approx_eq_ulps","","",29],[11,"mul","","",29],[11,"div","","",29],[11,"add","","",29],[11,"sub","","",29],[11,"from_elem","","Builds a vector filled with a constant.",29],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",29],[11,"from_fn","","Builds a vector filled with the result of a function.",29],[11,"from_iter","","",29],[11,"len","","",30],[11,"eq","","",30],[11,"clone","","",30],[11,"new_zeros","","Builds a vector filled with zeros.",30],[11,"is_zero","","Tests if all components of the vector are zeroes.",30],[11,"as_slice","","Slices this vector.",30],[11,"as_mut_slice","","Mutably slices this vector.",30],[11,"shape","","",30],[11,"at","","",30],[11,"set","","",30],[11,"swap","","",30],[11,"unsafe_at","","",30],[11,"unsafe_set","","",30],[11,"index","","",30],[11,"index_mut","","",30],[11,"new_ones","","Builds a vector filled with ones.",30],[11,"new_random","","Builds a vector filled with random values.",30],[11,"iter","","",30],[11,"iter_mut","","",30],[11,"axpy","","",30],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",30],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",30],[11,"mul","","",30],[11,"div","","",30],[11,"add","","",30],[11,"sub","","",30],[11,"neg","","",30],[11,"dot","","",30],[11,"sqnorm","","",30],[11,"normalize","","",30],[11,"normalize_mut","","",30],[11,"approx_epsilon","","",30],[11,"approx_ulps","","",30],[11,"approx_eq_eps","","",30],[11,"approx_eq_ulps","","",30],[11,"mul","","",30],[11,"div","","",30],[11,"add","","",30],[11,"sub","","",30],[11,"from_elem","","Builds a vector filled with a constant.",30],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",30],[11,"from_fn","","Builds a vector filled with the result of a function.",30],[11,"from_iter","","",30],[11,"fmt","","",31],[11,"clone","","",31],[11,"eq","","",31],[11,"ne","","",31],[11,"new","","Creates a new vector.",31],[11,"new_repeat","","Creates a new vector. The parameter is not taken in account.",31],[11,"fmt","","",10],[11,"hash","","",10],[11,"clone","","",10],[11,"decode","","",10],[11,"encode","","",10],[11,"eq","","",10],[11,"ne","","",10],[11,"new","","Creates a new vector.",10],[11,"inf","","",10],[11,"sup","","",10],[11,"partial_cmp","","",10],[11,"partial_lt","","",10],[11,"partial_le","","",10],[11,"partial_gt","","",10],[11,"partial_ge","","",10],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",10],[11,"from","","",10],[11,"as_array","","View this vector as an array.",10],[11,"as_array_mut","","View this vector as a mutable array.",10],[11,"from_array_ref","","View an array as a vector.",10],[11,"from_array_mut","","View an array as a vector.",10],[11,"index","","",10],[11,"index_mut","","",10],[11,"shape","","",10],[11,"at","","",10],[11,"set","","",10],[11,"swap","","",10],[11,"unsafe_at","","",10],[11,"unsafe_set","","",10],[11,"at_fast","","Unsafe read access to a vector element by index.",10],[11,"set_fast","","Unsafe write access to a vector element by index.",10],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",10],[11,"dim","","",10],[11,"len","","",10],[11,"add","","",10],[11,"sub","","",10],[11,"mul","","",10],[11,"div","","",10],[11,"add","","",10],[11,"sub","","",10],[11,"mul","","",10],[11,"div","","",10],[11,"neg","","",10],[11,"dot","","",10],[11,"mul_s","","",10],[11,"div_s","","",10],[11,"add_s","","",10],[11,"sub_s","","",10],[11,"translation","","",10],[11,"inv_translation","","",10],[11,"append_translation_mut","","",10],[11,"append_translation","","",10],[11,"prepend_translation_mut","","",10],[11,"prepend_translation","","",10],[11,"set_translation","","",10],[11,"sqnorm","","",10],[11,"normalize","","",10],[11,"normalize_mut","","",10],[11,"approx_epsilon","","",10],[11,"approx_ulps","","",10],[11,"approx_eq","","",10],[11,"approx_eq_eps","","",10],[11,"approx_eq_ulps","","",10],[11,"one","","",10],[11,"zero","","",10],[11,"is_zero","","",10],[11,"from_iter","","",10],[11,"max_value","","",10],[11,"min_value","","",10],[11,"axpy","","",10],[11,"iter","","",10],[11,"iter_mut","","",10],[11,"to_homogeneous","","",10],[11,"from","","",10],[11,"translate","","",10],[11,"inv_translate","","",10],[11,"rotate","","",10],[11,"inv_rotate","","",10],[11,"rotate","","",16],[11,"inv_rotate","","",16],[11,"transform","","",10],[11,"inv_transform","","",10],[11,"to_pnt","","",10],[11,"as_pnt","","",10],[11,"to_pnt","","",10],[11,"as_pnt","","",10],[11,"abs","","",10],[11,"rand","","",10],[11,"fmt","","",11],[11,"hash","","",11],[11,"clone","","",11],[11,"decode","","",11],[11,"encode","","",11],[11,"eq","","",11],[11,"ne","","",11],[11,"new","","Creates a new vector.",11],[11,"inf","","",11],[11,"sup","","",11],[11,"partial_cmp","","",11],[11,"partial_lt","","",11],[11,"partial_le","","",11],[11,"partial_gt","","",11],[11,"partial_ge","","",11],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",11],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",11],[11,"from","","",11],[11,"as_array","","View this vector as an array.",11],[11,"as_array_mut","","View this vector as a mutable array.",11],[11,"from_array_ref","","View an array as a vector.",11],[11,"from_array_mut","","View an array as a vector.",11],[11,"index","","",11],[11,"index_mut","","",11],[11,"shape","","",11],[11,"at","","",11],[11,"set","","",11],[11,"swap","","",11],[11,"unsafe_at","","",11],[11,"unsafe_set","","",11],[11,"at_fast","","Unsafe read access to a vector element by index.",11],[11,"set_fast","","Unsafe write access to a vector element by index.",11],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",11],[11,"dim","","",11],[11,"len","","",11],[11,"add","","",11],[11,"sub","","",11],[11,"mul","","",11],[11,"div","","",11],[11,"add","","",11],[11,"sub","","",11],[11,"mul","","",11],[11,"div","","",11],[11,"neg","","",11],[11,"dot","","",11],[11,"mul_s","","",11],[11,"div_s","","",11],[11,"add_s","","",11],[11,"sub_s","","",11],[11,"translation","","",11],[11,"inv_translation","","",11],[11,"append_translation_mut","","",11],[11,"append_translation","","",11],[11,"prepend_translation_mut","","",11],[11,"prepend_translation","","",11],[11,"set_translation","","",11],[11,"sqnorm","","",11],[11,"normalize","","",11],[11,"normalize_mut","","",11],[11,"approx_epsilon","","",11],[11,"approx_ulps","","",11],[11,"approx_eq","","",11],[11,"approx_eq_eps","","",11],[11,"approx_eq_ulps","","",11],[11,"one","","",11],[11,"zero","","",11],[11,"is_zero","","",11],[11,"from_iter","","",11],[11,"max_value","","",11],[11,"min_value","","",11],[11,"axpy","","",11],[11,"iter","","",11],[11,"iter_mut","","",11],[11,"to_homogeneous","","",11],[11,"from","","",11],[11,"translate","","",11],[11,"inv_translate","","",11],[11,"rotate","","",11],[11,"inv_rotate","","",11],[11,"rotate","","",17],[11,"inv_rotate","","",17],[11,"transform","","",11],[11,"inv_transform","","",11],[11,"to_pnt","","",11],[11,"as_pnt","","",11],[11,"to_pnt","","",11],[11,"as_pnt","","",11],[11,"abs","","",11],[11,"rand","","",11],[11,"fmt","","",12],[11,"hash","","",12],[11,"clone","","",12],[11,"decode","","",12],[11,"encode","","",12],[11,"eq","","",12],[11,"ne","","",12],[11,"new","","Creates a new vector.",12],[11,"inf","","",12],[11,"sup","","",12],[11,"partial_cmp","","",12],[11,"partial_lt","","",12],[11,"partial_le","","",12],[11,"partial_gt","","",12],[11,"partial_ge","","",12],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",12],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",12],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",12],[11,"from","","",12],[11,"as_array","","View this vector as an array.",12],[11,"as_array_mut","","View this vector as a mutable array.",12],[11,"from_array_ref","","View an array as a vector.",12],[11,"from_array_mut","","View an array as a vector.",12],[11,"index","","",12],[11,"index_mut","","",12],[11,"shape","","",12],[11,"at","","",12],[11,"set","","",12],[11,"swap","","",12],[11,"unsafe_at","","",12],[11,"unsafe_set","","",12],[11,"at_fast","","Unsafe read access to a vector element by index.",12],[11,"set_fast","","Unsafe write access to a vector element by index.",12],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",12],[11,"dim","","",12],[11,"len","","",12],[11,"add","","",12],[11,"sub","","",12],[11,"mul","","",12],[11,"div","","",12],[11,"add","","",12],[11,"sub","","",12],[11,"mul","","",12],[11,"div","","",12],[11,"neg","","",12],[11,"dot","","",12],[11,"mul_s","","",12],[11,"div_s","","",12],[11,"add_s","","",12],[11,"sub_s","","",12],[11,"translation","","",12],[11,"inv_translation","","",12],[11,"append_translation_mut","","",12],[11,"append_translation","","",12],[11,"prepend_translation_mut","","",12],[11,"prepend_translation","","",12],[11,"set_translation","","",12],[11,"sqnorm","","",12],[11,"normalize","","",12],[11,"normalize_mut","","",12],[11,"approx_epsilon","","",12],[11,"approx_ulps","","",12],[11,"approx_eq","","",12],[11,"approx_eq_eps","","",12],[11,"approx_eq_ulps","","",12],[11,"one","","",12],[11,"zero","","",12],[11,"is_zero","","",12],[11,"from_iter","","",12],[11,"max_value","","",12],[11,"min_value","","",12],[11,"axpy","","",12],[11,"iter","","",12],[11,"iter_mut","","",12],[11,"to_homogeneous","","",12],[11,"from","","",12],[11,"translate","","",12],[11,"inv_translate","","",12],[11,"rotate","","",12],[11,"inv_rotate","","",12],[11,"rotate","","",18],[11,"inv_rotate","","",18],[11,"transform","","",12],[11,"inv_transform","","",12],[11,"to_pnt","","",12],[11,"as_pnt","","",12],[11,"to_pnt","","",12],[11,"as_pnt","","",12],[11,"abs","","",12],[11,"rand","","",12],[11,"fmt","","",13],[11,"hash","","",13],[11,"clone","","",13],[11,"decode","","",13],[11,"encode","","",13],[11,"eq","","",13],[11,"ne","","",13],[11,"new","","Creates a new vector.",13],[11,"inf","","",13],[11,"sup","","",13],[11,"partial_cmp","","",13],[11,"partial_lt","","",13],[11,"partial_le","","",13],[11,"partial_gt","","",13],[11,"partial_ge","","",13],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",13],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",13],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",13],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",13],[11,"from","","",13],[11,"as_array","","View this vector as an array.",13],[11,"as_array_mut","","View this vector as a mutable array.",13],[11,"from_array_ref","","View an array as a vector.",13],[11,"from_array_mut","","View an array as a vector.",13],[11,"index","","",13],[11,"index_mut","","",13],[11,"shape","","",13],[11,"at","","",13],[11,"set","","",13],[11,"swap","","",13],[11,"unsafe_at","","",13],[11,"unsafe_set","","",13],[11,"at_fast","","Unsafe read access to a vector element by index.",13],[11,"set_fast","","Unsafe write access to a vector element by index.",13],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",13],[11,"dim","","",13],[11,"len","","",13],[11,"canonical_basis","","",13],[11,"orthonormal_subspace_basis","","",13],[11,"canonical_basis_element","","",13],[11,"add","","",13],[11,"sub","","",13],[11,"mul","","",13],[11,"div","","",13],[11,"add","","",13],[11,"sub","","",13],[11,"mul","","",13],[11,"div","","",13],[11,"neg","","",13],[11,"dot","","",13],[11,"mul_s","","",13],[11,"div_s","","",13],[11,"add_s","","",13],[11,"sub_s","","",13],[11,"translation","","",13],[11,"inv_translation","","",13],[11,"append_translation_mut","","",13],[11,"append_translation","","",13],[11,"prepend_translation_mut","","",13],[11,"prepend_translation","","",13],[11,"set_translation","","",13],[11,"sqnorm","","",13],[11,"normalize","","",13],[11,"normalize_mut","","",13],[11,"approx_epsilon","","",13],[11,"approx_ulps","","",13],[11,"approx_eq","","",13],[11,"approx_eq_eps","","",13],[11,"approx_eq_ulps","","",13],[11,"one","","",13],[11,"zero","","",13],[11,"is_zero","","",13],[11,"from_iter","","",13],[11,"max_value","","",13],[11,"min_value","","",13],[11,"axpy","","",13],[11,"iter","","",13],[11,"iter_mut","","",13],[11,"to_homogeneous","","",13],[11,"from","","",13],[11,"translate","","",13],[11,"inv_translate","","",13],[11,"rotate","","",13],[11,"inv_rotate","","",13],[11,"rotate","","",19],[11,"inv_rotate","","",19],[11,"transform","","",13],[11,"inv_transform","","",13],[11,"to_pnt","","",13],[11,"as_pnt","","",13],[11,"to_pnt","","",13],[11,"as_pnt","","",13],[11,"abs","","",13],[11,"rand","","",13],[11,"fmt","","",14],[11,"hash","","",14],[11,"clone","","",14],[11,"decode","","",14],[11,"encode","","",14],[11,"eq","","",14],[11,"ne","","",14],[11,"new","","Creates a new vector.",14],[11,"inf","","",14],[11,"sup","","",14],[11,"partial_cmp","","",14],[11,"partial_lt","","",14],[11,"partial_le","","",14],[11,"partial_gt","","",14],[11,"partial_ge","","",14],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",14],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",14],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",14],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",14],[11,"a","","Create a unit vector with its `$compN` component equal to 1.0.",14],[11,"from","","",14],[11,"as_array","","View this vector as an array.",14],[11,"as_array_mut","","View this vector as a mutable array.",14],[11,"from_array_ref","","View an array as a vector.",14],[11,"from_array_mut","","View an array as a vector.",14],[11,"index","","",14],[11,"index_mut","","",14],[11,"shape","","",14],[11,"at","","",14],[11,"set","","",14],[11,"swap","","",14],[11,"unsafe_at","","",14],[11,"unsafe_set","","",14],[11,"at_fast","","Unsafe read access to a vector element by index.",14],[11,"set_fast","","Unsafe write access to a vector element by index.",14],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",14],[11,"dim","","",14],[11,"len","","",14],[11,"canonical_basis","","",14],[11,"orthonormal_subspace_basis","","",14],[11,"canonical_basis_element","","",14],[11,"add","","",14],[11,"sub","","",14],[11,"mul","","",14],[11,"div","","",14],[11,"add","","",14],[11,"sub","","",14],[11,"mul","","",14],[11,"div","","",14],[11,"neg","","",14],[11,"dot","","",14],[11,"mul_s","","",14],[11,"div_s","","",14],[11,"add_s","","",14],[11,"sub_s","","",14],[11,"translation","","",14],[11,"inv_translation","","",14],[11,"append_translation_mut","","",14],[11,"append_translation","","",14],[11,"prepend_translation_mut","","",14],[11,"prepend_translation","","",14],[11,"set_translation","","",14],[11,"sqnorm","","",14],[11,"normalize","","",14],[11,"normalize_mut","","",14],[11,"approx_epsilon","","",14],[11,"approx_ulps","","",14],[11,"approx_eq","","",14],[11,"approx_eq_eps","","",14],[11,"approx_eq_ulps","","",14],[11,"one","","",14],[11,"zero","","",14],[11,"is_zero","","",14],[11,"from_iter","","",14],[11,"max_value","","",14],[11,"min_value","","",14],[11,"axpy","","",14],[11,"iter","","",14],[11,"iter_mut","","",14],[11,"to_homogeneous","","",14],[11,"from","","",14],[11,"translate","","",14],[11,"inv_translate","","",14],[11,"rotate","","",14],[11,"inv_rotate","","",14],[11,"rotate","","",20],[11,"inv_rotate","","",20],[11,"transform","","",14],[11,"inv_transform","","",14],[11,"to_pnt","","",14],[11,"as_pnt","","",14],[11,"to_pnt","","",14],[11,"as_pnt","","",14],[11,"abs","","",14],[11,"rand","","",14],[11,"fmt","","",15],[11,"hash","","",15],[11,"clone","","",15],[11,"decode","","",15],[11,"encode","","",15],[11,"eq","","",15],[11,"ne","","",15],[11,"new","","Creates a new vector.",15],[11,"inf","","",15],[11,"sup","","",15],[11,"partial_cmp","","",15],[11,"partial_lt","","",15],[11,"partial_le","","",15],[11,"partial_gt","","",15],[11,"partial_ge","","",15],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",15],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",15],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",15],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",15],[11,"a","","Create a unit vector with its `$compN` component equal to 1.0.",15],[11,"b","","Create a unit vector with its `$compN` component equal to 1.0.",15],[11,"from","","",15],[11,"as_array","","View this vector as an array.",15],[11,"as_array_mut","","View this vector as a mutable array.",15],[11,"from_array_ref","","View an array as a vector.",15],[11,"from_array_mut","","View an array as a vector.",15],[11,"index","","",15],[11,"index_mut","","",15],[11,"shape","","",15],[11,"at","","",15],[11,"set","","",15],[11,"swap","","",15],[11,"unsafe_at","","",15],[11,"unsafe_set","","",15],[11,"at_fast","","Unsafe read access to a vector element by index.",15],[11,"set_fast","","Unsafe write access to a vector element by index.",15],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",15],[11,"dim","","",15],[11,"len","","",15],[11,"canonical_basis","","",15],[11,"orthonormal_subspace_basis","","",15],[11,"canonical_basis_element","","",15],[11,"add","","",15],[11,"sub","","",15],[11,"mul","","",15],[11,"div","","",15],[11,"add","","",15],[11,"sub","","",15],[11,"mul","","",15],[11,"div","","",15],[11,"neg","","",15],[11,"dot","","",15],[11,"mul_s","","",15],[11,"div_s","","",15],[11,"add_s","","",15],[11,"sub_s","","",15],[11,"translation","","",15],[11,"inv_translation","","",15],[11,"append_translation_mut","","",15],[11,"append_translation","","",15],[11,"prepend_translation_mut","","",15],[11,"prepend_translation","","",15],[11,"set_translation","","",15],[11,"sqnorm","","",15],[11,"normalize","","",15],[11,"normalize_mut","","",15],[11,"approx_epsilon","","",15],[11,"approx_ulps","","",15],[11,"approx_eq","","",15],[11,"approx_eq_eps","","",15],[11,"approx_eq_ulps","","",15],[11,"one","","",15],[11,"zero","","",15],[11,"is_zero","","",15],[11,"from_iter","","",15],[11,"max_value","","",15],[11,"min_value","","",15],[11,"axpy","","",15],[11,"iter","","",15],[11,"iter_mut","","",15],[11,"translate","","",15],[11,"inv_translate","","",15],[11,"rotate","","",15],[11,"inv_rotate","","",15],[11,"rotate","","",21],[11,"inv_rotate","","",21],[11,"transform","","",15],[11,"inv_transform","","",15],[11,"to_pnt","","",15],[11,"as_pnt","","",15],[11,"to_pnt","","",15],[11,"as_pnt","","",15],[11,"abs","","",15],[11,"rand","","",15],[11,"fmt","","",32],[11,"clone","","",32],[11,"eq","","",32],[11,"ne","","",32],[11,"new","","Creates a new point.",32],[11,"new_repeat","","Creates a new point. The parameter is not taken in account.",32],[11,"fmt","","",16],[11,"hash","","",16],[11,"clone","","",16],[11,"decode","","",16],[11,"encode","","",16],[11,"eq","","",16],[11,"ne","","",16],[11,"new","","Creates a new vector.",16],[11,"orig","","",16],[11,"is_orig","","",16],[11,"inf","","",16],[11,"sup","","",16],[11,"partial_cmp","","",16],[11,"partial_lt","","",16],[11,"partial_le","","",16],[11,"partial_gt","","",16],[11,"partial_ge","","",16],[11,"mul","","",16],[11,"div","","",16],[11,"add","","",16],[11,"sub","","",16],[11,"from","","",16],[11,"as_array","","View this vector as an array.",16],[11,"as_array_mut","","View this vector as a mutable array.",16],[11,"from_array_ref","","View an array as a vector.",16],[11,"from_array_mut","","View an array as a vector.",16],[11,"index","","",16],[11,"index_mut","","",16],[11,"shape","","",16],[11,"at","","",16],[11,"set","","",16],[11,"swap","","",16],[11,"unsafe_at","","",16],[11,"unsafe_set","","",16],[11,"at_fast","","Unsafe read access to a vector element by index.",16],[11,"set_fast","","Unsafe write access to a vector element by index.",16],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",16],[11,"dim","","",16],[11,"len","","",16],[11,"to_vec","","Converts this point to its associated vector.",16],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",16],[11,"to_vec","","",16],[11,"as_vec","","",16],[11,"set_coords","","",16],[11,"sub","","",16],[11,"neg","","",16],[11,"add","","",16],[11,"sub","","",16],[11,"mul_s","","",16],[11,"div_s","","",16],[11,"add_s","","",16],[11,"sub_s","","",16],[11,"approx_epsilon","","",16],[11,"approx_ulps","","",16],[11,"approx_eq","","",16],[11,"approx_eq_eps","","",16],[11,"approx_eq_ulps","","",16],[11,"from_iter","","",16],[11,"max_value","","",16],[11,"min_value","","",16],[11,"axpy","","",16],[11,"iter","","",16],[11,"iter_mut","","",16],[11,"to_homogeneous","","",16],[11,"from","","",16],[11,"rand","","",16],[11,"fmt","","",17],[11,"hash","","",17],[11,"clone","","",17],[11,"decode","","",17],[11,"encode","","",17],[11,"eq","","",17],[11,"ne","","",17],[11,"new","","Creates a new vector.",17],[11,"orig","","",17],[11,"is_orig","","",17],[11,"inf","","",17],[11,"sup","","",17],[11,"partial_cmp","","",17],[11,"partial_lt","","",17],[11,"partial_le","","",17],[11,"partial_gt","","",17],[11,"partial_ge","","",17],[11,"mul","","",17],[11,"div","","",17],[11,"add","","",17],[11,"sub","","",17],[11,"from","","",17],[11,"as_array","","View this vector as an array.",17],[11,"as_array_mut","","View this vector as a mutable array.",17],[11,"from_array_ref","","View an array as a vector.",17],[11,"from_array_mut","","View an array as a vector.",17],[11,"index","","",17],[11,"index_mut","","",17],[11,"shape","","",17],[11,"at","","",17],[11,"set","","",17],[11,"swap","","",17],[11,"unsafe_at","","",17],[11,"unsafe_set","","",17],[11,"at_fast","","Unsafe read access to a vector element by index.",17],[11,"set_fast","","Unsafe write access to a vector element by index.",17],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",17],[11,"dim","","",17],[11,"len","","",17],[11,"to_vec","","Converts this point to its associated vector.",17],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",17],[11,"to_vec","","",17],[11,"as_vec","","",17],[11,"set_coords","","",17],[11,"sub","","",17],[11,"neg","","",17],[11,"add","","",17],[11,"sub","","",17],[11,"mul_s","","",17],[11,"div_s","","",17],[11,"add_s","","",17],[11,"sub_s","","",17],[11,"approx_epsilon","","",17],[11,"approx_ulps","","",17],[11,"approx_eq","","",17],[11,"approx_eq_eps","","",17],[11,"approx_eq_ulps","","",17],[11,"from_iter","","",17],[11,"max_value","","",17],[11,"min_value","","",17],[11,"axpy","","",17],[11,"iter","","",17],[11,"iter_mut","","",17],[11,"to_homogeneous","","",17],[11,"from","","",17],[11,"rand","","",17],[11,"fmt","","",18],[11,"hash","","",18],[11,"clone","","",18],[11,"decode","","",18],[11,"encode","","",18],[11,"eq","","",18],[11,"ne","","",18],[11,"new","","Creates a new vector.",18],[11,"orig","","",18],[11,"is_orig","","",18],[11,"inf","","",18],[11,"sup","","",18],[11,"partial_cmp","","",18],[11,"partial_lt","","",18],[11,"partial_le","","",18],[11,"partial_gt","","",18],[11,"partial_ge","","",18],[11,"mul","","",18],[11,"div","","",18],[11,"add","","",18],[11,"sub","","",18],[11,"from","","",18],[11,"as_array","","View this vector as an array.",18],[11,"as_array_mut","","View this vector as a mutable array.",18],[11,"from_array_ref","","View an array as a vector.",18],[11,"from_array_mut","","View an array as a vector.",18],[11,"index","","",18],[11,"index_mut","","",18],[11,"shape","","",18],[11,"at","","",18],[11,"set","","",18],[11,"swap","","",18],[11,"unsafe_at","","",18],[11,"unsafe_set","","",18],[11,"at_fast","","Unsafe read access to a vector element by index.",18],[11,"set_fast","","Unsafe write access to a vector element by index.",18],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",18],[11,"dim","","",18],[11,"len","","",18],[11,"to_vec","","Converts this point to its associated vector.",18],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",18],[11,"to_vec","","",18],[11,"as_vec","","",18],[11,"set_coords","","",18],[11,"sub","","",18],[11,"neg","","",18],[11,"add","","",18],[11,"sub","","",18],[11,"mul_s","","",18],[11,"div_s","","",18],[11,"add_s","","",18],[11,"sub_s","","",18],[11,"approx_epsilon","","",18],[11,"approx_ulps","","",18],[11,"approx_eq","","",18],[11,"approx_eq_eps","","",18],[11,"approx_eq_ulps","","",18],[11,"from_iter","","",18],[11,"max_value","","",18],[11,"min_value","","",18],[11,"axpy","","",18],[11,"iter","","",18],[11,"iter_mut","","",18],[11,"to_homogeneous","","",18],[11,"from","","",18],[11,"rand","","",18],[11,"fmt","","",19],[11,"hash","","",19],[11,"clone","","",19],[11,"decode","","",19],[11,"encode","","",19],[11,"eq","","",19],[11,"ne","","",19],[11,"new","","Creates a new vector.",19],[11,"orig","","",19],[11,"is_orig","","",19],[11,"inf","","",19],[11,"sup","","",19],[11,"partial_cmp","","",19],[11,"partial_lt","","",19],[11,"partial_le","","",19],[11,"partial_gt","","",19],[11,"partial_ge","","",19],[11,"mul","","",19],[11,"div","","",19],[11,"add","","",19],[11,"sub","","",19],[11,"from","","",19],[11,"as_array","","View this vector as an array.",19],[11,"as_array_mut","","View this vector as a mutable array.",19],[11,"from_array_ref","","View an array as a vector.",19],[11,"from_array_mut","","View an array as a vector.",19],[11,"index","","",19],[11,"index_mut","","",19],[11,"shape","","",19],[11,"at","","",19],[11,"set","","",19],[11,"swap","","",19],[11,"unsafe_at","","",19],[11,"unsafe_set","","",19],[11,"at_fast","","Unsafe read access to a vector element by index.",19],[11,"set_fast","","Unsafe write access to a vector element by index.",19],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",19],[11,"dim","","",19],[11,"len","","",19],[11,"to_vec","","Converts this point to its associated vector.",19],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",19],[11,"to_vec","","",19],[11,"as_vec","","",19],[11,"set_coords","","",19],[11,"sub","","",19],[11,"neg","","",19],[11,"add","","",19],[11,"sub","","",19],[11,"mul_s","","",19],[11,"div_s","","",19],[11,"add_s","","",19],[11,"sub_s","","",19],[11,"approx_epsilon","","",19],[11,"approx_ulps","","",19],[11,"approx_eq","","",19],[11,"approx_eq_eps","","",19],[11,"approx_eq_ulps","","",19],[11,"from_iter","","",19],[11,"max_value","","",19],[11,"min_value","","",19],[11,"axpy","","",19],[11,"iter","","",19],[11,"iter_mut","","",19],[11,"to_homogeneous","","",19],[11,"from","","",19],[11,"rand","","",19],[11,"fmt","","",20],[11,"hash","","",20],[11,"clone","","",20],[11,"decode","","",20],[11,"encode","","",20],[11,"eq","","",20],[11,"ne","","",20],[11,"new","","Creates a new vector.",20],[11,"orig","","",20],[11,"is_orig","","",20],[11,"inf","","",20],[11,"sup","","",20],[11,"partial_cmp","","",20],[11,"partial_lt","","",20],[11,"partial_le","","",20],[11,"partial_gt","","",20],[11,"partial_ge","","",20],[11,"mul","","",20],[11,"div","","",20],[11,"add","","",20],[11,"sub","","",20],[11,"from","","",20],[11,"as_array","","View this vector as an array.",20],[11,"as_array_mut","","View this vector as a mutable array.",20],[11,"from_array_ref","","View an array as a vector.",20],[11,"from_array_mut","","View an array as a vector.",20],[11,"index","","",20],[11,"index_mut","","",20],[11,"shape","","",20],[11,"at","","",20],[11,"set","","",20],[11,"swap","","",20],[11,"unsafe_at","","",20],[11,"unsafe_set","","",20],[11,"at_fast","","Unsafe read access to a vector element by index.",20],[11,"set_fast","","Unsafe write access to a vector element by index.",20],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",20],[11,"dim","","",20],[11,"len","","",20],[11,"to_vec","","Converts this point to its associated vector.",20],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",20],[11,"to_vec","","",20],[11,"as_vec","","",20],[11,"set_coords","","",20],[11,"sub","","",20],[11,"neg","","",20],[11,"add","","",20],[11,"sub","","",20],[11,"mul_s","","",20],[11,"div_s","","",20],[11,"add_s","","",20],[11,"sub_s","","",20],[11,"approx_epsilon","","",20],[11,"approx_ulps","","",20],[11,"approx_eq","","",20],[11,"approx_eq_eps","","",20],[11,"approx_eq_ulps","","",20],[11,"from_iter","","",20],[11,"max_value","","",20],[11,"min_value","","",20],[11,"axpy","","",20],[11,"iter","","",20],[11,"iter_mut","","",20],[11,"to_homogeneous","","",20],[11,"from","","",20],[11,"rand","","",20],[11,"fmt","","",21],[11,"hash","","",21],[11,"clone","","",21],[11,"decode","","",21],[11,"encode","","",21],[11,"eq","","",21],[11,"ne","","",21],[11,"new","","Creates a new vector.",21],[11,"orig","","",21],[11,"is_orig","","",21],[11,"inf","","",21],[11,"sup","","",21],[11,"partial_cmp","","",21],[11,"partial_lt","","",21],[11,"partial_le","","",21],[11,"partial_gt","","",21],[11,"partial_ge","","",21],[11,"mul","","",21],[11,"div","","",21],[11,"add","","",21],[11,"sub","","",21],[11,"from","","",21],[11,"as_array","","View this vector as an array.",21],[11,"as_array_mut","","View this vector as a mutable array.",21],[11,"from_array_ref","","View an array as a vector.",21],[11,"from_array_mut","","View an array as a vector.",21],[11,"index","","",21],[11,"index_mut","","",21],[11,"shape","","",21],[11,"at","","",21],[11,"set","","",21],[11,"swap","","",21],[11,"unsafe_at","","",21],[11,"unsafe_set","","",21],[11,"at_fast","","Unsafe read access to a vector element by index.",21],[11,"set_fast","","Unsafe write access to a vector element by index.",21],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",21],[11,"dim","","",21],[11,"len","","",21],[11,"to_vec","","Converts this point to its associated vector.",21],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",21],[11,"to_vec","","",21],[11,"as_vec","","",21],[11,"set_coords","","",21],[11,"sub","","",21],[11,"neg","","",21],[11,"add","","",21],[11,"sub","","",21],[11,"mul_s","","",21],[11,"div_s","","",21],[11,"add_s","","",21],[11,"sub_s","","",21],[11,"approx_epsilon","","",21],[11,"approx_ulps","","",21],[11,"approx_eq","","",21],[11,"approx_eq_eps","","",21],[11,"approx_eq_ulps","","",21],[11,"from_iter","","",21],[11,"max_value","","",21],[11,"min_value","","",21],[11,"axpy","","",21],[11,"iter","","",21],[11,"iter_mut","","",21],[11,"rand","","",21],[11,"fmt","","",22],[11,"hash","","",22],[11,"clone","","",22],[11,"decode","","",22],[11,"encode","","",22],[11,"eq","","",22],[11,"ne","","",22],[11,"new","","Creates a new quaternion from its components.",22],[11,"vector","","The vector part `(i, j, k)` of this quaternion.",22],[11,"scalar","","The scalar part `w` of this quaternion.",22],[11,"conjugate","","Compute the conjugate of this quaternion.",22],[11,"conjugate_mut","","Replaces this quaternion by its conjugate.",22],[11,"inv","","",22],[11,"inv_mut","","",22],[11,"sqnorm","","",22],[11,"normalize","","",22],[11,"normalize_mut","","",22],[11,"mul","","",22],[11,"div","","",22],[11,"fmt","","",33],[11,"hash","","",33],[11,"clone","","",33],[11,"decode","","",33],[11,"encode","","",33],[11,"eq","","",33],[11,"ne","","",33],[11,"new","","Creates a new unit quaternion from the axis-angle representation of a rotation.",33],[11,"new_with_quat","","Creates a new unit quaternion from a quaternion.",33],[11,"new_with_euler_angles","","Creates a new unit quaternion from Euler angles.",33],[11,"to_rot","","Builds a rotation matrix from this quaternion.",33],[11,"rand","","",22],[11,"new_with_unit_quat","","Creates a new unit quaternion from a quaternion.",33],[11,"quat","","The `Quat` representation of this unit quaternion.",33],[11,"one","","",33],[11,"inv","","",33],[11,"inv_mut","","",33],[11,"rand","","",33],[11,"approx_epsilon","","",33],[11,"approx_ulps","","",33],[11,"approx_eq_eps","","",33],[11,"approx_eq_ulps","","",33],[11,"div","","",33],[11,"mul","","",33],[11,"mul","","",33],[11,"mul","","",33],[11,"mul","","",12],[11,"mul","","",18],[11,"rotation","","",33],[11,"inv_rotation","","",33],[11,"append_rotation_mut","","",33],[11,"append_rotation","","",33],[11,"prepend_rotation_mut","","",33],[11,"prepend_rotation","","",33],[11,"set_rotation","","",33],[11,"rotate","","",33],[11,"inv_rotate","","",33],[11,"rotate","","",33],[11,"inv_rotate","","",33],[11,"transform","","",33],[11,"inv_transform","","",33],[11,"transform","","",33],[11,"inv_transform","","",33],[11,"inf","","",22],[11,"sup","","",22],[11,"partial_cmp","","",22],[11,"partial_lt","","",22],[11,"partial_le","","",22],[11,"partial_gt","","",22],[11,"partial_ge","","",22],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",22],[11,"i","","Create a unit vector with its `$compN` component equal to 1.0.",22],[11,"j","","Create a unit vector with its `$compN` component equal to 1.0.",22],[11,"k","","Create a unit vector with its `$compN` component equal to 1.0.",22],[11,"from","","",22],[11,"as_array","","View this vector as an array.",22],[11,"as_array_mut","","View this vector as a mutable array.",22],[11,"from_array_ref","","View an array as a vector.",22],[11,"from_array_mut","","View an array as a vector.",22],[11,"index","","",22],[11,"index_mut","","",22],[11,"shape","","",22],[11,"at","","",22],[11,"set","","",22],[11,"swap","","",22],[11,"unsafe_at","","",22],[11,"unsafe_set","","",22],[11,"at_fast","","Unsafe read access to a vector element by index.",22],[11,"set_fast","","Unsafe write access to a vector element by index.",22],[11,"new_repeat","","Creates a new vector with all its components equal to a given value.",22],[11,"dim","","",22],[11,"len","","",22],[11,"add","","",22],[11,"sub","","",22],[11,"add","","",22],[11,"sub","","",22],[11,"mul","","",22],[11,"div","","",22],[11,"neg","","",22],[11,"mul_s","","",22],[11,"div_s","","",22],[11,"add_s","","",22],[11,"sub_s","","",22],[11,"one","","",22],[11,"zero","","",22],[11,"is_zero","","",22],[11,"approx_epsilon","","",22],[11,"approx_ulps","","",22],[11,"approx_eq","","",22],[11,"approx_eq_eps","","",22],[11,"approx_eq_ulps","","",22],[11,"from_iter","","",22],[11,"max_value","","",22],[11,"min_value","","",22],[11,"axpy","","",22],[11,"iter","","",22],[11,"iter_mut","","",22],[11,"dim","","",33],[11,"fmt","","",34],[11,"clone","","",34],[11,"decode","","",34],[11,"eq","","",34],[11,"ne","","",34],[11,"new","","Creates a new identity matrix.",34],[11,"fmt","","",4],[11,"hash","","",4],[11,"clone","","",4],[11,"decode","","",4],[11,"encode","","",4],[11,"eq","","",4],[11,"ne","","",4],[11,"new_identity","","",4],[11,"new","","",4],[11,"as_array","","View this matrix as a column-major array of arrays.",4],[11,"as_array_mut","","View this matrix as a column-major mutable array of arrays.",4],[11,"from_array_ref","","View a column-major array of array as a vector.",4],[11,"from_array_mut","","View a column-major array of array as a mutable vector.",4],[11,"from","","",4],[11,"add","","",4],[11,"sub","","",4],[11,"add","","",4],[11,"sub","","",4],[11,"mul","","",4],[11,"div","","",4],[11,"abs","","",4],[11,"zero","","",4],[11,"is_zero","","",4],[11,"one","","",4],[11,"iter","","",4],[11,"iter_mut","","",4],[11,"at_fast","","",4],[11,"set_fast","","",4],[11,"dim","","",4],[11,"shape","","",4],[11,"at","","",4],[11,"set","","",4],[11,"swap","","",4],[11,"unsafe_at","","",4],[11,"unsafe_set","","",4],[11,"index","","",4],[11,"index_mut","","",4],[11,"mul","","",4],[11,"mul","","",4],[11,"mul","","",10],[11,"mul","","",4],[11,"mul","","",16],[11,"transpose","","",4],[11,"transpose_mut","","",4],[11,"approx_epsilon","","",4],[11,"approx_ulps","","",4],[11,"approx_eq_eps","","",4],[11,"approx_eq_ulps","","",4],[11,"nrows","","",4],[11,"set_row","","",4],[11,"row","","",4],[11,"ncols","","",4],[11,"set_col","","",4],[11,"col","","",4],[11,"col_slice","","",4],[11,"row_slice","","",4],[11,"from_diag","","",4],[11,"set_diag","","",4],[11,"diag","","",4],[11,"to_homogeneous","","",4],[11,"from","","",4],[11,"outer","","",10],[11,"eigen_qr","","",4],[11,"rand","","",4],[11,"fmt","","",5],[11,"hash","","",5],[11,"clone","","",5],[11,"decode","","",5],[11,"encode","","",5],[11,"eq","","",5],[11,"ne","","",5],[11,"new_identity","","",5],[11,"new","","",5],[11,"as_array","","View this matrix as a column-major array of arrays.",5],[11,"as_array_mut","","View this matrix as a column-major mutable array of arrays.",5],[11,"from_array_ref","","View a column-major array of array as a vector.",5],[11,"from_array_mut","","View a column-major array of array as a mutable vector.",5],[11,"from","","",5],[11,"add","","",5],[11,"sub","","",5],[11,"add","","",5],[11,"sub","","",5],[11,"mul","","",5],[11,"div","","",5],[11,"abs","","",5],[11,"zero","","",5],[11,"is_zero","","",5],[11,"one","","",5],[11,"iter","","",5],[11,"iter_mut","","",5],[11,"dim","","",5],[11,"shape","","",5],[11,"at","","",5],[11,"set","","",5],[11,"swap","","",5],[11,"unsafe_at","","",5],[11,"unsafe_set","","",5],[11,"index","","",5],[11,"index_mut","","",5],[11,"at_fast","","",5],[11,"set_fast","","",5],[11,"transpose","","",5],[11,"transpose_mut","","",5],[11,"approx_epsilon","","",5],[11,"approx_ulps","","",5],[11,"approx_eq_eps","","",5],[11,"approx_eq_ulps","","",5],[11,"nrows","","",5],[11,"set_row","","",5],[11,"row","","",5],[11,"ncols","","",5],[11,"set_col","","",5],[11,"col","","",5],[11,"col_slice","","",5],[11,"row_slice","","",5],[11,"from_diag","","",5],[11,"set_diag","","",5],[11,"diag","","",5],[11,"to_homogeneous","","",5],[11,"from","","",5],[11,"outer","","",11],[11,"eigen_qr","","",5],[11,"rand","","",5],[11,"fmt","","",6],[11,"hash","","",6],[11,"clone","","",6],[11,"decode","","",6],[11,"encode","","",6],[11,"eq","","",6],[11,"ne","","",6],[11,"new_identity","","",6],[11,"new","","",6],[11,"as_array","","View this matrix as a column-major array of arrays.",6],[11,"as_array_mut","","View this matrix as a column-major mutable array of arrays.",6],[11,"from_array_ref","","View a column-major array of array as a vector.",6],[11,"from_array_mut","","View a column-major array of array as a mutable vector.",6],[11,"from","","",6],[11,"add","","",6],[11,"sub","","",6],[11,"add","","",6],[11,"sub","","",6],[11,"mul","","",6],[11,"div","","",6],[11,"abs","","",6],[11,"zero","","",6],[11,"is_zero","","",6],[11,"one","","",6],[11,"iter","","",6],[11,"iter_mut","","",6],[11,"dim","","",6],[11,"shape","","",6],[11,"at","","",6],[11,"set","","",6],[11,"swap","","",6],[11,"unsafe_at","","",6],[11,"unsafe_set","","",6],[11,"index","","",6],[11,"index_mut","","",6],[11,"at_fast","","",6],[11,"set_fast","","",6],[11,"transpose","","",6],[11,"transpose_mut","","",6],[11,"approx_epsilon","","",6],[11,"approx_ulps","","",6],[11,"approx_eq_eps","","",6],[11,"approx_eq_ulps","","",6],[11,"col_slice","","",6],[11,"row_slice","","",6],[11,"from_diag","","",6],[11,"set_diag","","",6],[11,"diag","","",6],[11,"to_homogeneous","","",6],[11,"from","","",6],[11,"outer","","",12],[11,"eigen_qr","","",6],[11,"rand","","",6],[11,"fmt","","",7],[11,"hash","","",7],[11,"clone","","",7],[11,"decode","","",7],[11,"encode","","",7],[11,"eq","","",7],[11,"ne","","",7],[11,"new_identity","","",7],[11,"new","","",7],[11,"as_array","","View this matrix as a column-major array of arrays.",7],[11,"as_array_mut","","View this matrix as a column-major mutable array of arrays.",7],[11,"from_array_ref","","View a column-major array of array as a vector.",7],[11,"from_array_mut","","View a column-major array of array as a mutable vector.",7],[11,"from","","",7],[11,"add","","",7],[11,"sub","","",7],[11,"add","","",7],[11,"sub","","",7],[11,"mul","","",7],[11,"div","","",7],[11,"abs","","",7],[11,"zero","","",7],[11,"is_zero","","",7],[11,"one","","",7],[11,"iter","","",7],[11,"iter_mut","","",7],[11,"dim","","",7],[11,"shape","","",7],[11,"at","","",7],[11,"set","","",7],[11,"swap","","",7],[11,"unsafe_at","","",7],[11,"unsafe_set","","",7],[11,"index","","",7],[11,"index_mut","","",7],[11,"at_fast","","",7],[11,"set_fast","","",7],[11,"mul","","",7],[11,"mul","","",7],[11,"mul","","",13],[11,"mul","","",7],[11,"mul","","",19],[11,"inv","","",7],[11,"inv_mut","","",7],[11,"transpose","","",7],[11,"transpose_mut","","",7],[11,"approx_epsilon","","",7],[11,"approx_ulps","","",7],[11,"approx_eq_eps","","",7],[11,"approx_eq_ulps","","",7],[11,"nrows","","",7],[11,"set_row","","",7],[11,"row","","",7],[11,"ncols","","",7],[11,"set_col","","",7],[11,"col","","",7],[11,"col_slice","","",7],[11,"row_slice","","",7],[11,"from_diag","","",7],[11,"set_diag","","",7],[11,"diag","","",7],[11,"to_homogeneous","","",7],[11,"from","","",7],[11,"outer","","",13],[11,"eigen_qr","","",7],[11,"rand","","",7],[11,"fmt","","",8],[11,"hash","","",8],[11,"clone","","",8],[11,"decode","","",8],[11,"encode","","",8],[11,"eq","","",8],[11,"ne","","",8],[11,"new_identity","","",8],[11,"new","","",8],[11,"as_array","","View this matrix as a column-major array of arrays.",8],[11,"as_array_mut","","View this matrix as a column-major mutable array of arrays.",8],[11,"from_array_ref","","View a column-major array of array as a vector.",8],[11,"from_array_mut","","View a column-major array of array as a mutable vector.",8],[11,"from","","",8],[11,"abs","","",8],[11,"zero","","",8],[11,"is_zero","","",8],[11,"one","","",8],[11,"add","","",8],[11,"sub","","",8],[11,"add","","",8],[11,"sub","","",8],[11,"mul","","",8],[11,"div","","",8],[11,"iter","","",8],[11,"iter_mut","","",8],[11,"dim","","",8],[11,"shape","","",8],[11,"at","","",8],[11,"set","","",8],[11,"swap","","",8],[11,"unsafe_at","","",8],[11,"unsafe_set","","",8],[11,"index","","",8],[11,"index_mut","","",8],[11,"at_fast","","",8],[11,"set_fast","","",8],[11,"mul","","",8],[11,"mul","","",8],[11,"mul","","",14],[11,"mul","","",8],[11,"mul","","",20],[11,"inv","","",8],[11,"inv_mut","","",8],[11,"transpose","","",8],[11,"transpose_mut","","",8],[11,"approx_epsilon","","",8],[11,"approx_ulps","","",8],[11,"approx_eq_eps","","",8],[11,"approx_eq_ulps","","",8],[11,"nrows","","",8],[11,"set_row","","",8],[11,"row","","",8],[11,"ncols","","",8],[11,"set_col","","",8],[11,"col","","",8],[11,"col_slice","","",8],[11,"row_slice","","",8],[11,"from_diag","","",8],[11,"set_diag","","",8],[11,"diag","","",8],[11,"to_homogeneous","","",8],[11,"from","","",8],[11,"outer","","",14],[11,"eigen_qr","","",8],[11,"rand","","",8],[11,"fmt","","",9],[11,"hash","","",9],[11,"clone","","",9],[11,"decode","","",9],[11,"encode","","",9],[11,"eq","","",9],[11,"ne","","",9],[11,"new_identity","","",9],[11,"new","","",9],[11,"as_array","","View this matrix as a column-major array of arrays.",9],[11,"as_array_mut","","View this matrix as a column-major mutable array of arrays.",9],[11,"from_array_ref","","View a column-major array of array as a vector.",9],[11,"from_array_mut","","View a column-major array of array as a mutable vector.",9],[11,"from","","",9],[11,"add","","",9],[11,"sub","","",9],[11,"add","","",9],[11,"sub","","",9],[11,"mul","","",9],[11,"div","","",9],[11,"abs","","",9],[11,"zero","","",9],[11,"is_zero","","",9],[11,"one","","",9],[11,"iter","","",9],[11,"iter_mut","","",9],[11,"dim","","",9],[11,"shape","","",9],[11,"at","","",9],[11,"set","","",9],[11,"swap","","",9],[11,"unsafe_at","","",9],[11,"unsafe_set","","",9],[11,"index","","",9],[11,"index_mut","","",9],[11,"at_fast","","",9],[11,"set_fast","","",9],[11,"mul","","",9],[11,"mul","","",9],[11,"mul","","",15],[11,"mul","","",9],[11,"mul","","",21],[11,"inv","","",9],[11,"inv_mut","","",9],[11,"transpose","","",9],[11,"transpose_mut","","",9],[11,"approx_epsilon","","",9],[11,"approx_ulps","","",9],[11,"approx_eq_eps","","",9],[11,"approx_eq_ulps","","",9],[11,"nrows","","",9],[11,"set_row","","",9],[11,"row","","",9],[11,"ncols","","",9],[11,"set_col","","",9],[11,"col","","",9],[11,"col_slice","","",9],[11,"row_slice","","",9],[11,"from_diag","","",9],[11,"set_diag","","",9],[11,"diag","","",9],[11,"outer","","",15],[11,"eigen_qr","","",9],[11,"rand","","",9],[11,"hash","","",35],[11,"fmt","","",35],[11,"clone","","",35],[11,"decode","","",35],[11,"encode","","",35],[11,"eq","","",35],[11,"ne","","",35],[11,"new","","Builds a 2 dimensional rotation matrix from an angle in radian.",35],[11,"rotation","","",35],[11,"inv_rotation","","",35],[11,"append_rotation_mut","","",35],[11,"append_rotation","","",35],[11,"prepend_rotation_mut","","",35],[11,"prepend_rotation","","",35],[11,"set_rotation","","",35],[11,"rand","","",35],[11,"absolute_rotate","","",35],[11,"hash","","",36],[11,"fmt","","",36],[11,"clone","","",36],[11,"decode","","",36],[11,"encode","","",36],[11,"eq","","",36],[11,"ne","","",36],[11,"new","","Builds a 3 dimensional rotation matrix from an axis and an angle.",36],[11,"new_with_mat","","Builds a rotation matrix from an orthogonal matrix.",36],[11,"new_with_euler_angles","","Creates a new rotation from Euler angles.",36],[11,"look_at","","Reorient this matrix such that its local `x` axis points to a given point. Note that the\nusually known `look_at` function does the same thing but with the `z` axis. See `look_at_z`\nfor that.",36],[11,"look_at_z","","Reorient this matrix such that its local `z` axis points to a given point.",36],[11,"rotation","","",36],[11,"inv_rotation","","",36],[11,"append_rotation_mut","","",36],[11,"append_rotation","","",36],[11,"prepend_rotation_mut","","",36],[11,"prepend_rotation","","",36],[11,"set_rotation","","",36],[11,"rand","","",36],[11,"absolute_rotate","","",36],[11,"hash","","",37],[11,"fmt","","",37],[11,"clone","","",37],[11,"decode","","",37],[11,"encode","","",37],[11,"eq","","",37],[11,"ne","","",37],[11,"absolute_rotate","","",37],[11,"rotation","","",37],[11,"inv_rotation","","",37],[11,"append_rotation_mut","","",37],[11,"append_rotation","","",37],[11,"prepend_rotation_mut","","",37],[11,"prepend_rotation","","",37],[11,"set_rotation","","",37],[11,"submat","","",35],[11,"rotate","","",35],[11,"inv_rotate","","",35],[11,"rotate","","",35],[11,"inv_rotate","","",35],[11,"transform","","",35],[11,"inv_transform","","",35],[11,"transform","","",35],[11,"inv_transform","","",35],[11,"dim","","",35],[11,"mul","","",35],[11,"mul","","",35],[11,"mul","","",11],[11,"mul","","",35],[11,"mul","","",17],[11,"one","","",35],[11,"to_rot_mat","","",35],[11,"ncols","","",35],[11,"col","","",35],[11,"set_col","","",35],[11,"nrows","","",35],[11,"row","","",35],[11,"set_row","","",35],[11,"index","","",35],[11,"abs","","",35],[11,"to_homogeneous","","",35],[11,"inv_mut","","",35],[11,"inv","","",35],[11,"transpose","","",35],[11,"transpose_mut","","",35],[11,"approx_epsilon","","",35],[11,"approx_ulps","","",35],[11,"approx_eq","","",35],[11,"approx_eq_eps","","",35],[11,"approx_eq_ulps","","",35],[11,"submat","","",36],[11,"rotate","","",36],[11,"inv_rotate","","",36],[11,"rotate","","",36],[11,"inv_rotate","","",36],[11,"transform","","",36],[11,"inv_transform","","",36],[11,"transform","","",36],[11,"inv_transform","","",36],[11,"dim","","",36],[11,"mul","","",36],[11,"mul","","",36],[11,"mul","","",12],[11,"mul","","",36],[11,"mul","","",18],[11,"one","","",36],[11,"to_rot_mat","","",36],[11,"ncols","","",36],[11,"col","","",36],[11,"set_col","","",36],[11,"nrows","","",36],[11,"row","","",36],[11,"set_row","","",36],[11,"index","","",36],[11,"abs","","",36],[11,"to_homogeneous","","",36],[11,"inv_mut","","",36],[11,"inv","","",36],[11,"transpose","","",36],[11,"transpose_mut","","",36],[11,"approx_epsilon","","",36],[11,"approx_ulps","","",36],[11,"approx_eq","","",36],[11,"approx_eq_eps","","",36],[11,"approx_eq_ulps","","",36],[11,"submat","","",37],[11,"rotate","","",37],[11,"inv_rotate","","",37],[11,"rotate","","",37],[11,"inv_rotate","","",37],[11,"transform","","",37],[11,"inv_transform","","",37],[11,"transform","","",37],[11,"inv_transform","","",37],[11,"dim","","",37],[11,"mul","","",37],[11,"mul","","",37],[11,"mul","","",13],[11,"mul","","",37],[11,"mul","","",19],[11,"one","","",37],[11,"to_rot_mat","","",37],[11,"ncols","","",37],[11,"col","","",37],[11,"set_col","","",37],[11,"nrows","","",37],[11,"row","","",37],[11,"set_row","","",37],[11,"index","","",37],[11,"abs","","",37],[11,"to_homogeneous","","",37],[11,"inv_mut","","",37],[11,"inv","","",37],[11,"transpose","","",37],[11,"transpose_mut","","",37],[11,"approx_epsilon","","",37],[11,"approx_ulps","","",37],[11,"approx_eq","","",37],[11,"approx_eq_eps","","",37],[11,"approx_eq_ulps","","",37],[11,"fmt","","",1],[11,"clone","","",1],[11,"decode","","",1],[11,"encode","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"fmt","","",2],[11,"clone","","",2],[11,"decode","","",2],[11,"encode","","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"fmt","","",3],[11,"clone","","",3],[11,"decode","","",3],[11,"encode","","",3],[11,"eq","","",3],[11,"ne","","",3],[11,"look_at","","Reorient and translate this transformation such that its local `x` axis points to a given\ndirection.  Note that the usually known `look_at` function does the same thing but with the\n`z` axis. See `look_at_z` for that.",2],[11,"look_at_z","","Reorient and translate this transformation such that its local `z` axis points to a given\ndirection.",2],[11,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",3],[11,"new","","Creates a new isometry from a rotation matrix and a vector.",1],[11,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",1],[11,"to_rot_mat","","",1],[11,"rotation","","",1],[11,"inv_rotation","","",1],[11,"append_rotation_mut","","",1],[11,"append_rotation","","",1],[11,"prepend_rotation_mut","","",1],[11,"prepend_rotation","","",1],[11,"set_rotation","","",1],[11,"dim","","",1],[11,"one","","",1],[11,"absolute_rotate","","",1],[11,"rand","","",1],[11,"approx_epsilon","","",1],[11,"approx_ulps","","",1],[11,"approx_eq_eps","","",1],[11,"approx_eq_ulps","","",1],[11,"to_homogeneous","","",1],[11,"inv_mut","","",1],[11,"inv","","",1],[11,"transform","","",1],[11,"inv_transform","","",1],[11,"transformation","","",1],[11,"inv_transformation","","",1],[11,"append_transformation_mut","","",1],[11,"append_transformation","","",1],[11,"prepend_transformation_mut","","",1],[11,"prepend_transformation","","",1],[11,"set_transformation","","",1],[11,"rotate","","",1],[11,"inv_rotate","","",1],[11,"translation","","",1],[11,"inv_translation","","",1],[11,"append_translation_mut","","",1],[11,"append_translation","","",1],[11,"prepend_translation_mut","","",1],[11,"prepend_translation","","",1],[11,"set_translation","","",1],[11,"translate","","",1],[11,"inv_translate","","",1],[11,"mul","","",1],[11,"mul","","",1],[11,"mul","","",17],[11,"new","","Creates a new isometry from a rotation matrix and a vector.",2],[11,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",2],[11,"to_rot_mat","","",2],[11,"rotation","","",2],[11,"inv_rotation","","",2],[11,"append_rotation_mut","","",2],[11,"append_rotation","","",2],[11,"prepend_rotation_mut","","",2],[11,"prepend_rotation","","",2],[11,"set_rotation","","",2],[11,"dim","","",2],[11,"one","","",2],[11,"absolute_rotate","","",2],[11,"rand","","",2],[11,"approx_epsilon","","",2],[11,"approx_ulps","","",2],[11,"approx_eq_eps","","",2],[11,"approx_eq_ulps","","",2],[11,"to_homogeneous","","",2],[11,"inv_mut","","",2],[11,"inv","","",2],[11,"transform","","",2],[11,"inv_transform","","",2],[11,"transformation","","",2],[11,"inv_transformation","","",2],[11,"append_transformation_mut","","",2],[11,"append_transformation","","",2],[11,"prepend_transformation_mut","","",2],[11,"prepend_transformation","","",2],[11,"set_transformation","","",2],[11,"rotate","","",2],[11,"inv_rotate","","",2],[11,"translation","","",2],[11,"inv_translation","","",2],[11,"append_translation_mut","","",2],[11,"append_translation","","",2],[11,"prepend_translation_mut","","",2],[11,"prepend_translation","","",2],[11,"set_translation","","",2],[11,"translate","","",2],[11,"inv_translate","","",2],[11,"mul","","",2],[11,"mul","","",2],[11,"mul","","",18],[11,"dim","","",3],[11,"one","","",3],[11,"absolute_rotate","","",3],[11,"approx_epsilon","","",3],[11,"approx_ulps","","",3],[11,"approx_eq_eps","","",3],[11,"approx_eq_ulps","","",3],[11,"to_homogeneous","","",3],[11,"inv_mut","","",3],[11,"inv","","",3],[11,"transform","","",3],[11,"inv_transform","","",3],[11,"transformation","","",3],[11,"inv_transformation","","",3],[11,"append_transformation_mut","","",3],[11,"append_transformation","","",3],[11,"prepend_transformation_mut","","",3],[11,"prepend_transformation","","",3],[11,"set_transformation","","",3],[11,"rotate","","",3],[11,"inv_rotate","","",3],[11,"translation","","",3],[11,"inv_translation","","",3],[11,"append_translation_mut","","",3],[11,"append_translation","","",3],[11,"prepend_translation_mut","","",3],[11,"prepend_translation","","",3],[11,"set_translation","","",3],[11,"translate","","",3],[11,"inv_translate","","",3],[11,"mul","","",3],[11,"mul","","",3],[11,"mul","","",19],[11,"fmt","","",38],[11,"clone","","",38],[11,"decode","","",38],[11,"encode","","",38],[11,"eq","","",38],[11,"ne","","",38],[11,"fmt","","",39],[11,"clone","","",39],[11,"decode","","",39],[11,"encode","","",39],[11,"eq","","",39],[11,"ne","","",39],[11,"new","","Creates a new 3D perspective projection.",38],[11,"to_mat","","Builds a 4D projection matrix (using homogeneous coordinates) for this projection.",38],[11,"to_persp_mat","","Build a `PerspMat3` representing this projection.",38],[11,"aspect","","Gets the `width / height` aspect ratio.",38],[11,"fov","","Gets the field of view of the view frustrum.",38],[11,"znear","","Gets the near plane offset of the view frustrum.",38],[11,"zfar","","Gets the far plane offset of the view frustrum.",38],[11,"set_aspect","","Sets the `width / height` aspect ratio of the view frustrum.",38],[11,"set_fov","","Sets the field of view of the view frustrum.",38],[11,"set_znear","","Sets the near plane offset of the view frustrum.",38],[11,"set_zfar","","Sets the far plane offset of the view frustrum.",38],[11,"project_pnt","","Projects a point.",38],[11,"project_vec","","Projects a vector.",38],[11,"new","","Creates a new persepctive matrix from the aspect ratio, field of view, and near/far planes.",39],[11,"new_with_mat","","Creates a new perspective projection matrix from a 4D matrix.",39],[11,"as_mat","","Returns a reference to the 4D matrix (using homogeneous coordinates) of this projection.",39],[11,"aspect","","Gets the `width / height` aspect ratio of the view frustrum.",39],[11,"fov","","Gets the field of view of the view frustrum.",39],[11,"znear","","Gets the near plane offset of the view frustrum.",39],[11,"zfar","","Gets the far plane offset of the view frustrum.",39],[11,"set_aspect","","Updates this projection matrix with a new `width / height` aspect ratio of the view\nfrustrum.",39],[11,"set_fov","","Updates this projection with a new field of view of the view frustrum.",39],[11,"set_znear","","Updates this projection matrix with a new near plane offset of the view frustrum.",39],[11,"set_zfar","","Updates this projection matrix with a new far plane offset of the view frustrum.",39],[11,"set_znear_and_zfar","","Updates this projection matrix with new near and far plane offsets of the view frustrum.",39],[11,"project_pnt","","Projects a point.",39],[11,"project_vec","","Projects a vector.",39],[11,"to_mat","","Returns the 4D matrix (using homogeneous coordinates) of this projection.",39],[11,"fmt","","",40],[11,"clone","","",40],[11,"decode","","",40],[11,"encode","","",40],[11,"eq","","",40],[11,"ne","","",40],[11,"fmt","","",41],[11,"clone","","",41],[11,"decode","","",41],[11,"encode","","",41],[11,"eq","","",41],[11,"ne","","",41],[11,"new","","Creates a new 3D orthographic projection.",40],[11,"to_mat","","Builds a 4D projection matrix (using homogeneous coordinates) for this projection.",40],[11,"to_persp_mat","","Build a `OrthoMat3` representing this projection.",40],[11,"width","","The width of the view cuboid.",40],[11,"height","","The height of the view cuboid.",40],[11,"znear","","The near plane offset of the view cuboid.",40],[11,"zfar","","The far plane offset of the view cuboid.",40],[11,"set_width","","Sets the width of the view cuboid.",40],[11,"set_height","","Sets the height of the view cuboid.",40],[11,"set_znear","","Sets the near plane offset of the view cuboid.",40],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",40],[11,"project_pnt","","Projects a point.",40],[11,"project_vec","","Projects a vector.",40],[11,"new","","Creates a new orthographic projection matrix from the width, heihgt, znear and zfar planes of the view cuboid.",41],[11,"new_with_mat","","Creates a new orthographic matrix from a 4D matrix.",41],[11,"as_mat","","Returns a reference to the 4D matrix (using homogeneous coordinates) of this projection.",41],[11,"width","","The width of the view cuboid.",41],[11,"height","","The height of the view cuboid.",41],[11,"znear","","The near plane offset of the view cuboid.",41],[11,"zfar","","The far plane offset of the view cuboid.",41],[11,"set_width","","Sets the width of the view cuboid.",41],[11,"set_height","","Sets the height of the view cuboid.",41],[11,"set_znear","","Sets the near plane offset of the view cuboid.",41],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",41],[11,"set_znear_and_zfar","","Sets the near and far plane offsets of the view cuboid.",41],[11,"project_pnt","","Projects a point.",41],[11,"project_vec","","Projects a vector.",41],[11,"to_mat","","Returns the 4D matrix (using homogeneous coordinates) of this projection.",41],[11,"fmt","","",23],[11,"clone","","",23],[11,"decode","","",23],[11,"encode","","",23],[11,"eq","","",23],[11,"ne","","",23],[11,"is_eq","","Returns `true` if `self` is equal to `Equal`.",23],[11,"is_lt","","Returns `true` if `self` is equal to `Less`.",23],[11,"is_le","","Returns `true` if `self` is equal to `Less` or `Equal`.",23],[11,"is_gt","","Returns `true` if `self` is equal to `Greater`.",23],[11,"is_ge","","Returns `true` if `self` is equal to `Greater` or `Equal`.",23],[11,"is_not_comparable","","Returns `true` if `self` is equal to `NotComparable`.",23],[11,"from_ordering","","Creates a `POrdering` from an `Ordering`.",23],[11,"to_ordering","","Converts this `POrdering` to an `Ordering`.",23],[8,"Absolute","","Trait of objects having an absolute value.\nThis is useful if the object does not have the same type as its absolute value."],[10,"abs","","Computes some absolute value of this object.\nTypically, this will make all component of a matrix or vector positive.",42],[8,"AbsoluteRotate","","Composition of a rotation and an absolute value."],[10,"absolute_rotate","","This is the same as:",43],[8,"ApproxEq","","Trait for testing approximate equality"],[10,"approx_epsilon","","Default epsilon for approximation.",44],[10,"approx_eq_eps","","Tests approximate equality using a custom epsilon.",44],[10,"approx_ulps","","Default ULPs for approximation.",44],[10,"approx_eq_ulps","","Tests approximate equality using units in the last place (ULPs)",44],[11,"approx_eq","","Tests approximate equality.",44],[8,"Axpy","","Trait of objects implementing the `y = ax + y` operation."],[10,"axpy","","Adds $$a * x$$ to `self`.",45],[8,"Basis","","Traits of objects which can form a basis (typically vectors)."],[10,"canonical_basis","","Iterates through the canonical basis of the space in which this object lives.",46],[10,"orthonormal_subspace_basis","","Iterates through a basis of the subspace orthogonal to `self`.",46],[10,"canonical_basis_element","","Gets the ith element of the canonical basis.",46],[8,"BaseFloat","","Basic floating-point number numeric trait."],[10,"pi","","Archimedes' constant.",47],[10,"two_pi","","2.0 * pi.",47],[10,"frac_pi_2","","pi / 2.0.",47],[10,"frac_pi_3","","pi / 3.0.",47],[10,"frac_pi_4","","pi / 4.0.",47],[10,"frac_pi_6","","pi / 6.0.",47],[10,"frac_pi_8","","pi / 8.0.",47],[10,"frac_1_pi","","1.0 / pi.",47],[10,"frac_2_pi","","2.0 / pi.",47],[10,"frac_2_sqrtpi","","2.0 / sqrt(pi).",47],[10,"e","","Euler's number.",47],[10,"log2_e","","log2(e).",47],[10,"log10_e","","log10(e).",47],[10,"ln_2","","ln(2.0).",47],[10,"ln_10","","ln(10.0).",47],[8,"BaseNum","","Basic integral numeric trait."],[8,"Bounded","","Types that have maximum and minimum value."],[10,"min_value","","The minimum value.",48],[10,"max_value","","The maximum value.",48],[8,"Cast","","Traits of objects which can be created from an object of type `T`."],[10,"from","","Converts an element of type `T` to an element of type `Self`.",49],[8,"Col","","Trait to access columns of a matrix or vector."],[10,"ncols","","The number of column of this matrix or vector.",50],[10,"col","","Reads the `i`-th column of `self`.",50],[10,"set_col","","Writes the `i`-th column of `self`.",50],[8,"ColSlice","","Trait to access part of a column of a matrix"],[10,"col_slice","","Returns a view to a slice of a column of a matrix.",51],[8,"RowSlice","","Trait to access part of a row of a matrix"],[10,"row_slice","","Returns a view to a slice of a row of a matrix.",52],[8,"Cov","","Trait for computing the covariance of a set of data."],[10,"cov","","Computes the covariance of the obsevations stored by `m`:",53],[11,"cov_to","","Computes the covariance of the obsevations stored by `m`:",53],[8,"Cross","","Trait of elements having a cross product."],[16,"Output","nalgebra::Cross",""],[10,"cross","nalgebra","Computes the cross product between two elements (usually vectors).",54],[8,"CrossMatrix","","Trait of elements having a cross product operation which can be expressed as a matrix."],[10,"cross_matrix","","The matrix associated to any cross product with this vector. I.e. `v.cross(anything)` =\n`v.cross_matrix().rmul(anything)`.",55],[8,"Det","","Trait of objects having a determinant. Typically used by square matrices."],[10,"det","","Returns the determinant of `m`.",56],[8,"Diag","","Trait to get the diagonal of square matrices."],[10,"from_diag","","Creates a new matrix with the given diagonal.",57],[10,"set_diag","","Sets the diagonal of this matrix.",57],[10,"diag","","The diagonal of this matrix.",57],[8,"Dim","","Trait of objects having a spacial dimension known at compile time."],[10,"dim","","The dimension of the object.",58],[8,"Dot","","Traits of objects having a dot product."],[10,"dot","","Computes the dot (inner) product of two vectors.",59],[8,"EigenQR","","Trait for computing the eigenvector and eigenvalues of a square matrix usin the QR algorithm."],[10,"eigen_qr","","Computes the eigenvectors and eigenvalues of this matrix.",60],[8,"Eye","","Trait for constructing the identity matrix"],[10,"new_identity","","Return the identity matrix of specified dimension",61],[8,"FloatPnt","","Trait of points with components implementing the `BaseFloat` trait."],[11,"sqdist","","Computes the square distance between two points.",62],[11,"dist","","Computes the distance between two points.",62],[8,"FloatVec","","Trait of vector with components implementing the `BaseFloat` trait."],[8,"FromHomogeneous","","Traits of objects which can be build from an homogeneous coordinate form."],[10,"from","","Builds an object from its homogeneous coordinate form.",63],[8,"Indexable","","This is a workaround of current Rust limitations."],[10,"at","","Reads the `i`-th element of `self`.",64],[10,"set","","Writes to the `i`-th element of `self`.",64],[10,"swap","","Swaps the `i`-th element of `self` with its `j`-th element.",64],[10,"unsafe_at","","Reads the `i`-th element of `self`.",64],[10,"unsafe_set","","Writes to the `i`-th element of `self`.",64],[8,"Inv","","Trait of objects having an inverse. Typically used to implement matrix inverse."],[10,"inv","","Returns the inverse of `m`.",65],[10,"inv_mut","","In-place version of `inverse`.",65],[8,"Iterable","","This is a workaround of current Rust limitations."],[10,"iter","","Gets a vector-like read-only iterator.",66],[8,"IterableMut","","This is a workaround of current Rust limitations."],[10,"iter_mut","","Gets a vector-like read-write iterator.",67],[8,"LMul","","Trait of objects having a left multiplication with another element."],[10,"lmul","","Computes `v * self`",68],[8,"Mat","","Trait of matrices."],[8,"Mean","","Trait for computing the covariance of a set of data."],[10,"mean","","Computes the mean of the observations stored by `v`.\n \n  * For matrices, observations are stored in its rows.\n  * For vectors, observations are stored in its components (thus are 1-dimensional).",69],[8,"Norm","","Traits of objects having an euclidian norm."],[11,"norm","","Computes the norm of `self`.",70],[10,"sqnorm","","Computes the squared norm of `self`.",70],[10,"normalize","","Gets the normalized version of a copy of `v`.",70],[10,"normalize_mut","","Normalizes `self`.",70],[8,"NumPnt","","Trait grouping most common operations on points."],[8,"NumVec","","Trait grouping most common operations on vectors."],[8,"One","","Multiplicative identity."],[10,"one","","Returns the multiplicative identity.",71],[8,"Orig","","The zero element of a vector space, seen as an element of its embeding affine space."],[10,"orig","","The trivial origin.",72],[10,"is_orig","","Returns true if this points is exactly the trivial origin.",72],[8,"Outer","","Traits of objects having an outer product."],[10,"outer","","Computes the outer product: `a * b`",73],[8,"POrd","","Pointwise ordering operations."],[10,"inf","","Returns the infimum of this value and another",74],[10,"sup","","Returns the supremum of this value and another",74],[10,"partial_cmp","","Compare `self` and `other` using a partial ordering relation.",74],[11,"partial_le","","Returns `true` iff `self` and `other` are comparable and `self <= other`.",74],[11,"partial_lt","","Returns `true` iff `self` and `other` are comparable and `self < other`.",74],[11,"partial_ge","","Returns `true` iff `self` and `other` are comparable and `self >= other`.",74],[11,"partial_gt","","Returns `true` iff `self` and `other` are comparable and `self > other`.",74],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",74],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",74],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",74],[8,"PntAsVec","","Trait that relates a point of an affine space to a vector of the associated vector space."],[10,"to_vec","","Converts this point to its associated vector.",75],[10,"as_vec","","Converts a reference to this point to a reference to its associated vector.",75],[10,"set_coords","","Sets the coordinates of this point to match those of a given vector.",75],[8,"RMul","","Trait of objects having a right multiplication with another element."],[10,"rmul","","Computes `self * v`",76],[8,"Rotate","","Trait of objects able to rotate other objects."],[10,"rotate","","Applies a rotation to `v`.",77],[10,"inv_rotate","","Applies an inverse rotation to `v`.",77],[8,"Rotation","","Trait of object which can represent a rotation, and to which new rotations can be appended. A\nrotation is assumed to be an isometry without translation and without reflexion."],[10,"rotation","","Gets the rotation associated with `self`.",78],[10,"inv_rotation","","Gets the inverse rotation associated with `self`.",78],[10,"append_rotation_mut","","Appends a rotation to this object.",78],[10,"append_rotation","","Appends the rotation `amount` to a copy of `t`.",78],[10,"prepend_rotation_mut","","Prepends a rotation to this object.",78],[10,"prepend_rotation","","Prepends the rotation `amount` to a copy of `t`.",78],[10,"set_rotation","","Sets the rotation of `self`.",78],[8,"RotationMatrix","","Trait of transformation having a rotation extractable as a rotation matrix. This can typically\nbe implemented by quaternions to convert them to a rotation matrix."],[16,"Output","nalgebra::RotationMatrix",""],[10,"to_rot_mat","nalgebra","Gets the rotation matrix represented by `self`.",79],[8,"RotationWithTranslation","","Various composition of rotation and translation."],[11,"append_rotation_wrt_point","","Applies a rotation centered on a specific point.",80],[11,"append_rotation_wrt_point_mut","","Rotates `self` using a specific center of rotation.",80],[11,"append_rotation_wrt_center","","Applies a rotation centered on the translation of `m`.\n \n# Arguments\n  * `t` - the object to be rotated.\n  * `amount` - the rotation to apply.",80],[11,"append_rotation_wrt_center_mut","","Applies a rotation centered on the translation of `m`.",80],[8,"Row","","Trait to access rows of a matrix or a vector."],[10,"nrows","","The number of column of `self`.",81],[10,"row","","Reads the `i`-th row of `self`.",81],[10,"set_row","","Writes the `i`-th row of `self`.",81],[8,"ScalarAdd","","Trait of objects having an addition with a scalar."],[10,"add_s","","Gets the result of `self + n`.",82],[8,"ScalarSub","","Trait of objects having a subtraction with a scalar."],[10,"sub_s","","Gets the result of `self - n`.",83],[8,"ScalarMul","","Trait of objects having a multiplication with a scalar."],[10,"mul_s","","Gets the result of `self * n`.",84],[8,"ScalarDiv","","Trait of objects having a division by a scalar."],[10,"div_s","","Gets the result of `self / n`.",85],[8,"Shape","","The shape of an indexable object."],[10,"shape","","Returns the shape of an indexable object.",86],[8,"SquareMat","","Trait implemented by square matrices."],[8,"ToHomogeneous","","Traits of objects which can be put in homogeneous coordinates form."],[10,"to_homogeneous","","Gets the homogeneous coordinates form of this object.",87],[8,"Transform","","Trait of objects able to transform other objects."],[10,"transform","","Applies a transformation to `v`.",88],[10,"inv_transform","","Applies an inverse transformation to `v`.",88],[8,"Transformation","","Trait of object which represent a transformation, and to which new transformations can\nbe appended."],[10,"transformation","","Gets the transformation of `self`.",89],[10,"inv_transformation","","Gets the inverse transformation of `self`.",89],[10,"append_transformation_mut","","Appends a transformation to this object.",89],[10,"append_transformation","","Appends the transformation `amount` to a copy of `t`.",89],[10,"prepend_transformation_mut","","Prepends a transformation to this object.",89],[10,"prepend_transformation","","Prepends the transformation `amount` to a copy of `t`.",89],[10,"set_transformation","","Sets the transformation of `self`.",89],[8,"Translate","","Trait of objects able to translate other objects. This is typically\nimplemented by vectors to translate points."],[10,"translate","","Apply a translation to an object.",90],[10,"inv_translate","","Apply an inverse translation to an object.",90],[8,"Translation","","Trait of object which represent a translation, and to wich new translation\ncan be appended."],[10,"translation","","Gets the translation associated with this object.",91],[10,"inv_translation","","Gets the inverse translation associated with this object.",91],[10,"append_translation_mut","","Appends a translation to this object.",91],[10,"append_translation","","Appends the translation `amount` to a copy of `t`.",91],[10,"prepend_translation_mut","","Prepends a translation to this object.",91],[10,"prepend_translation","","Prepends the translation `amount` to a copy of `t`.",91],[10,"set_translation","","Sets the translation.",91],[8,"Transpose","","Trait of objects which can be transposed."],[10,"transpose","","Computes the transpose of a matrix.",92],[10,"transpose_mut","","In-place version of `transposed`.",92],[8,"UniformSphereSample","","Trait of vectors able to sample a unit sphere."],[10,"sample","","Iterate through the samples.",93],[8,"VecAsPnt","","Trait that relates a point of an affine space to a vector of the associated vector space."],[10,"to_pnt","","Converts this point to its associated vector.",94],[10,"as_pnt","","Converts a reference to this point to a reference to its associated vector.",94],[8,"Zero","","Additive identity."],[10,"zero","","Returns the additive identity.",95],[10,"is_zero","","Tests if `self` is exactly zero.",95],[14,"assert_approx_eq_eps!","","Asserts approximate equality within a given tolerance of two values with the\n`ApproxEq` trait."],[14,"assert_approx_eq_ulps!","","Asserts approximate equality within a given tolerance of two values with the\n`ApproxEq` trait, with tolerance specified in ULPs."],[14,"assert_approx_eq!","","Asserts approximate equality of two values with the `ApproxEq` trait."],[11,"append_rotation_wrt_point","","Applies a rotation centered on a specific point.",80],[11,"append_rotation_wrt_point_mut","","Rotates `self` using a specific center of rotation.",80],[11,"append_rotation_wrt_center","","Applies a rotation centered on the translation of `m`.\n \n# Arguments\n  * `t` - the object to be rotated.\n  * `amount` - the rotation to apply.",80],[11,"append_rotation_wrt_center_mut","","Applies a rotation centered on the translation of `m`.",80],[11,"norm","","Computes the norm of `self`.",70],[11,"sqdist","","Computes the square distance between two points.",62],[11,"dist","","Computes the distance between two points.",62],[11,"partial_le","","Returns `true` iff `self` and `other` are comparable and `self <= other`.",74],[11,"partial_lt","","Returns `true` iff `self` and `other` are comparable and `self < other`.",74],[11,"partial_ge","","Returns `true` iff `self` and `other` are comparable and `self >= other`.",74],[11,"partial_gt","","Returns `true` iff `self` and `other` are comparable and `self > other`.",74],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",74],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",74],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",74],[11,"approx_eq","","Tests approximate equality.",44],[11,"cov_to","","Computes the covariance of the obsevations stored by `m`:",53]],"paths":[[3,"DVec"],[3,"Iso2"],[3,"Iso3"],[3,"Iso4"],[3,"Mat1"],[3,"Mat2"],[3,"Mat3"],[3,"Mat4"],[3,"Mat5"],[3,"Mat6"],[3,"Vec1"],[3,"Vec2"],[3,"Vec3"],[3,"Vec4"],[3,"Vec5"],[3,"Vec6"],[3,"Pnt1"],[3,"Pnt2"],[3,"Pnt3"],[3,"Pnt4"],[3,"Pnt5"],[3,"Pnt6"],[3,"Quat"],[4,"POrdering"],[3,"DMat"],[3,"DVec1"],[3,"DVec2"],[3,"DVec3"],[3,"DVec4"],[3,"DVec5"],[3,"DVec6"],[3,"Vec0"],[3,"Pnt0"],[3,"UnitQuat"],[3,"Identity"],[3,"Rot2"],[3,"Rot3"],[3,"Rot4"],[3,"Persp3"],[3,"PerspMat3"],[3,"Ortho3"],[3,"OrthoMat3"],[8,"Absolute"],[8,"AbsoluteRotate"],[8,"ApproxEq"],[8,"Axpy"],[8,"Basis"],[8,"BaseFloat"],[8,"Bounded"],[8,"Cast"],[8,"Col"],[8,"ColSlice"],[8,"RowSlice"],[8,"Cov"],[8,"Cross"],[8,"CrossMatrix"],[8,"Det"],[8,"Diag"],[8,"Dim"],[8,"Dot"],[8,"EigenQR"],[8,"Eye"],[8,"FloatPnt"],[8,"FromHomogeneous"],[8,"Indexable"],[8,"Inv"],[8,"Iterable"],[8,"IterableMut"],[8,"LMul"],[8,"Mean"],[8,"Norm"],[8,"One"],[8,"Orig"],[8,"Outer"],[8,"POrd"],[8,"PntAsVec"],[8,"RMul"],[8,"Rotate"],[8,"Rotation"],[8,"RotationMatrix"],[8,"RotationWithTranslation"],[8,"Row"],[8,"ScalarAdd"],[8,"ScalarSub"],[8,"ScalarMul"],[8,"ScalarDiv"],[8,"Shape"],[8,"ToHomogeneous"],[8,"Transform"],[8,"Transformation"],[8,"Translate"],[8,"Translation"],[8,"Transpose"],[8,"UniformSphereSample"],[8,"VecAsPnt"],[8,"Zero"]]};

searchIndex['xml'] = {"items":[[0,"","xml","This crate currently provides almost XML 1.0/1.1-compliant pull parser."],[0,"macros","","Contains several macros used in this crate."],[0,"name","",""],[3,"Name","xml::name","Represents a qualified XML name."],[12,"local_name","","A local name, e.g. `string` in `xsi:string`.",0],[12,"namespace","","A namespace URI, e.g. `http://www.w3.org/2000/xmlns/`.",0],[12,"prefix","","A name prefix, e.g. `xsi` in `xsi:string`.",0],[3,"OwnedName","","An owned variant of `Name`."],[12,"local_name","","A local name, e.g. `string` in `xsi:string`.",1],[12,"namespace","","A namespace URI, e.g. `http://www.w3.org/2000/xmlns/`.",1],[12,"prefix","","A name prefix, e.g. `xsi` in `xsi:string`.",1],[11,"fmt","","",0],[11,"hash","","",0],[11,"eq","","",0],[11,"ne","","",0],[11,"clone","","",0],[11,"fmt","","",0],[11,"to_owned","","Returns an owned variant of the qualified name.",0],[11,"local","","Returns a new `Name` instance representing plain local name.",0],[11,"qualified","","Returns a new `Name` instance representing a qualified name with or without a prefix and\nwith a namespace URI.",0],[11,"to_repr","","Returns correct XML representation of this local name and prefix.",0],[11,"fmt","","",1],[11,"hash","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"clone","","",1],[11,"fmt","","",1],[11,"borrow","","Constructs a borrowed `Name` based on this owned name.",1],[11,"local","","Returns a new `OwnedName` instance representing a plain local name.",1],[11,"qualified","","Returns a new `OwnedName` instance representing a qualified name with or without\na prefix and with a namespace URI.",1],[11,"prefix_as_ref","","Returns an optional prefix by reference, equivalent to `self.borrow().prefix`\nbut avoids extra work.",1],[11,"namespace_as_ref","","Returns an optional namespace by reference, equivalen to `self.borrow().namespace`\nbut avoids extra work.",1],[11,"to_repr","","See `Name::to_repr()` for details.",1],[6,"Err","",""],[11,"from_str","","Parses the given string slice into a qualified name.",1],[0,"attribute","xml",""],[3,"Attribute","xml::attribute","A borrowed version of an XML attribute."],[12,"name","","Attribute name.",2],[12,"value","","Attribute value.",2],[3,"OwnedAttribute","",""],[12,"name","","",3],[12,"value","","",3],[11,"fmt","","",2],[11,"hash","","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"clone","","",2],[11,"fmt","","",2],[11,"to_owned","","",2],[11,"new","","",2],[11,"fmt","","",3],[11,"hash","","",3],[11,"eq","","",3],[11,"ne","","",3],[11,"clone","","",3],[11,"borrow","","",3],[11,"new","","",3],[11,"fmt","","",3],[0,"common","xml","Contains several types used throughout the library."],[3,"Error","xml::common","XML parsing error."],[4,"XmlVersion","","XML version enumeration."],[13,"Version10","","XML version 1.0.",4],[13,"Version11","","XML version 1.1.",4],[5,"is_whitespace_char","","Checks whether the given character is a white space character (`S`)\nas is defined by XML 1.1 specification, [section 2.3][1]."],[5,"is_name_start_char","","Checks whether the given character is a name start character (`NameStartChar`)\nas is defined by XML 1.1 specification, [section 2.3][1]."],[5,"is_name_char","","Checks whether the given character is a name character (`NameChar`)\nas is defined by XML 1.1 specification, [section 2.3][1]."],[8,"HasPosition","","Represents a thing which has a position inside some textual document."],[10,"row","","Returns a line number inside the document.",5],[10,"col","","Returns a column number inside the document.",5],[11,"fmt","","",6],[11,"eq","","",6],[11,"ne","","",6],[11,"clone","","",6],[11,"fmt","","",6],[11,"row","","",6],[11,"col","","",6],[11,"new","","Creates a new error using position information from the provided\n`HasPosition` object and a message.",6],[11,"new_full","","Creates a new error using provided position information and a message.",6],[11,"msg","","Returns a reference to a message which is contained inside this error.",6],[11,"description","","",6],[11,"eq","","",4],[11,"ne","","",4],[11,"clone","","",4],[11,"fmt","","",4],[0,"escape","xml",""],[5,"escape_str","xml::escape","Performs escaping of common XML characters."],[0,"namespace","xml",""],[3,"Namespace","xml::namespace","Namespace is a map from prefixes to namespace URIs."],[3,"NamespaceMappings","","An iterator over mappings from prefixes to URIs in a namespace."],[3,"NamespaceStack","","Namespace stack is a sequence of namespaces."],[3,"NamespaceStackMappings","","An iterator over mappings from prefixes to URIs in a namespace stack."],[6,"UriMapping","",""],[17,"NS_XMLNS_PREFIX","",""],[17,"NS_XMLNS_URI","",""],[17,"NS_XML_PREFIX","",""],[17,"NS_XML_URI","",""],[17,"NS_EMPTY_URI","",""],[8,"NamespaceIterable","","Denotes something which contains namespace URI mappings."],[16,"Iter","xml::namespace::NamespaceIterable",""],[10,"uri_mappings","xml::namespace","",7],[11,"clone","","",8],[11,"eq","","",8],[11,"ne","","",8],[11,"empty","","Returns an empty namespace.",8],[11,"is_empty","","Checks whether this namespace is empty.",8],[11,"is_essentially_empty","","Checks whether this namespace is essentially empty, that is, it does not contain\nanything but the default mappings.",8],[11,"put","","Puts a mapping into this namespace.",8],[11,"force_put","","Puts a mapping into this namespace forcefully.",8],[11,"get","","Queries the namespace for the given prefix.",8],[6,"Item","",""],[11,"next","","",9],[6,"Iter","",""],[11,"uri_mappings","","",8],[11,"eq","","",10],[11,"ne","","",10],[11,"clone","","",10],[11,"empty","","Returns an empty namespace stack.",10],[11,"default","","Returns a namespace stack with default items in it.",10],[11,"push_empty","","Adds an empty namespace to the top of this stack.",10],[11,"pop","","Removes a namespace at the top of the stack.",10],[11,"peek","","Returns a namespace at the top of the stack, leaving the stack intact.",10],[11,"put","","Puts a mapping into the topmost namespace in this stack.",10],[11,"get","","Performs a search for the given prefix in the whole stack.",10],[11,"squash","","Combines this stack of namespaces into a single namespace.",10],[6,"Item","",""],[11,"next","","",11],[6,"Iter","",""],[11,"uri_mappings","","",10],[0,"reader","xml","Contains high-level interface for a pull-based XML parser."],[3,"EventReader","xml::reader","Simple wrapper around an `std::old_io::Buffer` which provides pull-based XML parsing."],[3,"Events","","XML events iterator, created by `events()` method on `Parser`."],[0,"config","","Contains parser configuration structure."],[3,"ParserConfig","xml::reader::config","Parser configuration structure."],[12,"trim_whitespace","","Whether or not should whitespace be removed. Default is false.",12],[12,"whitespace_to_characters","","Whether or not should whitespace be converted to characters.\nDefault is false.",12],[12,"cdata_to_characters","","Whether or not should CDATA be converted to characters.\nDefault is false.",12],[12,"ignore_comments","","Whether or not should comments be omitted. Default is true.",12],[12,"coalesce_characters","","Whether or not should sequential `Characters` events be merged.\nDefault is true.",12],[11,"new","","Returns a new config with default values.",12],[11,"trim_whitespace","","Sets the field to the provided value and returns updated config object.",12],[11,"whitespace_to_characters","","Sets the field to the provided value and returns updated config object.",12],[11,"cdata_to_characters","","Sets the field to the provided value and returns updated config object.",12],[11,"ignore_comments","","Sets the field to the provided value and returns updated config object.",12],[11,"coalesce_characters","","Sets the field to the provided value and returns updated config object.",12],[0,"events","xml::reader","Contains `XmlEvent` datatype, instances of which are emitted by the parser."],[4,"XmlEvent","xml::reader::events","An element of an XML input stream."],[13,"StartDocument","","Corresponds to XML document declaration.",13],[12,"version","xml::reader::events::XmlEvent","XML version.",13],[12,"encoding","","XML document encoding.",13],[12,"standalone","","XML standalone declaration.",13],[13,"EndDocument","xml::reader::events","Denotes to the end of the document stream.",13],[13,"ProcessingInstruction","","Denotes an XML processing instruction.",13],[12,"name","xml::reader::events::XmlEvent","Processing instruction target.",13],[12,"data","","Processing instruction content.",13],[13,"StartElement","xml::reader::events","Denotes a beginning of an XML element.",13],[12,"name","xml::reader::events::XmlEvent","Qualified name of the element.",13],[12,"attributes","","A list of attributes associated with the element.",13],[12,"namespace","","Contents of the namespace mapping at this point of the document.",13],[13,"EndElement","xml::reader::events","Denotes an end of an XML document.",13],[12,"name","xml::reader::events::XmlEvent","Qualified name of the element.",13],[13,"CData","xml::reader::events","Denotes CDATA content.",13],[13,"Comment","","Denotes a comment.",13],[13,"Characters","","Denotes character data outside of tags.",13],[13,"Whitespace","","Denotes a chunk of whitespace outside of tags.",13],[13,"Error","","Denotes parsing error.",13],[11,"clone","","",13],[11,"eq","","",13],[11,"ne","","",13],[11,"fmt","","",13],[11,"as_writer_event","","",13],[11,"new","xml::reader","Creates a new parser, consuming given `Buffer`.",14],[11,"new_with_config","","Creates a new parser with the provded configuration, consuming given `Buffer`.",14],[11,"next","","Pulls and returns next XML event from the stream.",14],[11,"events","","Returns an iterator over XML events.",14],[6,"Item","",""],[11,"next","","",15],[11,"new_from_string","","Convenience method to create a reader from an owned string.",14],[11,"new_from_bytes","","Convenience method to create a reader from an owned vector of bytes.",14],[11,"new_from_str_slice","","Convenience method to create a reader from a string slice.",14],[11,"new_from_bytes_slice","","Convenience method to create a reader from a slice of bytes.",14],[0,"writer","xml",""],[3,"EventWriter","xml::writer",""],[0,"config","","Contains emitter configuration structure."],[3,"EmitterConfig","xml::writer::config","Emitter configuration structure."],[12,"line_separator","","Line separator used to separate lines in formatted output. Default is `\"\\n\"`.",16],[12,"indent_string","","A string which will be used for a single level of indentation. Default is `\"  \"`\n(two spaces).",16],[12,"perform_indent","","Whether or not the emitted document should be indented. Default is false.",16],[12,"write_document_declaration","","Whether or not to write XML document declaration at the beginning of a document.\nDefault is true.",16],[12,"normalize_empty_elements","","Whether or not to convert elements with empty content to empty elements. Default is true.",16],[12,"cdata_to_characters","","Whether or not to emit CDATA events as plain characters. Default is false.",16],[11,"new","","Creates an emitter configuration with default values.",16],[11,"line_separator","","Sets the field to the provided value and returns updated config object.",16],[11,"indent_string","","Sets the field to the provided value and returns updated config object.",16],[11,"perform_indent","","Sets the field to the provided value and returns updated config object.",16],[11,"write_document_declaration","","Sets the field to the provided value and returns updated config object.",16],[11,"normalize_empty_elements","","Sets the field to the provided value and returns updated config object.",16],[11,"cdata_to_characters","","Sets the field to the provided value and returns updated config object.",16],[0,"events","xml::writer",""],[4,"XmlEvent","xml::writer::events","An element of an XML output stream."],[13,"StartDocument","","Corresponds to XML document declaration.",17],[12,"version","xml::writer::events::XmlEvent","XML version.",17],[12,"encoding","","XML document encoding.",17],[12,"standalone","","XML standalone declaration.",17],[13,"ProcessingInstruction","xml::writer::events","Denotes an XML processing instruction.",17],[12,"name","xml::writer::events::XmlEvent","Processing instruction target.",17],[12,"data","","Processing instruction content.",17],[13,"StartElement","xml::writer::events","Denotes a beginning of an XML element.",17],[12,"name","xml::writer::events::XmlEvent","Qualified name of the element.",17],[12,"attributes","","A list of attributes associated with the element.",17],[12,"namespace","","Contents of the namespace mapping at this point of the document.",17],[13,"EndElement","xml::writer::events","Denotes an end of an XML document.",17],[12,"name","xml::writer::events::XmlEvent","Qualified name of the element.",17],[13,"CData","xml::writer::events","Denotes CDATA content.",17],[13,"Comment","","Denotes a comment.",17],[13,"Characters","","Denotes character data outside of tags.",17],[6,"EventWriterResult","xml::writer",""],[11,"new","","",18],[11,"new_with_config","","",18],[11,"write","","",18],[11,"new_into_mem","","",18],[11,"new_into_mem_config","","",18],[0,"util","xml",""],[3,"ClonedPairwise","xml::util",""],[8,"OptionBorrowExt","",""],[10,"borrow_internals","","",19],[8,"IteratorClonedPairwiseExt","",""],[10,"cloned_pairwise","","",20],[11,"borrow_internals","core::option","",21],[6,"Item","xml::util",""],[11,"next","","",22]],"paths":[[3,"Name"],[3,"OwnedName"],[3,"Attribute"],[3,"OwnedAttribute"],[4,"XmlVersion"],[8,"HasPosition"],[3,"Error"],[8,"NamespaceIterable"],[3,"Namespace"],[3,"NamespaceMappings"],[3,"NamespaceStack"],[3,"NamespaceStackMappings"],[3,"ParserConfig"],[4,"XmlEvent"],[3,"EventReader"],[3,"Events"],[3,"EmitterConfig"],[4,"XmlEvent"],[3,"EventWriter"],[8,"OptionBorrowExt"],[8,"IteratorClonedPairwiseExt"],[4,"Option"],[3,"ClonedPairwise"]]};

searchIndex['gl_common'] = {"items":[[0,"","gl_common","Defines everything used by `gl_generator`."],[8,"GlFunctionsSource","",""],[10,"get_proc_addr","","",0]],"paths":[[8,"GlFunctionsSource"]]};

searchIndex['rand'] = {"items":[[0,"","rand","Utilities for random number generation"],[3,"OsRng","","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:"],[3,"Generator","","Iterator which will generate a stream of random items."],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters."],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator."],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint)."],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints)."],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform."],[3,"ThreadRng","","The thread-local RNG."],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed."],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::<i32>()`."],[5,"random","","Generates a random value using the thread-local random number generator."],[5,"sample","","Randomly sample up to `amount` elements from an iterator."],[0,"distributions","","Sampling from random distributions."],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits."],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`."],[12,"weight","","The numerical weight of this item",0],[12,"item","","The actual item which is being weighted",0],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items."],[0,"range","","Generating numbers between two others."],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds."],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`."],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",1],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",1],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",2],[11,"sample","","",2],[11,"ind_sample","","",2],[0,"gamma","rand::distributions","The Gamma and derived distributions."],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution."],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom."],[3,"FisherF","","The Fisher F distribution `F(m, n)`."],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom."],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",3],[11,"sample","","",3],[11,"ind_sample","","",3],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",4],[11,"sample","","",4],[11,"ind_sample","","",4],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",5],[11,"sample","","",5],[11,"ind_sample","","",5],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",6],[11,"sample","","",6],[11,"ind_sample","","",6],[0,"normal","rand::distributions","The normal and derived distributions."],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian)."],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`."],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`."],[11,"rand","","",7],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",8],[11,"sample","","",8],[11,"ind_sample","","",8],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",9],[11,"sample","","",9],[11,"ind_sample","","",9],[0,"exponential","rand::distributions","The exponential distribution."],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers."],[3,"Exp","","The exponential distribution `Exp(lambda)`."],[11,"rand","","",10],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",11],[11,"sample","","",11],[11,"ind_sample","","",11],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`."],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",12],[8,"IndependentSample","","`Sample`s that do not require keeping track of state."],[10,"ind_sample","","Generate a random value.",13],[11,"sample","","",14],[11,"ind_sample","","",14],[11,"new","","",14],[11,"new","","Create a new `WeightedChoice`.",15],[11,"sample","","",15],[11,"ind_sample","","",15],[0,"isaac","rand","The ISAAC random number generator."],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1]."],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm."],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",16],[11,"clone","","",16],[11,"next_u32","","",16],[11,"reseed","","",16],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",16],[11,"rand","","",16],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",17],[11,"clone","","",17],[11,"next_u32","","",17],[11,"next_u64","","",17],[11,"reseed","","",17],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17],[11,"rand","","",17],[0,"chacha","rand","The ChaCha random number generator."],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1]."],[11,"clone","","",18],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",18],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",18],[11,"next_u32","","",18],[11,"reseed","","",18],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",18],[11,"rand","","",18],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes."],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes."],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",19],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call."],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`."],[10,"reseed","","Reseed the given RNG.",20],[11,"new","","Create a new `ReseedingRng` with the given parameters.",19],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",19],[11,"next_u32","","",19],[11,"next_u64","","",19],[11,"fill_bytes","","",19],[11,"reseed","","",19],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",19],[11,"reseed","","",21],[11,"default","","",21],[11,"rand","rand","",22],[11,"rand","","",23],[11,"rand","","",22],[11,"rand","","",23],[11,"rand","core::option","",24],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators."],[11,"new","","Create a new `OsRng`.",25],[11,"next_u32","","",25],[11,"next_u64","","",25],[11,"fill_bytes","","",25],[0,"reader","","A wrapper around any Reader to treat it as an RNG."],[3,"ReaderRng","rand::reader","An RNG that reads random bytes straight from a `Reader`. This will\nwork best with an infinite reader, but this is not required."],[11,"new","","Create a new `ReaderRng` from a `Reader`.",26],[11,"next_u32","","",26],[11,"next_u64","","",26],[11,"fill_bytes","","",26],[8,"Rand","rand","A type that can be randomly generated using an `Rng`."],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27],[8,"Rng","","A random number generator."],[10,"next_u32","","Return the next random u32.",28],[11,"next_u64","","Return the next random u64.",28],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28],[11,"fill_bytes","","Fill `dest` with random data.",28],[11,"gen","","Return a random value of a `Rand` type.",28],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28],[11,"choose","","Return a random element from `values`.",28],[11,"shuffle","","Shuffle a mutable slice in place.",28],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times."],[10,"reseed","","Reseed an RNG with the given seed.",29],[10,"from_seed","","Create a new RNG with the given seed.",29],[6,"Item","",""],[11,"next","","",30],[6,"Item","",""],[11,"next","","",31],[11,"clone","","",32],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",32],[11,"next_u32","","",32],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",32],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",32],[11,"rand","","",32],[11,"clone","","",33],[11,"new","","Create a randomly seeded instance of `StdRng`.",33],[11,"next_u32","","",33],[11,"next_u64","","",33],[11,"reseed","","",33],[11,"from_seed","","",33],[11,"clone","","",34],[11,"next_u32","","",34],[11,"next_u64","","",34],[11,"fill_bytes","","",34]],"paths":[[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[4,"Option"],[3,"OsRng"],[3,"ReaderRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};

searchIndex['rand_macros'] = {"items":[[0,"","rand_macros",""],[5,"plugin_registrar","",""],[5,"expand_deriving_rand","",""]],"paths":[]};

searchIndex['bitflags'] = {"items":[[0,"","bitflags","A typesafe bitmask flag generator."],[14,"bitflags!","","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs."]],"paths":[]};

searchIndex['libc'] = {"items":[[0,"","libc","Bindings for the C standard library and other platform libraries"],[0,"types","",""],[0,"common","libc::types",""],[0,"c95","libc::types::common",""],[4,"c_void","libc::types::common::c95","Type used to construct void pointers for use with C."],[13,"__variant1","","",0],[13,"__variant2","","",0],[4,"FILE","",""],[4,"fpos_t","",""],[0,"c99","libc::types::common",""],[6,"int8_t","libc::types::common::c99",""],[6,"int16_t","",""],[6,"int32_t","",""],[6,"int64_t","",""],[6,"uint8_t","",""],[6,"uint16_t","",""],[6,"uint32_t","",""],[6,"uint64_t","",""],[0,"posix88","libc::types::common",""],[4,"DIR","libc::types::common::posix88",""],[4,"dirent_t","",""],[0,"os","libc::types",""],[0,"common","libc::types::os",""],[0,"posix01","libc::types::os::common",""],[3,"glob_t","libc::types::os::common::posix01",""],[12,"gl_pathc","","",1],[12,"gl_pathv","","",1],[12,"gl_offs","","",1],[12,"__unused1","","",1],[12,"__unused2","","",1],[12,"__unused3","","",1],[12,"__unused4","","",1],[12,"__unused5","","",1],[3,"timeval","",""],[12,"tv_sec","","",2],[12,"tv_usec","","",2],[3,"timespec","",""],[12,"tv_sec","","",3],[12,"tv_nsec","","",3],[4,"timezone","",""],[6,"pthread_t","",""],[6,"sighandler_t","",""],[0,"bsd44","libc::types::os::common",""],[3,"sockaddr","libc::types::os::common::bsd44",""],[12,"sa_family","","",4],[12,"sa_data","","",4],[3,"sockaddr_storage","",""],[12,"ss_family","","",5],[12,"__ss_align","","",5],[12,"__ss_pad2","","",5],[3,"sockaddr_in","",""],[12,"sin_family","","",6],[12,"sin_port","","",6],[12,"sin_addr","","",6],[12,"sin_zero","","",6],[3,"in_addr","",""],[12,"s_addr","","",7],[3,"sockaddr_in6","",""],[12,"sin6_family","","",8],[12,"sin6_port","","",8],[12,"sin6_flowinfo","","",8],[12,"sin6_addr","","",8],[12,"sin6_scope_id","","",8],[3,"in6_addr","",""],[12,"s6_addr","","",9],[3,"ip_mreq","",""],[12,"imr_multiaddr","","",10],[12,"imr_interface","","",10],[3,"ip6_mreq","",""],[12,"ipv6mr_multiaddr","","",11],[12,"ipv6mr_interface","","",11],[3,"addrinfo","",""],[12,"ai_flags","","",12],[12,"ai_family","","",12],[12,"ai_socktype","","",12],[12,"ai_protocol","","",12],[12,"ai_addrlen","","",12],[12,"ai_addr","","",12],[12,"ai_canonname","","",12],[12,"ai_next","","",12],[3,"sockaddr_un","",""],[12,"sun_family","","",13],[12,"sun_path","","",13],[3,"ifaddrs","",""],[12,"ifa_next","","",14],[12,"ifa_name","","",14],[12,"ifa_flags","","",14],[12,"ifa_addr","","",14],[12,"ifa_netmask","","",14],[12,"ifa_ifu","","",14],[12,"ifa_data","","",14],[6,"socklen_t","",""],[6,"sa_family_t","",""],[6,"in_port_t","",""],[6,"in_addr_t","",""],[0,"arch","libc::types::os",""],[0,"c95","libc::types::os::arch",""],[6,"c_char","libc::types::os::arch::c95",""],[6,"c_schar","",""],[6,"c_uchar","",""],[6,"c_short","",""],[6,"c_ushort","",""],[6,"c_int","",""],[6,"c_uint","",""],[6,"c_long","",""],[6,"c_ulong","",""],[6,"c_float","",""],[6,"c_double","",""],[6,"size_t","",""],[6,"ptrdiff_t","",""],[6,"clock_t","",""],[6,"time_t","",""],[6,"suseconds_t","",""],[6,"wchar_t","",""],[0,"c99","libc::types::os::arch",""],[6,"c_longlong","libc::types::os::arch::c99",""],[6,"c_ulonglong","",""],[6,"intptr_t","",""],[6,"uintptr_t","",""],[6,"intmax_t","",""],[6,"uintmax_t","",""],[0,"posix88","libc::types::os::arch",""],[6,"off_t","libc::types::os::arch::posix88",""],[6,"dev_t","",""],[6,"ino_t","",""],[6,"pid_t","",""],[6,"uid_t","",""],[6,"gid_t","",""],[6,"useconds_t","",""],[6,"mode_t","",""],[6,"ssize_t","",""],[0,"posix01","libc::types::os::arch",""],[3,"stat","libc::types::os::arch::posix01",""],[12,"st_dev","","",15],[12,"st_ino","","",15],[12,"st_nlink","","",15],[12,"st_mode","","",15],[12,"st_uid","","",15],[12,"st_gid","","",15],[12,"__pad0","","",15],[12,"st_rdev","","",15],[12,"st_size","","",15],[12,"st_blksize","","",15],[12,"st_blocks","","",15],[12,"st_atime","","",15],[12,"st_atime_nsec","","",15],[12,"st_mtime","","",15],[12,"st_mtime_nsec","","",15],[12,"st_ctime","","",15],[12,"st_ctime_nsec","","",15],[12,"__unused","","",15],[3,"utimbuf","",""],[12,"actime","","",16],[12,"modtime","","",16],[3,"pthread_attr_t","",""],[12,"__size","","",17],[6,"nlink_t","",""],[6,"blksize_t","",""],[6,"blkcnt_t","",""],[0,"extra","libc::types::os::arch",""],[3,"sockaddr_ll","libc::types::os::arch::extra",""],[12,"sll_family","","",18],[12,"sll_protocol","","",18],[12,"sll_ifindex","","",18],[12,"sll_hatype","","",18],[12,"sll_pkttype","","",18],[12,"sll_halen","","",18],[12,"sll_addr","","",18],[0,"consts","libc",""],[0,"os","libc::consts",""],[0,"c95","libc::consts::os",""],[17,"EXIT_FAILURE","libc::consts::os::c95",""],[17,"EXIT_SUCCESS","",""],[17,"RAND_MAX","",""],[17,"EOF","",""],[17,"SEEK_SET","",""],[17,"SEEK_CUR","",""],[17,"SEEK_END","",""],[17,"_IOFBF","",""],[17,"_IONBF","",""],[17,"_IOLBF","",""],[17,"BUFSIZ","",""],[17,"FOPEN_MAX","",""],[17,"FILENAME_MAX","",""],[17,"L_tmpnam","",""],[17,"TMP_MAX","",""],[0,"posix88","libc::consts::os",""],[17,"O_RDONLY","libc::consts::os::posix88",""],[17,"O_WRONLY","",""],[17,"O_RDWR","",""],[17,"O_APPEND","",""],[17,"O_CREAT","",""],[17,"O_EXCL","",""],[17,"O_TRUNC","",""],[17,"S_IFIFO","",""],[17,"S_IFCHR","",""],[17,"S_IFBLK","",""],[17,"S_IFDIR","",""],[17,"S_IFREG","",""],[17,"S_IFLNK","",""],[17,"S_IFMT","",""],[17,"S_IEXEC","",""],[17,"S_IWRITE","",""],[17,"S_IREAD","",""],[17,"S_IRWXU","",""],[17,"S_IXUSR","",""],[17,"S_IWUSR","",""],[17,"S_IRUSR","",""],[17,"F_OK","",""],[17,"R_OK","",""],[17,"W_OK","",""],[17,"X_OK","",""],[17,"STDIN_FILENO","",""],[17,"STDOUT_FILENO","",""],[17,"STDERR_FILENO","",""],[17,"F_LOCK","",""],[17,"F_TEST","",""],[17,"F_TLOCK","",""],[17,"F_ULOCK","",""],[17,"SIGHUP","",""],[17,"SIGINT","",""],[17,"SIGQUIT","",""],[17,"SIGILL","",""],[17,"SIGABRT","",""],[17,"SIGFPE","",""],[17,"SIGKILL","",""],[17,"SIGSEGV","",""],[17,"SIGPIPE","",""],[17,"SIGALRM","",""],[17,"SIGTERM","",""],[17,"PROT_NONE","",""],[17,"PROT_READ","",""],[17,"PROT_WRITE","",""],[17,"PROT_EXEC","",""],[17,"MAP_FILE","",""],[17,"MAP_SHARED","",""],[17,"MAP_PRIVATE","",""],[17,"MAP_FIXED","",""],[17,"MAP_ANON","",""],[17,"MAP_FAILED","",""],[17,"MCL_CURRENT","",""],[17,"MCL_FUTURE","",""],[17,"MS_ASYNC","",""],[17,"MS_INVALIDATE","",""],[17,"MS_SYNC","",""],[17,"EPERM","",""],[17,"ENOENT","",""],[17,"ESRCH","",""],[17,"EINTR","",""],[17,"EIO","",""],[17,"ENXIO","",""],[17,"E2BIG","",""],[17,"ENOEXEC","",""],[17,"EBADF","",""],[17,"ECHILD","",""],[17,"EAGAIN","",""],[17,"ENOMEM","",""],[17,"EACCES","",""],[17,"EFAULT","",""],[17,"ENOTBLK","",""],[17,"EBUSY","",""],[17,"EEXIST","",""],[17,"EXDEV","",""],[17,"ENODEV","",""],[17,"ENOTDIR","",""],[17,"EISDIR","",""],[17,"EINVAL","",""],[17,"ENFILE","",""],[17,"EMFILE","",""],[17,"ENOTTY","",""],[17,"ETXTBSY","",""],[17,"EFBIG","",""],[17,"ENOSPC","",""],[17,"ESPIPE","",""],[17,"EROFS","",""],[17,"EMLINK","",""],[17,"EPIPE","",""],[17,"EDOM","",""],[17,"ERANGE","",""],[17,"EDEADLK","",""],[17,"ENAMETOOLONG","",""],[17,"ENOLCK","",""],[17,"ENOSYS","",""],[17,"ENOTEMPTY","",""],[17,"ELOOP","",""],[17,"EWOULDBLOCK","",""],[17,"ENOMSG","",""],[17,"EIDRM","",""],[17,"ECHRNG","",""],[17,"EL2NSYNC","",""],[17,"EL3HLT","",""],[17,"EL3RST","",""],[17,"ELNRNG","",""],[17,"EUNATCH","",""],[17,"ENOCSI","",""],[17,"EL2HLT","",""],[17,"EBADE","",""],[17,"EBADR","",""],[17,"EXFULL","",""],[17,"ENOANO","",""],[17,"EBADRQC","",""],[17,"EBADSLT","",""],[17,"EDEADLOCK","",""],[17,"EBFONT","",""],[17,"ENOSTR","",""],[17,"ENODATA","",""],[17,"ETIME","",""],[17,"ENOSR","",""],[17,"ENONET","",""],[17,"ENOPKG","",""],[17,"EREMOTE","",""],[17,"ENOLINK","",""],[17,"EADV","",""],[17,"ESRMNT","",""],[17,"ECOMM","",""],[17,"EPROTO","",""],[17,"EMULTIHOP","",""],[17,"EDOTDOT","",""],[17,"EBADMSG","",""],[17,"EOVERFLOW","",""],[17,"ENOTUNIQ","",""],[17,"EBADFD","",""],[17,"EREMCHG","",""],[17,"ELIBACC","",""],[17,"ELIBBAD","",""],[17,"ELIBSCN","",""],[17,"ELIBMAX","",""],[17,"ELIBEXEC","",""],[17,"EILSEQ","",""],[17,"ERESTART","",""],[17,"ESTRPIPE","",""],[17,"EUSERS","",""],[17,"ENOTSOCK","",""],[17,"EDESTADDRREQ","",""],[17,"EMSGSIZE","",""],[17,"EPROTOTYPE","",""],[17,"ENOPROTOOPT","",""],[17,"EPROTONOSUPPORT","",""],[17,"ESOCKTNOSUPPORT","",""],[17,"EOPNOTSUPP","",""],[17,"EPFNOSUPPORT","",""],[17,"EAFNOSUPPORT","",""],[17,"EADDRINUSE","",""],[17,"EADDRNOTAVAIL","",""],[17,"ENETDOWN","",""],[17,"ENETUNREACH","",""],[17,"ENETRESET","",""],[17,"ECONNABORTED","",""],[17,"ECONNRESET","",""],[17,"ENOBUFS","",""],[17,"EISCONN","",""],[17,"ENOTCONN","",""],[17,"ESHUTDOWN","",""],[17,"ETOOMANYREFS","",""],[17,"ETIMEDOUT","",""],[17,"ECONNREFUSED","",""],[17,"EHOSTDOWN","",""],[17,"EHOSTUNREACH","",""],[17,"EALREADY","",""],[17,"EINPROGRESS","",""],[17,"ESTALE","",""],[17,"EUCLEAN","",""],[17,"ENOTNAM","",""],[17,"ENAVAIL","",""],[17,"EISNAM","",""],[17,"EREMOTEIO","",""],[17,"EDQUOT","",""],[17,"ENOMEDIUM","",""],[17,"EMEDIUMTYPE","",""],[17,"ECANCELED","",""],[17,"ENOKEY","",""],[17,"EKEYEXPIRED","",""],[17,"EKEYREVOKED","",""],[17,"EKEYREJECTED","",""],[17,"EOWNERDEAD","",""],[17,"ENOTRECOVERABLE","",""],[17,"ERFKILL","",""],[17,"EHWPOISON","",""],[0,"posix01","libc::consts::os",""],[17,"F_DUPFD","libc::consts::os::posix01",""],[17,"F_GETFD","",""],[17,"F_SETFD","",""],[17,"F_GETFL","",""],[17,"F_SETFL","",""],[17,"SIGTRAP","",""],[17,"SIGPIPE","",""],[17,"SIG_IGN","",""],[17,"GLOB_ERR","",""],[17,"GLOB_MARK","",""],[17,"GLOB_NOSORT","",""],[17,"GLOB_DOOFFS","",""],[17,"GLOB_NOCHECK","",""],[17,"GLOB_APPEND","",""],[17,"GLOB_NOESCAPE","",""],[17,"GLOB_NOSPACE","",""],[17,"GLOB_ABORTED","",""],[17,"GLOB_NOMATCH","",""],[17,"POSIX_MADV_NORMAL","",""],[17,"POSIX_MADV_RANDOM","",""],[17,"POSIX_MADV_SEQUENTIAL","",""],[17,"POSIX_MADV_WILLNEED","",""],[17,"POSIX_MADV_DONTNEED","",""],[17,"_SC_MQ_PRIO_MAX","",""],[17,"_SC_IOV_MAX","",""],[17,"_SC_GETGR_R_SIZE_MAX","",""],[17,"_SC_GETPW_R_SIZE_MAX","",""],[17,"_SC_LOGIN_NAME_MAX","",""],[17,"_SC_TTY_NAME_MAX","",""],[17,"_SC_THREADS","",""],[17,"_SC_THREAD_SAFE_FUNCTIONS","",""],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","",""],[17,"_SC_THREAD_KEYS_MAX","",""],[17,"_SC_THREAD_STACK_MIN","",""],[17,"_SC_THREAD_THREADS_MAX","",""],[17,"_SC_THREAD_ATTR_STACKADDR","",""],[17,"_SC_THREAD_ATTR_STACKSIZE","",""],[17,"_SC_THREAD_PRIORITY_SCHEDULING","",""],[17,"_SC_THREAD_PRIO_INHERIT","",""],[17,"_SC_THREAD_PRIO_PROTECT","",""],[17,"_SC_THREAD_PROCESS_SHARED","",""],[17,"_SC_ATEXIT_MAX","",""],[17,"_SC_XOPEN_VERSION","",""],[17,"_SC_XOPEN_XCU_VERSION","",""],[17,"_SC_XOPEN_UNIX","",""],[17,"_SC_XOPEN_CRYPT","",""],[17,"_SC_XOPEN_ENH_I18N","",""],[17,"_SC_XOPEN_SHM","",""],[17,"_SC_XOPEN_LEGACY","",""],[17,"_SC_XOPEN_REALTIME","",""],[17,"_SC_XOPEN_REALTIME_THREADS","",""],[17,"PTHREAD_CREATE_JOINABLE","",""],[17,"PTHREAD_CREATE_DETACHED","",""],[17,"PTHREAD_STACK_MIN","",""],[17,"CLOCK_REALTIME","",""],[17,"CLOCK_MONOTONIC","",""],[0,"bsd44","libc::consts::os",""],[17,"MADV_NORMAL","libc::consts::os::bsd44",""],[17,"MADV_RANDOM","",""],[17,"MADV_SEQUENTIAL","",""],[17,"MADV_WILLNEED","",""],[17,"MADV_DONTNEED","",""],[17,"MADV_REMOVE","",""],[17,"MADV_DONTFORK","",""],[17,"MADV_DOFORK","",""],[17,"MADV_MERGEABLE","",""],[17,"MADV_UNMERGEABLE","",""],[17,"MADV_HWPOISON","",""],[17,"IFF_LOOPBACK","",""],[17,"AF_UNIX","",""],[17,"AF_INET","",""],[17,"AF_INET6","",""],[17,"SOCK_STREAM","",""],[17,"SOCK_DGRAM","",""],[17,"SOCK_RAW","",""],[17,"IPPROTO_TCP","",""],[17,"IPPROTO_IP","",""],[17,"IPPROTO_IPV6","",""],[17,"IP_MULTICAST_TTL","",""],[17,"IP_MULTICAST_LOOP","",""],[17,"IP_TTL","",""],[17,"IP_HDRINCL","",""],[17,"IP_ADD_MEMBERSHIP","",""],[17,"IP_DROP_MEMBERSHIP","",""],[17,"IPV6_ADD_MEMBERSHIP","",""],[17,"IPV6_DROP_MEMBERSHIP","",""],[17,"TCP_NODELAY","",""],[17,"SOL_SOCKET","",""],[17,"SO_KEEPALIVE","",""],[17,"SO_BROADCAST","",""],[17,"SO_REUSEADDR","",""],[17,"SO_ERROR","",""],[17,"SHUT_RD","",""],[17,"SHUT_WR","",""],[17,"SHUT_RDWR","",""],[0,"extra","libc::consts::os",""],[17,"AF_PACKET","libc::consts::os::extra",""],[17,"IPPROTO_RAW","",""],[17,"O_RSYNC","",""],[17,"O_DSYNC","",""],[17,"O_NONBLOCK","",""],[17,"O_SYNC","",""],[17,"PROT_GROWSDOWN","",""],[17,"PROT_GROWSUP","",""],[17,"MAP_TYPE","",""],[17,"MAP_ANONYMOUS","",""],[17,"MAP_32BIT","",""],[17,"MAP_GROWSDOWN","",""],[17,"MAP_DENYWRITE","",""],[17,"MAP_EXECUTABLE","",""],[17,"MAP_LOCKED","",""],[17,"MAP_NONRESERVE","",""],[17,"MAP_POPULATE","",""],[17,"MAP_NONBLOCK","",""],[17,"MAP_STACK","",""],[0,"sysconf","libc::consts::os",""],[17,"_SC_ARG_MAX","libc::consts::os::sysconf",""],[17,"_SC_CHILD_MAX","",""],[17,"_SC_CLK_TCK","",""],[17,"_SC_NGROUPS_MAX","",""],[17,"_SC_OPEN_MAX","",""],[17,"_SC_STREAM_MAX","",""],[17,"_SC_TZNAME_MAX","",""],[17,"_SC_JOB_CONTROL","",""],[17,"_SC_SAVED_IDS","",""],[17,"_SC_REALTIME_SIGNALS","",""],[17,"_SC_PRIORITY_SCHEDULING","",""],[17,"_SC_TIMERS","",""],[17,"_SC_ASYNCHRONOUS_IO","",""],[17,"_SC_PRIORITIZED_IO","",""],[17,"_SC_SYNCHRONIZED_IO","",""],[17,"_SC_FSYNC","",""],[17,"_SC_MAPPED_FILES","",""],[17,"_SC_MEMLOCK","",""],[17,"_SC_MEMLOCK_RANGE","",""],[17,"_SC_MEMORY_PROTECTION","",""],[17,"_SC_MESSAGE_PASSING","",""],[17,"_SC_SEMAPHORES","",""],[17,"_SC_SHARED_MEMORY_OBJECTS","",""],[17,"_SC_AIO_LISTIO_MAX","",""],[17,"_SC_AIO_MAX","",""],[17,"_SC_AIO_PRIO_DELTA_MAX","",""],[17,"_SC_DELAYTIMER_MAX","",""],[17,"_SC_MQ_OPEN_MAX","",""],[17,"_SC_VERSION","",""],[17,"_SC_PAGESIZE","",""],[17,"_SC_RTSIG_MAX","",""],[17,"_SC_SEM_NSEMS_MAX","",""],[17,"_SC_SEM_VALUE_MAX","",""],[17,"_SC_SIGQUEUE_MAX","",""],[17,"_SC_TIMER_MAX","",""],[17,"_SC_BC_BASE_MAX","",""],[17,"_SC_BC_DIM_MAX","",""],[17,"_SC_BC_SCALE_MAX","",""],[17,"_SC_BC_STRING_MAX","",""],[17,"_SC_COLL_WEIGHTS_MAX","",""],[17,"_SC_EXPR_NEST_MAX","",""],[17,"_SC_LINE_MAX","",""],[17,"_SC_RE_DUP_MAX","",""],[17,"_SC_2_VERSION","",""],[17,"_SC_2_C_BIND","",""],[17,"_SC_2_C_DEV","",""],[17,"_SC_2_FORT_DEV","",""],[17,"_SC_2_FORT_RUN","",""],[17,"_SC_2_SW_DEV","",""],[17,"_SC_2_LOCALEDEF","",""],[17,"_SC_2_CHAR_TERM","",""],[17,"_SC_2_C_VERSION","",""],[17,"_SC_2_UPE","",""],[17,"_SC_XBS5_ILP32_OFF32","",""],[17,"_SC_XBS5_ILP32_OFFBIG","",""],[17,"_SC_XBS5_LPBIG_OFFBIG","",""],[0,"funcs","libc",""],[0,"c95","libc::funcs",""],[0,"ctype","libc::funcs::c95",""],[5,"isalnum","libc::funcs::c95::ctype",""],[5,"isalpha","",""],[5,"iscntrl","",""],[5,"isdigit","",""],[5,"isgraph","",""],[5,"islower","",""],[5,"isprint","",""],[5,"ispunct","",""],[5,"isspace","",""],[5,"isupper","",""],[5,"isxdigit","",""],[5,"tolower","",""],[5,"toupper","",""],[0,"stdio","libc::funcs::c95",""],[5,"fopen","libc::funcs::c95::stdio",""],[5,"freopen","",""],[5,"fflush","",""],[5,"fclose","",""],[5,"remove","",""],[5,"rename","",""],[5,"tmpfile","",""],[5,"setvbuf","",""],[5,"setbuf","",""],[5,"fgetc","",""],[5,"fgets","",""],[5,"fputc","",""],[5,"fputs","",""],[5,"puts","",""],[5,"ungetc","",""],[5,"fread","",""],[5,"fwrite","",""],[5,"fseek","",""],[5,"ftell","",""],[5,"rewind","",""],[5,"fgetpos","",""],[5,"fsetpos","",""],[5,"feof","",""],[5,"ferror","",""],[5,"perror","",""],[0,"stdlib","libc::funcs::c95",""],[5,"abs","libc::funcs::c95::stdlib",""],[5,"labs","",""],[5,"atof","",""],[5,"atoi","",""],[5,"strtod","",""],[5,"strtol","",""],[5,"strtoul","",""],[5,"calloc","",""],[5,"malloc","",""],[5,"realloc","",""],[5,"free","",""],[5,"exit","","Exits the running program in a possibly dangerous manner."],[5,"_exit","",""],[5,"atexit","",""],[5,"system","",""],[5,"getenv","",""],[5,"rand","",""],[5,"srand","",""],[0,"string","libc::funcs::c95",""],[5,"strcpy","libc::funcs::c95::string",""],[5,"strncpy","",""],[5,"strcat","",""],[5,"strncat","",""],[5,"strcmp","",""],[5,"strncmp","",""],[5,"strcoll","",""],[5,"strchr","",""],[5,"strrchr","",""],[5,"strspn","",""],[5,"strcspn","",""],[5,"strpbrk","",""],[5,"strstr","",""],[5,"strlen","",""],[5,"strerror","",""],[5,"strtok","",""],[5,"strxfrm","",""],[5,"wcslen","",""],[5,"memcmp","",""],[5,"memchr","",""],[0,"posix88","libc::funcs",""],[0,"stat_","libc::funcs::posix88",""],[5,"chmod","libc::funcs::posix88::stat_",""],[5,"fchmod","",""],[5,"fstat","",""],[5,"mkdir","",""],[5,"mkfifo","",""],[5,"stat","",""],[0,"stdio","libc::funcs::posix88",""],[5,"popen","libc::funcs::posix88::stdio",""],[5,"pclose","",""],[5,"fdopen","",""],[5,"fileno","",""],[0,"fcntl","libc::funcs::posix88",""],[5,"open","libc::funcs::posix88::fcntl",""],[5,"creat","",""],[5,"fcntl","",""],[0,"dirent","libc::funcs::posix88",""],[5,"opendir","libc::funcs::posix88::dirent",""],[5,"readdir_r","",""],[5,"closedir","",""],[5,"rewinddir","",""],[5,"seekdir","",""],[5,"telldir","",""],[0,"unistd","libc::funcs::posix88",""],[5,"access","libc::funcs::posix88::unistd",""],[5,"alarm","",""],[5,"chdir","",""],[5,"chown","",""],[5,"close","",""],[5,"dup","",""],[5,"dup2","",""],[5,"execv","",""],[5,"execve","",""],[5,"execvp","",""],[5,"fork","",""],[5,"fpathconf","",""],[5,"getcwd","",""],[5,"getegid","",""],[5,"geteuid","",""],[5,"getgid","",""],[5,"getgroups","",""],[5,"getlogin","",""],[5,"getopt","",""],[5,"getpgrp","",""],[5,"getpid","",""],[5,"getppid","",""],[5,"getuid","",""],[5,"getsid","",""],[5,"isatty","",""],[5,"link","",""],[5,"lseek","",""],[5,"pathconf","",""],[5,"pause","",""],[5,"pipe","",""],[5,"read","",""],[5,"rmdir","",""],[5,"setgid","",""],[5,"setpgid","",""],[5,"setsid","",""],[5,"setuid","",""],[5,"sleep","",""],[5,"usleep","",""],[5,"nanosleep","",""],[5,"sysconf","",""],[5,"tcgetpgrp","",""],[5,"ttyname","",""],[5,"unlink","",""],[5,"write","",""],[5,"pread","",""],[5,"pwrite","",""],[5,"utime","",""],[17,"_PC_NAME_MAX","",""],[0,"signal","libc::funcs::posix88",""],[5,"kill","libc::funcs::posix88::signal",""],[0,"mman","libc::funcs::posix88",""],[5,"mlock","libc::funcs::posix88::mman",""],[5,"munlock","",""],[5,"mlockall","",""],[5,"munlockall","",""],[5,"mmap","",""],[5,"munmap","",""],[5,"mprotect","",""],[5,"msync","",""],[5,"shm_open","",""],[5,"shm_unlink","",""],[0,"net","libc::funcs::posix88",""],[5,"if_nametoindex","libc::funcs::posix88::net",""],[0,"posix01","libc::funcs",""],[0,"stat_","libc::funcs::posix01",""],[5,"lstat","libc::funcs::posix01::stat_",""],[0,"unistd","libc::funcs::posix01",""],[5,"readlink","libc::funcs::posix01::unistd",""],[5,"fsync","",""],[5,"fdatasync","",""],[5,"setenv","",""],[5,"unsetenv","",""],[5,"putenv","",""],[5,"symlink","",""],[5,"ftruncate","",""],[0,"signal","libc::funcs::posix01",""],[5,"signal","libc::funcs::posix01::signal",""],[0,"glob","libc::funcs::posix01",""],[5,"glob","libc::funcs::posix01::glob",""],[5,"globfree","",""],[0,"mman","libc::funcs::posix01",""],[5,"posix_madvise","libc::funcs::posix01::mman",""],[0,"bsd43","libc::funcs",""],[5,"socket","libc::funcs::bsd43",""],[5,"connect","",""],[5,"bind","",""],[5,"listen","",""],[5,"accept","",""],[5,"getpeername","",""],[5,"getsockname","",""],[5,"setsockopt","",""],[5,"recv","",""],[5,"send","",""],[5,"recvfrom","",""],[5,"sendto","",""],[5,"getifaddrs","",""],[5,"freeifaddrs","",""],[5,"shutdown","",""],[0,"bsd44","libc::funcs",""],[5,"getdtablesize","libc::funcs::bsd44",""],[5,"ioctl","",""],[5,"madvise","",""],[5,"mincore","",""]],"paths":[[4,"c_void"],[3,"glob_t"],[3,"timeval"],[3,"timespec"],[3,"sockaddr"],[3,"sockaddr_storage"],[3,"sockaddr_in"],[3,"in_addr"],[3,"sockaddr_in6"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ip6_mreq"],[3,"addrinfo"],[3,"sockaddr_un"],[3,"ifaddrs"],[3,"stat"],[3,"utimbuf"],[3,"pthread_attr_t"],[3,"sockaddr_ll"]]};

searchIndex['rustc-serialize'] = {"items":[[0,"","rustc-serialize","Support code for encoding and decoding types."],[11,"encode","collections::string","",0],[11,"decode","","",0],[11,"encode","alloc::boxed","",1],[11,"decode","","",1],[11,"decode","","",1],[11,"encode","alloc::rc","",2],[11,"decode","","",2],[11,"encode","collections::vec","",3],[11,"decode","","",3],[11,"encode","core::option","",4],[11,"decode","","",4],[11,"encode","std::old_path::posix","",5],[11,"decode","","",5],[11,"encode","std::old_path::windows","",6],[11,"decode","","",6],[11,"encode","std::path","",7],[11,"encode","","",8],[11,"decode","","",8],[11,"encode","core::cell","",9],[11,"decode","","",9],[11,"encode","","",10],[11,"decode","","",10],[11,"encode","alloc::arc","",11],[11,"decode","","",11],[11,"encode","collections::linked_list","",12],[11,"decode","","",12],[11,"encode","collections::vec_deque","",13],[11,"decode","","",13],[11,"encode","collections::btree::map","",14],[11,"decode","","",14],[11,"encode","collections::btree::set","",15],[11,"decode","","",15],[11,"encode","std::collections::hash::map","",16],[11,"decode","","",16],[11,"encode","std::collections::hash::set","",17],[11,"decode","","",17],[11,"encode","collections::vec_map","",18],[11,"decode","","",18],[0,"base64","rustc-serialize","Base64 binary-to-text encoding"],[3,"Config","rustc-serialize::base64","Contains configuration parameters for `to_base64`."],[12,"char_set","","Character set to use",19],[12,"newline","","Newline to use",19],[12,"pad","","True to pad output with `=` characters",19],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",19],[4,"CharacterSet","","Available encoding character sets"],[13,"Standard","","The standard character set (uses `+` and `/`)",20],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",20],[4,"Newline","","Available newline types"],[13,"LF","","A linefeed (i.e. Unix-style newline)",21],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",21],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string"],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",22],[13,"InvalidBase64Length","","The input had an invalid length",22],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding"],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding"],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding"],[8,"ToBase64","","A trait for converting a value to base64 encoding."],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",23],[8,"FromBase64","","A trait for converting from base64 encoded values."],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",24],[11,"fmt","","",22],[11,"description","","",22],[11,"fmt","","",22],[0,"hex","rustc-serialize","Hex binary-to-text encoding"],[4,"FromHexError","rustc-serialize::hex","Errors that can occur when decoding a hex encoded string"],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",25],[13,"InvalidHexLength","","The input had an invalid length",25],[8,"ToHex","","A trait for converting a value to hexadecimal encoding"],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",26],[8,"FromHex","","A trait for converting hexadecimal encoded values"],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",27],[11,"fmt","","",25],[11,"description","","",25],[11,"fmt","","",25],[0,"json","rustc-serialize","JSON parsing and serialization"],[3,"PrettyJson","rustc-serialize::json",""],[3,"AsJson","",""],[3,"AsPrettyJson","",""],[3,"Encoder","","A structure for implementing serialization to JSON."],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x"],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char."],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure."],[3,"Decoder","","A structure to decode JSON to values in rust."],[4,"Json","","Represents a json value"],[13,"I64","","",28],[13,"U64","","",28],[13,"F64","","",28],[13,"String","","",28],[13,"Boolean","","",28],[13,"Array","","",28],[13,"Object","","",28],[13,"Null","","",28],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream."],[13,"InvalidSyntax","","",29],[13,"InvalidNumber","","",29],[13,"EOFWhileParsingObject","","",29],[13,"EOFWhileParsingArray","","",29],[13,"EOFWhileParsingValue","","",29],[13,"EOFWhileParsingString","","",29],[13,"KeyMustBeAString","","",29],[13,"ExpectedColon","","",29],[13,"TrailingCharacters","","",29],[13,"TrailingComma","","",29],[13,"InvalidEscape","","",29],[13,"InvalidUnicodeCodePoint","","",29],[13,"LoneLeadingSurrogateInHexEscape","","",29],[13,"UnexpectedEndOfHexEscape","","",29],[13,"UnrecognizedHex","","",29],[13,"NotFourDigit","","",29],[13,"NotUtf8","","",29],[4,"ParserError","",""],[13,"SyntaxError","","msg, line, col",30],[13,"IoError","","",30],[4,"DecoderError","",""],[13,"ParseError","","",31],[13,"ExpectedError","","",31],[13,"MissingFieldError","","",31],[13,"UnknownVariantError","","",31],[13,"ApplicationError","","",31],[4,"EncoderError","",""],[13,"FmtError","","",32],[13,"BadHashmapKey","","",32],[4,"JsonEvent","","The output of the streaming parser."],[13,"ObjectStart","","",33],[13,"ObjectEnd","","",33],[13,"ArrayStart","","",33],[13,"ArrayEnd","","",33],[13,"BooleanValue","","",33],[13,"I64Value","","",33],[13,"U64Value","","",33],[13,"F64Value","","",33],[13,"StringValue","","",33],[13,"NullValue","","",33],[13,"Error","","",33],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x"],[13,"Index","","",34],[13,"Key","","",34],[5,"error_str","","Returns a readable error string for a given error code."],[5,"decode","","Shortcut function to decode a JSON `&str` into an object"],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`"],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[6,"Array","",""],[6,"Object","",""],[6,"BuilderError","",""],[6,"EncodeResult","",""],[6,"DecodeResult","",""],[8,"ToJson","","A trait for converting values to JSON"],[10,"to_json","","Converts the value of `self` to an instance of JSON",35],[11,"fmt","","",28],[11,"partial_cmp","","",28],[11,"lt","","",28],[11,"le","","",28],[11,"gt","","",28],[11,"ge","","",28],[11,"eq","","",28],[11,"ne","","",28],[11,"clone","","",28],[11,"eq","","",29],[11,"ne","","",29],[11,"clone","","",29],[11,"fmt","","",30],[11,"eq","","",30],[11,"ne","","",30],[11,"clone","","",30],[11,"fmt","","",31],[11,"eq","","",31],[11,"ne","","",31],[11,"clone","","",31],[11,"fmt","","",32],[11,"fmt","","",29],[11,"description","","",31],[11,"cause","","",31],[11,"fmt","","",31],[11,"description","","",30],[11,"fmt","","",30],[11,"description","","",32],[11,"fmt","","",32],[11,"from_error","","",32],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",36],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",36],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",36],[6,"Error","",""],[11,"emit_nil","","",36],[11,"emit_usize","","",36],[11,"emit_u64","","",36],[11,"emit_u32","","",36],[11,"emit_u16","","",36],[11,"emit_u8","","",36],[11,"emit_isize","","",36],[11,"emit_i64","","",36],[11,"emit_i32","","",36],[11,"emit_i16","","",36],[11,"emit_i8","","",36],[11,"emit_bool","","",36],[11,"emit_f64","","",36],[11,"emit_f32","","",36],[11,"emit_char","","",36],[11,"emit_str","","",36],[11,"emit_enum","","",36],[11,"emit_enum_variant","","",36],[11,"emit_enum_variant_arg","","",36],[11,"emit_enum_struct_variant","","",36],[11,"emit_enum_struct_variant_field","","",36],[11,"emit_struct","","",36],[11,"emit_struct_field","","",36],[11,"emit_tuple","","",36],[11,"emit_tuple_arg","","",36],[11,"emit_tuple_struct","","",36],[11,"emit_tuple_struct_arg","","",36],[11,"emit_option","","",36],[11,"emit_option_none","","",36],[11,"emit_option_some","","",36],[11,"emit_seq","","",36],[11,"emit_seq_elt","","",36],[11,"emit_map","","",36],[11,"emit_map_elt_key","","",36],[11,"emit_map_elt_val","","",36],[11,"encode","","",28],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",28],[11,"from_str","","Decodes a json value from a string",28],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",28],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",28],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",28],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",28],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",28],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",28],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",28],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",28],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",28],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",28],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",28],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",28],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",28],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",28],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",28],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",28],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",28],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",28],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",28],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",28],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",28],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",28],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",28],[6,"Output","",""],[11,"index","","",28],[6,"Output","",""],[11,"index","","",28],[11,"fmt","","",33],[11,"clone","","",33],[11,"eq","","",33],[11,"ne","","",33],[11,"fmt","","",34],[11,"clone","","",34],[11,"eq","","",34],[11,"ne","","",34],[11,"new","","",37],[11,"len","","Returns The number of elements in the Stack.",37],[11,"is_empty","","Returns true if the stack is empty.",37],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",37],[11,"is_equal_to","","Compares this stack with an array of StackElements.",37],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",37],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",37],[11,"top","","Returns the top-most element (if any).",37],[6,"Item","",""],[11,"next","","",38],[11,"new","","Creates the JSON parser.",38],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",38],[11,"new","","Create a JSON Builder.",39],[11,"build","","",39],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",40],[6,"Error","",""],[11,"read_nil","","",40],[11,"read_usize","","",40],[11,"read_u8","","",40],[11,"read_u16","","",40],[11,"read_u32","","",40],[11,"read_u64","","",40],[11,"read_isize","","",40],[11,"read_i8","","",40],[11,"read_i16","","",40],[11,"read_i32","","",40],[11,"read_i64","","",40],[11,"read_f32","","",40],[11,"read_f64","","",40],[11,"read_bool","","",40],[11,"read_char","","",40],[11,"read_str","","",40],[11,"read_enum","","",40],[11,"read_enum_variant","","",40],[11,"read_enum_variant_arg","","",40],[11,"read_enum_struct_variant","","",40],[11,"read_enum_struct_variant_field","","",40],[11,"read_struct","","",40],[11,"read_struct_field","","",40],[11,"read_tuple","","",40],[11,"read_tuple_arg","","",40],[11,"read_tuple_struct","","",40],[11,"read_tuple_struct_arg","","",40],[11,"read_option","","",40],[11,"read_seq","","",40],[11,"read_seq_elt","","",40],[11,"read_map","","",40],[11,"read_map_elt_key","","",40],[11,"read_map_elt_val","","",40],[11,"error","","",40],[11,"to_json","","",28],[11,"to_json","collections::string","",0],[11,"to_json","collections::vec","",3],[11,"to_json","collections::btree::map","",14],[11,"to_json","std::collections::hash::map","",16],[11,"to_json","core::option","",4],[11,"fmt","rustc-serialize::json","Encodes a json value into a string",28],[11,"fmt","","Encodes a json value into a string",41],[11,"fmt","","Encodes a json value into a string",42],[11,"indent","","Set the indentation level for the emitted JSON",43],[11,"fmt","","Encodes a json value into a string",43],[6,"Err","",""],[11,"from_str","","",28],[11,"encode","collections::string","",0],[11,"decode","","",0],[11,"encode","alloc::boxed","",1],[11,"decode","","",1],[11,"decode","","",1],[11,"encode","alloc::rc","",2],[11,"decode","","",2],[11,"encode","collections::vec","",3],[11,"decode","","",3],[11,"encode","core::option","",4],[11,"decode","","",4],[11,"encode","std::old_path::posix","",5],[11,"decode","","",5],[11,"encode","std::old_path::windows","",6],[11,"decode","","",6],[11,"encode","std::path","",7],[11,"encode","","",8],[11,"decode","","",8],[11,"encode","core::cell","",9],[11,"decode","","",9],[11,"encode","","",10],[11,"decode","","",10],[11,"encode","alloc::arc","",11],[11,"decode","","",11],[8,"Decoder","rustc-serialize",""],[16,"Error","rustc-serialize::Decoder",""],[10,"read_nil","rustc-serialize","",44],[10,"read_usize","","",44],[10,"read_u64","","",44],[10,"read_u32","","",44],[10,"read_u16","","",44],[10,"read_u8","","",44],[10,"read_isize","","",44],[10,"read_i64","","",44],[10,"read_i32","","",44],[10,"read_i16","","",44],[10,"read_i8","","",44],[10,"read_bool","","",44],[10,"read_f64","","",44],[10,"read_f32","","",44],[10,"read_char","","",44],[10,"read_str","","",44],[10,"read_enum","","",44],[10,"read_enum_variant","","",44],[10,"read_enum_variant_arg","","",44],[10,"read_enum_struct_variant","","",44],[10,"read_enum_struct_variant_field","","",44],[10,"read_struct","","",44],[10,"read_struct_field","","",44],[10,"read_tuple","","",44],[10,"read_tuple_arg","","",44],[10,"read_tuple_struct","","",44],[10,"read_tuple_struct_arg","","",44],[10,"read_option","","",44],[10,"read_seq","","",44],[10,"read_seq_elt","","",44],[10,"read_map","","",44],[10,"read_map_elt_key","","",44],[10,"read_map_elt_val","","",44],[10,"error","","",44],[8,"Encoder","",""],[16,"Error","rustc-serialize::Encoder",""],[10,"emit_nil","rustc-serialize","",45],[10,"emit_usize","","",45],[10,"emit_u64","","",45],[10,"emit_u32","","",45],[10,"emit_u16","","",45],[10,"emit_u8","","",45],[10,"emit_isize","","",45],[10,"emit_i64","","",45],[10,"emit_i32","","",45],[10,"emit_i16","","",45],[10,"emit_i8","","",45],[10,"emit_bool","","",45],[10,"emit_f64","","",45],[10,"emit_f32","","",45],[10,"emit_char","","",45],[10,"emit_str","","",45],[10,"emit_enum","","",45],[10,"emit_enum_variant","","",45],[10,"emit_enum_variant_arg","","",45],[10,"emit_enum_struct_variant","","",45],[10,"emit_enum_struct_variant_field","","",45],[10,"emit_struct","","",45],[10,"emit_struct_field","","",45],[10,"emit_tuple","","",45],[10,"emit_tuple_arg","","",45],[10,"emit_tuple_struct","","",45],[10,"emit_tuple_struct_arg","","",45],[10,"emit_option","","",45],[10,"emit_option_none","","",45],[10,"emit_option_some","","",45],[10,"emit_seq","","",45],[10,"emit_seq_elt","","",45],[10,"emit_map","","",45],[10,"emit_map_elt_key","","",45],[10,"emit_map_elt_val","","",45],[8,"Decodable","",""],[10,"decode","","",46],[8,"Encodable","",""],[10,"encode","","",47],[8,"DecoderHelpers","",""],[10,"read_to_vec","","",48],[8,"EncoderHelpers","",""],[10,"emit_from_vec","","",49]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[3,"Vec"],[4,"Option"],[3,"Path"],[3,"Path"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"VecMap"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};

searchIndex['khronos_api'] = {"items":[[0,"","khronos_api","This crates contains the sources of the official OpenGL repository."],[7,"GL_XML","","Content of the official `gl.xml` file."],[7,"EGL_XML","","Content of the official `egl.xml` file."],[7,"WGL_XML","","Content of the official `wgl.xml` file."],[7,"GLX_XML","","Content of the official `glx.xml` file."]],"paths":[]};

searchIndex['log'] = {"items":[[0,"","log","A lightweight logging facade."],[3,"LogRecord","","The \"payload\" of a log message."],[3,"LogLocation","","The location of a log message."],[12,"module_path","","The module path of the message.",0],[12,"file","","The source file containing the message.",0],[12,"line","","The line containing the message.",0],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter."],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called."],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework"],[13,"Error","","The \"error\" level.",1],[13,"Warn","","The \"warn\" level.",1],[13,"Info","","The \"info\" level.",1],[13,"Debug","","The \"debug\" level.",1],[13,"Trace","","The \"trace\" level.",1],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework."],[13,"Off","","A level lower than all log levels.",2],[13,"Error","","Corresponds to the `Error` log level.",2],[13,"Warn","","Corresponds to the `Warn` log level.",2],[13,"Info","","Corresponds to the `Trace` log level.",2],[13,"Debug","","Corresponds to the `Debug` log level.",2],[13,"Trace","","Corresponds to the `Trace` log level.",2],[5,"max_log_level","","Returns the current maximum log level."],[5,"set_logger","","Sets the global logger."],[5,"enabled","","Determines if the current logger will ignore a log message at the specified\nlevel from the specified module."],[5,"log","","Logs a message."],[8,"Log","","A trait encapsulating the operations required of a logger"],[10,"enabled","","Determines if a log message sent at the specified level from the\nspecified module would be logged.",3],[10,"log","","Logs the `LogRecord`.",3],[11,"fmt","","",1],[11,"clone","","",1],[11,"eq","","",1],[11,"eq","","",1],[11,"partial_cmp","","",1],[11,"partial_cmp","","",1],[11,"cmp","","",1],[6,"Err","",""],[11,"from_str","","",1],[11,"fmt","","",1],[11,"max","","Returns the most verbose logging level.",1],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",1],[11,"fmt","","",2],[11,"clone","","",2],[11,"eq","","",2],[11,"eq","","",2],[11,"partial_cmp","","",2],[11,"partial_cmp","","",2],[11,"cmp","","",2],[6,"Err","",""],[11,"from_str","","",2],[11,"fmt","","",2],[11,"max","","Returns the most verbose logging level filter.",2],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",2],[11,"new","","Creates a new `LogRecord`.",4],[11,"args","","The message body.",4],[11,"location","","The location of the log directive.",4],[11,"level","","The verbosity level of the message.",4],[11,"fmt","","",0],[11,"clone","","",0],[11,"fmt","","",5],[11,"get","","Gets the current maximum log level filter.",5],[11,"set","","Sets the maximum log level.",5],[11,"fmt","","",6],[11,"fmt","","",6],[11,"description","","",6],[14,"log!","","The standard logging macro."],[14,"error!","","Logs a message at the error level."],[14,"warn!","","Logs a message at the warn level."],[14,"info!","","Logs a message at the info level."],[14,"debug!","","Logs a message at the debug level."],[14,"trace!","","Logs a message at the trace level."],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged."]],"paths":[[3,"LogLocation"],[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"]]};

initSearch(searchIndex);
